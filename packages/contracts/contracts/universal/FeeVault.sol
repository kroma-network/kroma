// SPDX-License-Identifier: MIT
pragma solidity 0.8.15;

import { L2StandardBridge } from "../L2/L2StandardBridge.sol";
import { Predeploys } from "../libraries/Predeploys.sol";
import { SafeCall } from "../libraries/SafeCall.sol";

/**
 * @title FeeVault
 * @notice The FeeVault contract contains the basic logic for the various different vault contracts
 *         used to hold fee revenue generated by the L2 system.
 */
abstract contract FeeVault {
    /**
     * @notice Emits each time that a withdrawal occurs.
     *
     * @param value Amount that was withdrawn (in wei).
     * @param to    Address that the funds were sent to.
     * @param from  Address that triggered the withdrawal.
     */
    event Withdrawal(uint256 value, address to, address from);

    /**
     * @notice Minimum balance before a withdrawal can be triggered.
     */
    uint256 public immutable MIN_WITHDRAWAL_AMOUNT;

    /**
     * @notice Wallet that will receive the fees on L1.
     */
    address public immutable RECIPIENT;

    /**
     * @notice The minimum gas limit for the FeeVault withdrawal transaction.
     */
    uint32 internal constant WITHDRAWAL_MIN_GAS = 35_000;

    /**
     * @notice Total amount of wei processed by the contract.
     */
    uint256 public totalProcessed;

    /**
     * @param _recipient           Wallet that will receive the fees on L1.
     * @param _minWithdrawalAmount Minimum balance before a withdrawal can be triggered.
     */
    constructor(address _recipient, uint256 _minWithdrawalAmount) {
        MIN_WITHDRAWAL_AMOUNT = _minWithdrawalAmount;
        RECIPIENT = _recipient;
    }

    /**
     * @notice Allow the contract to receive ETH.
     */
    receive() external payable {}

    /**
     * @notice Checks if the withdrawal is possible, and returns the withdrawal amount.
     *         When a withdrawal is available, it resets the balance and updates the total processed amount.
     */
    function _processWithdrawal() private returns (uint256) {
        require(
            address(this).balance >= MIN_WITHDRAWAL_AMOUNT,
            "FeeVault: withdrawal amount must be greater than minimum withdrawal amount"
        );

        uint256 amount = address(this).balance;
        totalProcessed += amount;

        emit Withdrawal(amount, RECIPIENT, msg.sender);
        return amount;
    }

    /**
     * @notice Triggers a withdrawal of funds to the recipient on L1.
     */
    function withdraw() external virtual {
        uint256 amount = _processWithdrawal();

        L2StandardBridge(payable(Predeploys.L2_STANDARD_BRIDGE)).bridgeETHTo{ value: amount }(
            RECIPIENT,
            WITHDRAWAL_MIN_GAS,
            bytes("")
        );
    }

    /**
     * @notice Triggers a withdrawal of funds to the recipient on L2.
     */
    function withdrawToL2() external virtual {
        uint256 amount = _processWithdrawal();

        bool success = SafeCall.call(msg.sender, gasleft(), amount, bytes(""));
        require(success, "FeeVault: ETH transfer failed");
    }
}
