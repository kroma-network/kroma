
    /* eslint-disable @typescript-eslint/no-var-requires, no-empty */
    /*
    THIS FILE IS AUTOMATICALLY GENERATED.
    DO NOT EDIT.
    */

    
        let EchidnaFuzzAddressAliasing
        try {
          EchidnaFuzzAddressAliasing = require('../artifacts/contracts/echidna/FuzzAddressAliasing.sol/EchidnaFuzzAddressAliasing.json')
        } catch {}
        

        let EchidnaFuzzBurnEth
        try {
          EchidnaFuzzBurnEth = require('../artifacts/contracts/echidna/FuzzBurn.sol/EchidnaFuzzBurnEth.json')
        } catch {}
        

        let EchidnaFuzzBurnGas
        try {
          EchidnaFuzzBurnGas = require('../artifacts/contracts/echidna/FuzzBurn.sol/EchidnaFuzzBurnGas.json')
        } catch {}
        

        let EchidnaFuzzEncoding
        try {
          EchidnaFuzzEncoding = require('../artifacts/contracts/echidna/FuzzEncoding.sol/EchidnaFuzzEncoding.json')
        } catch {}
        

        let EchidnaFuzzHashing
        try {
          EchidnaFuzzHashing = require('../artifacts/contracts/echidna/FuzzHashing.sol/EchidnaFuzzHashing.json')
        } catch {}
        

        let EchidnaFuzzKromaPortal
        try {
          EchidnaFuzzKromaPortal = require('../artifacts/contracts/echidna/FuzzKromaPortal.sol/EchidnaFuzzKromaPortal.json')
        } catch {}
        

        let EchidnaFuzzResourceMetering
        try {
          EchidnaFuzzResourceMetering = require('../artifacts/contracts/echidna/FuzzResourceMetering.sol/EchidnaFuzzResourceMetering.json')
        } catch {}
        

        let GovernanceToken
        try {
          GovernanceToken = require('../artifacts/contracts/governance/GovernanceToken.sol/GovernanceToken.json')
        } catch {}
        

        let MintManager
        try {
          MintManager = require('../artifacts/contracts/governance/MintManager.sol/MintManager.json')
        } catch {}
        

        let SecurityCouncilToken
        try {
          SecurityCouncilToken = require('../artifacts/contracts/governance/SecurityCouncilToken.sol/SecurityCouncilToken.json')
        } catch {}
        

        let TimeLock
        try {
          TimeLock = require('../artifacts/contracts/governance/TimeLock.sol/TimeLock.json')
        } catch {}
        

        let UpgradeGovernor
        try {
          UpgradeGovernor = require('../artifacts/contracts/governance/UpgradeGovernor.sol/UpgradeGovernor.json')
        } catch {}
        

        let AssetManager
        try {
          AssetManager = require('../artifacts/contracts/L1/AssetManager.sol/AssetManager.json')
        } catch {}
        

        let Colosseum
        try {
          Colosseum = require('../artifacts/contracts/L1/Colosseum.sol/Colosseum.json')
        } catch {}
        

        let IAssetManager
        try {
          IAssetManager = require('../artifacts/contracts/L1/interfaces/IAssetManager.sol/IAssetManager.json')
        } catch {}
        

        let IValidatorManager
        try {
          IValidatorManager = require('../artifacts/contracts/L1/interfaces/IValidatorManager.sol/IValidatorManager.json')
        } catch {}
        

        let IZKMerkleTrie
        try {
          IZKMerkleTrie = require('../artifacts/contracts/L1/interfaces/IZKMerkleTrie.sol/IZKMerkleTrie.json')
        } catch {}
        

        let KromaPortal
        try {
          KromaPortal = require('../artifacts/contracts/L1/KromaPortal.sol/KromaPortal.json')
        } catch {}
        

        let L1CrossDomainMessenger
        try {
          L1CrossDomainMessenger = require('../artifacts/contracts/L1/L1CrossDomainMessenger.sol/L1CrossDomainMessenger.json')
        } catch {}
        

        let L1ERC721Bridge
        try {
          L1ERC721Bridge = require('../artifacts/contracts/L1/L1ERC721Bridge.sol/L1ERC721Bridge.json')
        } catch {}
        

        let L1StandardBridge
        try {
          L1StandardBridge = require('../artifacts/contracts/L1/L1StandardBridge.sol/L1StandardBridge.json')
        } catch {}
        

        let L2OutputOracle
        try {
          L2OutputOracle = require('../artifacts/contracts/L1/L2OutputOracle.sol/L2OutputOracle.json')
        } catch {}
        

        let ResourceMetering
        try {
          ResourceMetering = require('../artifacts/contracts/L1/ResourceMetering.sol/ResourceMetering.json')
        } catch {}
        

        let SecurityCouncil
        try {
          SecurityCouncil = require('../artifacts/contracts/L1/SecurityCouncil.sol/SecurityCouncil.json')
        } catch {}
        

        let SystemConfig
        try {
          SystemConfig = require('../artifacts/contracts/L1/SystemConfig.sol/SystemConfig.json')
        } catch {}
        

        let ValidatorManager
        try {
          ValidatorManager = require('../artifacts/contracts/L1/ValidatorManager.sol/ValidatorManager.json')
        } catch {}
        

        let ValidatorPool
        try {
          ValidatorPool = require('../artifacts/contracts/L1/ValidatorPool.sol/ValidatorPool.json')
        } catch {}
        

        let ZKMerkleTrie
        try {
          ZKMerkleTrie = require('../artifacts/contracts/L1/ZKMerkleTrie.sol/ZKMerkleTrie.json')
        } catch {}
        

        let IPoseidon2
        try {
          IPoseidon2 = require('../artifacts/contracts/L1/ZKTrieHasher.sol/IPoseidon2.json')
        } catch {}
        

        let ZKTrieHasher
        try {
          ZKTrieHasher = require('../artifacts/contracts/L1/ZKTrieHasher.sol/ZKTrieHasher.json')
        } catch {}
        

        let ZKVerifier
        try {
          ZKVerifier = require('../artifacts/contracts/L1/ZKVerifier.sol/ZKVerifier.json')
        } catch {}
        

        let CrossDomainOwnable
        try {
          CrossDomainOwnable = require('../artifacts/contracts/L2/CrossDomainOwnable.sol/CrossDomainOwnable.json')
        } catch {}
        

        let CrossDomainOwnable2
        try {
          CrossDomainOwnable2 = require('../artifacts/contracts/L2/CrossDomainOwnable2.sol/CrossDomainOwnable2.json')
        } catch {}
        

        let CrossDomainOwnable3
        try {
          CrossDomainOwnable3 = require('../artifacts/contracts/L2/CrossDomainOwnable3.sol/CrossDomainOwnable3.json')
        } catch {}
        

        let GasPriceOracle
        try {
          GasPriceOracle = require('../artifacts/contracts/L2/GasPriceOracle.sol/GasPriceOracle.json')
        } catch {}
        

        let L1Block
        try {
          L1Block = require('../artifacts/contracts/L2/L1Block.sol/L1Block.json')
        } catch {}
        

        let L2CrossDomainMessenger
        try {
          L2CrossDomainMessenger = require('../artifacts/contracts/L2/L2CrossDomainMessenger.sol/L2CrossDomainMessenger.json')
        } catch {}
        

        let L2ERC721Bridge
        try {
          L2ERC721Bridge = require('../artifacts/contracts/L2/L2ERC721Bridge.sol/L2ERC721Bridge.json')
        } catch {}
        

        let L2StandardBridge
        try {
          L2StandardBridge = require('../artifacts/contracts/L2/L2StandardBridge.sol/L2StandardBridge.json')
        } catch {}
        

        let L2ToL1MessagePasser
        try {
          L2ToL1MessagePasser = require('../artifacts/contracts/L2/L2ToL1MessagePasser.sol/L2ToL1MessagePasser.json')
        } catch {}
        

        let Arithmetic
        try {
          Arithmetic = require('../artifacts/contracts/libraries/Arithmetic.sol/Arithmetic.json')
        } catch {}
        

        let Atan2
        try {
          Atan2 = require('../artifacts/contracts/libraries/Atan2.sol/Atan2.json')
        } catch {}
        

        let BalancedWeightTree
        try {
          BalancedWeightTree = require('../artifacts/contracts/libraries/BalancedWeightTree.sol/BalancedWeightTree.json')
        } catch {}
        

        let Burn
        try {
          Burn = require('../artifacts/contracts/libraries/Burn.sol/Burn.json')
        } catch {}
        

        let Bytes
        try {
          Bytes = require('../artifacts/contracts/libraries/Bytes.sol/Bytes.json')
        } catch {}
        

        let Bytes32
        try {
          Bytes32 = require('../artifacts/contracts/libraries/Bytes32.sol/Bytes32.json')
        } catch {}
        

        let CodeDeployer
        try {
          CodeDeployer = require('../artifacts/contracts/libraries/CodeDeployer.sol/CodeDeployer.json')
        } catch {}
        

        let Constants
        try {
          Constants = require('../artifacts/contracts/libraries/Constants.sol/Constants.json')
        } catch {}
        

        let Encoding
        try {
          Encoding = require('../artifacts/contracts/libraries/Encoding.sol/Encoding.json')
        } catch {}
        

        let Hashing
        try {
          Hashing = require('../artifacts/contracts/libraries/Hashing.sol/Hashing.json')
        } catch {}
        

        let NodeReader
        try {
          NodeReader = require('../artifacts/contracts/libraries/NodeReader.sol/NodeReader.json')
        } catch {}
        

        let Predeploys
        try {
          Predeploys = require('../artifacts/contracts/libraries/Predeploys.sol/Predeploys.json')
        } catch {}
        

        let RLPWriter
        try {
          RLPWriter = require('../artifacts/contracts/libraries/rlp/RLPWriter.sol/RLPWriter.json')
        } catch {}
        

        let SafeCall
        try {
          SafeCall = require('../artifacts/contracts/libraries/SafeCall.sol/SafeCall.json')
        } catch {}
        

        let Types
        try {
          Types = require('../artifacts/contracts/libraries/Types.sol/Types.json')
        } catch {}
        

        let Uint128Math
        try {
          Uint128Math = require('../artifacts/contracts/libraries/Uint128Math.sol/Uint128Math.json')
        } catch {}
        

        let ColosseumTestData
        try {
          ColosseumTestData = require('../artifacts/contracts/test/testdata/ColosseumTestData.sol/ColosseumTestData.json')
        } catch {}
        

        let CrossDomainMessenger
        try {
          CrossDomainMessenger = require('../artifacts/contracts/universal/CrossDomainMessenger.sol/CrossDomainMessenger.json')
        } catch {}
        

        let ERC721Bridge
        try {
          ERC721Bridge = require('../artifacts/contracts/universal/ERC721Bridge.sol/ERC721Bridge.json')
        } catch {}
        

        let IKromaMintableERC20
        try {
          IKromaMintableERC20 = require('../artifacts/contracts/universal/IKromaMintableERC20.sol/IKromaMintableERC20.json')
        } catch {}
        

        let IKromaMintableERC721
        try {
          IKromaMintableERC721 = require('../artifacts/contracts/universal/IKromaMintableERC721.sol/IKromaMintableERC721.json')
        } catch {}
        

        let ISemver
        try {
          ISemver = require('../artifacts/contracts/universal/ISemver.sol/ISemver.json')
        } catch {}
        

        let KromaMintableERC20
        try {
          KromaMintableERC20 = require('../artifacts/contracts/universal/KromaMintableERC20.sol/KromaMintableERC20.json')
        } catch {}
        

        let KromaMintableERC20Factory
        try {
          KromaMintableERC20Factory = require('../artifacts/contracts/universal/KromaMintableERC20Factory.sol/KromaMintableERC20Factory.json')
        } catch {}
        

        let KromaMintableERC721
        try {
          KromaMintableERC721 = require('../artifacts/contracts/universal/KromaMintableERC721.sol/KromaMintableERC721.json')
        } catch {}
        

        let KromaMintableERC721Factory
        try {
          KromaMintableERC721Factory = require('../artifacts/contracts/universal/KromaMintableERC721Factory.sol/KromaMintableERC721Factory.json')
        } catch {}
        

        let IERC5192
        try {
          IERC5192 = require('../artifacts/contracts/universal/KromaSoulBoundERC721.sol/IERC5192.json')
        } catch {}
        

        let KromaSoulBoundERC721
        try {
          KromaSoulBoundERC721 = require('../artifacts/contracts/universal/KromaSoulBoundERC721.sol/KromaSoulBoundERC721.json')
        } catch {}
        

        let Proxy
        try {
          Proxy = require('../artifacts/contracts/universal/Proxy.sol/Proxy.json')
        } catch {}
        

        let IStaticERC1967Proxy
        try {
          IStaticERC1967Proxy = require('../artifacts/contracts/universal/ProxyAdmin.sol/IStaticERC1967Proxy.json')
        } catch {}
        

        let ProxyAdmin
        try {
          ProxyAdmin = require('../artifacts/contracts/universal/ProxyAdmin.sol/ProxyAdmin.json')
        } catch {}
        

        let StandardBridge
        try {
          StandardBridge = require('../artifacts/contracts/universal/StandardBridge.sol/StandardBridge.json')
        } catch {}
        

        let AddressAliasHelper
        try {
          AddressAliasHelper = require('../artifacts/contracts/vendor/AddressAliasHelper.sol/AddressAliasHelper.json')
        } catch {}
        

        let WETH9
        try {
          WETH9 = require('../artifacts/contracts/vendor/WETH9.sol/WETH9.json')
        } catch {}
        

    export const getContractArtifact = (name: string): any => {
      return {
        EchidnaFuzzAddressAliasing,
EchidnaFuzzBurnEth,
EchidnaFuzzBurnGas,
EchidnaFuzzEncoding,
EchidnaFuzzHashing,
EchidnaFuzzKromaPortal,
EchidnaFuzzResourceMetering,
GovernanceToken,
MintManager,
SecurityCouncilToken,
TimeLock,
UpgradeGovernor,
AssetManager,
Colosseum,
IAssetManager,
IValidatorManager,
IZKMerkleTrie,
KromaPortal,
L1CrossDomainMessenger,
L1ERC721Bridge,
L1StandardBridge,
L2OutputOracle,
ResourceMetering,
SecurityCouncil,
SystemConfig,
ValidatorManager,
ValidatorPool,
ZKMerkleTrie,
IPoseidon2,
ZKTrieHasher,
ZKVerifier,
CrossDomainOwnable,
CrossDomainOwnable2,
CrossDomainOwnable3,
GasPriceOracle,
L1Block,
L2CrossDomainMessenger,
L2ERC721Bridge,
L2StandardBridge,
L2ToL1MessagePasser,
Arithmetic,
Atan2,
BalancedWeightTree,
Burn,
Bytes,
Bytes32,
CodeDeployer,
Constants,
Encoding,
Hashing,
NodeReader,
Predeploys,
RLPWriter,
SafeCall,
Types,
Uint128Math,
ColosseumTestData,
CrossDomainMessenger,
ERC721Bridge,
IKromaMintableERC20,
IKromaMintableERC721,
ISemver,
KromaMintableERC20,
KromaMintableERC20Factory,
KromaMintableERC721,
KromaMintableERC721Factory,
IERC5192,
KromaSoulBoundERC721,
Proxy,
IStaticERC1967Proxy,
ProxyAdmin,
StandardBridge,
AddressAliasHelper,
WETH9
      }[name]
    }
    