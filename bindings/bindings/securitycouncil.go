// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// SecurityCouncilMetaData contains all meta data concerning the SecurityCouncil contract.
var SecurityCouncilMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_colosseum\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"outputRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"l2BlockNumber\",\"type\":\"uint128\"}],\"name\":\"ValidationRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COLOSSEUM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numConfirmationsRequired\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_executed\",\"type\":\"bool\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_executed\",\"type\":\"bool\"}],\"name\":\"getTransactionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_numConfirmationsRequired\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_numConfirmationsRequired\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numConfirmationsRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_outputRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"_l2BlockNumber\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"requestValidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// SecurityCouncilABI is the input ABI used to generate the binding from.
// Deprecated: Use SecurityCouncilMetaData.ABI instead.
var SecurityCouncilABI = SecurityCouncilMetaData.ABI

// SecurityCouncilBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SecurityCouncilMetaData.Bin instead.
var SecurityCouncilBin = SecurityCouncilMetaData.Bin

// DeploySecurityCouncil deploys a new Ethereum contract, binding an instance of SecurityCouncil to it.
func DeploySecurityCouncil(auth *bind.TransactOpts, backend bind.ContractBackend, _colosseum common.Address) (common.Address, *types.Transaction, *SecurityCouncil, error) {
	parsed, err := SecurityCouncilMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SecurityCouncilBin), backend, _colosseum)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SecurityCouncil{SecurityCouncilCaller: SecurityCouncilCaller{contract: contract}, SecurityCouncilTransactor: SecurityCouncilTransactor{contract: contract}, SecurityCouncilFilterer: SecurityCouncilFilterer{contract: contract}}, nil
}

// SecurityCouncil is an auto generated Go binding around an Ethereum contract.
type SecurityCouncil struct {
	SecurityCouncilCaller     // Read-only binding to the contract
	SecurityCouncilTransactor // Write-only binding to the contract
	SecurityCouncilFilterer   // Log filterer for contract events
}

// SecurityCouncilCaller is an auto generated read-only Go binding around an Ethereum contract.
type SecurityCouncilCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SecurityCouncilTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SecurityCouncilTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SecurityCouncilFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SecurityCouncilFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SecurityCouncilSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SecurityCouncilSession struct {
	Contract     *SecurityCouncil  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SecurityCouncilCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SecurityCouncilCallerSession struct {
	Contract *SecurityCouncilCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// SecurityCouncilTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SecurityCouncilTransactorSession struct {
	Contract     *SecurityCouncilTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// SecurityCouncilRaw is an auto generated low-level Go binding around an Ethereum contract.
type SecurityCouncilRaw struct {
	Contract *SecurityCouncil // Generic contract binding to access the raw methods on
}

// SecurityCouncilCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SecurityCouncilCallerRaw struct {
	Contract *SecurityCouncilCaller // Generic read-only contract binding to access the raw methods on
}

// SecurityCouncilTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SecurityCouncilTransactorRaw struct {
	Contract *SecurityCouncilTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSecurityCouncil creates a new instance of SecurityCouncil, bound to a specific deployed contract.
func NewSecurityCouncil(address common.Address, backend bind.ContractBackend) (*SecurityCouncil, error) {
	contract, err := bindSecurityCouncil(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncil{SecurityCouncilCaller: SecurityCouncilCaller{contract: contract}, SecurityCouncilTransactor: SecurityCouncilTransactor{contract: contract}, SecurityCouncilFilterer: SecurityCouncilFilterer{contract: contract}}, nil
}

// NewSecurityCouncilCaller creates a new read-only instance of SecurityCouncil, bound to a specific deployed contract.
func NewSecurityCouncilCaller(address common.Address, caller bind.ContractCaller) (*SecurityCouncilCaller, error) {
	contract, err := bindSecurityCouncil(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilCaller{contract: contract}, nil
}

// NewSecurityCouncilTransactor creates a new write-only instance of SecurityCouncil, bound to a specific deployed contract.
func NewSecurityCouncilTransactor(address common.Address, transactor bind.ContractTransactor) (*SecurityCouncilTransactor, error) {
	contract, err := bindSecurityCouncil(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilTransactor{contract: contract}, nil
}

// NewSecurityCouncilFilterer creates a new log filterer instance of SecurityCouncil, bound to a specific deployed contract.
func NewSecurityCouncilFilterer(address common.Address, filterer bind.ContractFilterer) (*SecurityCouncilFilterer, error) {
	contract, err := bindSecurityCouncil(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilFilterer{contract: contract}, nil
}

// bindSecurityCouncil binds a generic wrapper to an already deployed contract.
func bindSecurityCouncil(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SecurityCouncilMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SecurityCouncil *SecurityCouncilRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SecurityCouncil.Contract.SecurityCouncilCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SecurityCouncil *SecurityCouncilRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.SecurityCouncilTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SecurityCouncil *SecurityCouncilRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.SecurityCouncilTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SecurityCouncil *SecurityCouncilCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SecurityCouncil.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SecurityCouncil *SecurityCouncilTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SecurityCouncil *SecurityCouncilTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.contract.Transact(opts, method, params...)
}

// COLOSSEUM is a free data retrieval call binding the contract method 0x9e45e8f4.
//
// Solidity: function COLOSSEUM() view returns(address)
func (_SecurityCouncil *SecurityCouncilCaller) COLOSSEUM(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "COLOSSEUM")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// COLOSSEUM is a free data retrieval call binding the contract method 0x9e45e8f4.
//
// Solidity: function COLOSSEUM() view returns(address)
func (_SecurityCouncil *SecurityCouncilSession) COLOSSEUM() (common.Address, error) {
	return _SecurityCouncil.Contract.COLOSSEUM(&_SecurityCouncil.CallOpts)
}

// COLOSSEUM is a free data retrieval call binding the contract method 0x9e45e8f4.
//
// Solidity: function COLOSSEUM() view returns(address)
func (_SecurityCouncil *SecurityCouncilCallerSession) COLOSSEUM() (common.Address, error) {
	return _SecurityCouncil.Contract.COLOSSEUM(&_SecurityCouncil.CallOpts)
}

// Confirmations is a free data retrieval call binding the contract method 0x3411c81c.
//
// Solidity: function confirmations(uint256 , address ) view returns(bool)
func (_SecurityCouncil *SecurityCouncilCaller) Confirmations(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "confirmations", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Confirmations is a free data retrieval call binding the contract method 0x3411c81c.
//
// Solidity: function confirmations(uint256 , address ) view returns(bool)
func (_SecurityCouncil *SecurityCouncilSession) Confirmations(arg0 *big.Int, arg1 common.Address) (bool, error) {
	return _SecurityCouncil.Contract.Confirmations(&_SecurityCouncil.CallOpts, arg0, arg1)
}

// Confirmations is a free data retrieval call binding the contract method 0x3411c81c.
//
// Solidity: function confirmations(uint256 , address ) view returns(bool)
func (_SecurityCouncil *SecurityCouncilCallerSession) Confirmations(arg0 *big.Int, arg1 common.Address) (bool, error) {
	return _SecurityCouncil.Contract.Confirmations(&_SecurityCouncil.CallOpts, arg0, arg1)
}

// GetConfirmationCount is a free data retrieval call binding the contract method 0x8b51d13f.
//
// Solidity: function getConfirmationCount(uint256 _transactionId) view returns(uint256)
func (_SecurityCouncil *SecurityCouncilCaller) GetConfirmationCount(opts *bind.CallOpts, _transactionId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "getConfirmationCount", _transactionId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetConfirmationCount is a free data retrieval call binding the contract method 0x8b51d13f.
//
// Solidity: function getConfirmationCount(uint256 _transactionId) view returns(uint256)
func (_SecurityCouncil *SecurityCouncilSession) GetConfirmationCount(_transactionId *big.Int) (*big.Int, error) {
	return _SecurityCouncil.Contract.GetConfirmationCount(&_SecurityCouncil.CallOpts, _transactionId)
}

// GetConfirmationCount is a free data retrieval call binding the contract method 0x8b51d13f.
//
// Solidity: function getConfirmationCount(uint256 _transactionId) view returns(uint256)
func (_SecurityCouncil *SecurityCouncilCallerSession) GetConfirmationCount(_transactionId *big.Int) (*big.Int, error) {
	return _SecurityCouncil.Contract.GetConfirmationCount(&_SecurityCouncil.CallOpts, _transactionId)
}

// GetConfirmations is a free data retrieval call binding the contract method 0xb5dc40c3.
//
// Solidity: function getConfirmations(uint256 _transactionId) view returns(address[])
func (_SecurityCouncil *SecurityCouncilCaller) GetConfirmations(opts *bind.CallOpts, _transactionId *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "getConfirmations", _transactionId)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetConfirmations is a free data retrieval call binding the contract method 0xb5dc40c3.
//
// Solidity: function getConfirmations(uint256 _transactionId) view returns(address[])
func (_SecurityCouncil *SecurityCouncilSession) GetConfirmations(_transactionId *big.Int) ([]common.Address, error) {
	return _SecurityCouncil.Contract.GetConfirmations(&_SecurityCouncil.CallOpts, _transactionId)
}

// GetConfirmations is a free data retrieval call binding the contract method 0xb5dc40c3.
//
// Solidity: function getConfirmations(uint256 _transactionId) view returns(address[])
func (_SecurityCouncil *SecurityCouncilCallerSession) GetConfirmations(_transactionId *big.Int) ([]common.Address, error) {
	return _SecurityCouncil.Contract.GetConfirmations(&_SecurityCouncil.CallOpts, _transactionId)
}

// GetOwners is a free data retrieval call binding the contract method 0xa0e67e2b.
//
// Solidity: function getOwners() view returns(address[])
func (_SecurityCouncil *SecurityCouncilCaller) GetOwners(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "getOwners")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetOwners is a free data retrieval call binding the contract method 0xa0e67e2b.
//
// Solidity: function getOwners() view returns(address[])
func (_SecurityCouncil *SecurityCouncilSession) GetOwners() ([]common.Address, error) {
	return _SecurityCouncil.Contract.GetOwners(&_SecurityCouncil.CallOpts)
}

// GetOwners is a free data retrieval call binding the contract method 0xa0e67e2b.
//
// Solidity: function getOwners() view returns(address[])
func (_SecurityCouncil *SecurityCouncilCallerSession) GetOwners() ([]common.Address, error) {
	return _SecurityCouncil.Contract.GetOwners(&_SecurityCouncil.CallOpts)
}

// GetTransactionCount is a free data retrieval call binding the contract method 0x54741525.
//
// Solidity: function getTransactionCount(bool _pending, bool _executed) view returns(uint256)
func (_SecurityCouncil *SecurityCouncilCaller) GetTransactionCount(opts *bind.CallOpts, _pending bool, _executed bool) (*big.Int, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "getTransactionCount", _pending, _executed)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTransactionCount is a free data retrieval call binding the contract method 0x54741525.
//
// Solidity: function getTransactionCount(bool _pending, bool _executed) view returns(uint256)
func (_SecurityCouncil *SecurityCouncilSession) GetTransactionCount(_pending bool, _executed bool) (*big.Int, error) {
	return _SecurityCouncil.Contract.GetTransactionCount(&_SecurityCouncil.CallOpts, _pending, _executed)
}

// GetTransactionCount is a free data retrieval call binding the contract method 0x54741525.
//
// Solidity: function getTransactionCount(bool _pending, bool _executed) view returns(uint256)
func (_SecurityCouncil *SecurityCouncilCallerSession) GetTransactionCount(_pending bool, _executed bool) (*big.Int, error) {
	return _SecurityCouncil.Contract.GetTransactionCount(&_SecurityCouncil.CallOpts, _pending, _executed)
}

// GetTransactionIds is a free data retrieval call binding the contract method 0xa8abe69a.
//
// Solidity: function getTransactionIds(uint256 _from, uint256 _to, bool _pending, bool _executed) view returns(uint256[])
func (_SecurityCouncil *SecurityCouncilCaller) GetTransactionIds(opts *bind.CallOpts, _from *big.Int, _to *big.Int, _pending bool, _executed bool) ([]*big.Int, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "getTransactionIds", _from, _to, _pending, _executed)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetTransactionIds is a free data retrieval call binding the contract method 0xa8abe69a.
//
// Solidity: function getTransactionIds(uint256 _from, uint256 _to, bool _pending, bool _executed) view returns(uint256[])
func (_SecurityCouncil *SecurityCouncilSession) GetTransactionIds(_from *big.Int, _to *big.Int, _pending bool, _executed bool) ([]*big.Int, error) {
	return _SecurityCouncil.Contract.GetTransactionIds(&_SecurityCouncil.CallOpts, _from, _to, _pending, _executed)
}

// GetTransactionIds is a free data retrieval call binding the contract method 0xa8abe69a.
//
// Solidity: function getTransactionIds(uint256 _from, uint256 _to, bool _pending, bool _executed) view returns(uint256[])
func (_SecurityCouncil *SecurityCouncilCallerSession) GetTransactionIds(_from *big.Int, _to *big.Int, _pending bool, _executed bool) ([]*big.Int, error) {
	return _SecurityCouncil.Contract.GetTransactionIds(&_SecurityCouncil.CallOpts, _from, _to, _pending, _executed)
}

// IsConfirmed is a free data retrieval call binding the contract method 0x784547a7.
//
// Solidity: function isConfirmed(uint256 _transactionId) view returns(bool)
func (_SecurityCouncil *SecurityCouncilCaller) IsConfirmed(opts *bind.CallOpts, _transactionId *big.Int) (bool, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "isConfirmed", _transactionId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsConfirmed is a free data retrieval call binding the contract method 0x784547a7.
//
// Solidity: function isConfirmed(uint256 _transactionId) view returns(bool)
func (_SecurityCouncil *SecurityCouncilSession) IsConfirmed(_transactionId *big.Int) (bool, error) {
	return _SecurityCouncil.Contract.IsConfirmed(&_SecurityCouncil.CallOpts, _transactionId)
}

// IsConfirmed is a free data retrieval call binding the contract method 0x784547a7.
//
// Solidity: function isConfirmed(uint256 _transactionId) view returns(bool)
func (_SecurityCouncil *SecurityCouncilCallerSession) IsConfirmed(_transactionId *big.Int) (bool, error) {
	return _SecurityCouncil.Contract.IsConfirmed(&_SecurityCouncil.CallOpts, _transactionId)
}

// IsOwner is a free data retrieval call binding the contract method 0x2f54bf6e.
//
// Solidity: function isOwner(address ) view returns(bool)
func (_SecurityCouncil *SecurityCouncilCaller) IsOwner(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "isOwner", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsOwner is a free data retrieval call binding the contract method 0x2f54bf6e.
//
// Solidity: function isOwner(address ) view returns(bool)
func (_SecurityCouncil *SecurityCouncilSession) IsOwner(arg0 common.Address) (bool, error) {
	return _SecurityCouncil.Contract.IsOwner(&_SecurityCouncil.CallOpts, arg0)
}

// IsOwner is a free data retrieval call binding the contract method 0x2f54bf6e.
//
// Solidity: function isOwner(address ) view returns(bool)
func (_SecurityCouncil *SecurityCouncilCallerSession) IsOwner(arg0 common.Address) (bool, error) {
	return _SecurityCouncil.Contract.IsOwner(&_SecurityCouncil.CallOpts, arg0)
}

// NumConfirmationsRequired is a free data retrieval call binding the contract method 0xd0549b85.
//
// Solidity: function numConfirmationsRequired() view returns(uint256)
func (_SecurityCouncil *SecurityCouncilCaller) NumConfirmationsRequired(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "numConfirmationsRequired")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumConfirmationsRequired is a free data retrieval call binding the contract method 0xd0549b85.
//
// Solidity: function numConfirmationsRequired() view returns(uint256)
func (_SecurityCouncil *SecurityCouncilSession) NumConfirmationsRequired() (*big.Int, error) {
	return _SecurityCouncil.Contract.NumConfirmationsRequired(&_SecurityCouncil.CallOpts)
}

// NumConfirmationsRequired is a free data retrieval call binding the contract method 0xd0549b85.
//
// Solidity: function numConfirmationsRequired() view returns(uint256)
func (_SecurityCouncil *SecurityCouncilCallerSession) NumConfirmationsRequired() (*big.Int, error) {
	return _SecurityCouncil.Contract.NumConfirmationsRequired(&_SecurityCouncil.CallOpts)
}

// Owners is a free data retrieval call binding the contract method 0x025e7c27.
//
// Solidity: function owners(uint256 ) view returns(address)
func (_SecurityCouncil *SecurityCouncilCaller) Owners(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "owners", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owners is a free data retrieval call binding the contract method 0x025e7c27.
//
// Solidity: function owners(uint256 ) view returns(address)
func (_SecurityCouncil *SecurityCouncilSession) Owners(arg0 *big.Int) (common.Address, error) {
	return _SecurityCouncil.Contract.Owners(&_SecurityCouncil.CallOpts, arg0)
}

// Owners is a free data retrieval call binding the contract method 0x025e7c27.
//
// Solidity: function owners(uint256 ) view returns(address)
func (_SecurityCouncil *SecurityCouncilCallerSession) Owners(arg0 *big.Int) (common.Address, error) {
	return _SecurityCouncil.Contract.Owners(&_SecurityCouncil.CallOpts, arg0)
}

// TransactionCount is a free data retrieval call binding the contract method 0xb77bf600.
//
// Solidity: function transactionCount() view returns(uint256)
func (_SecurityCouncil *SecurityCouncilCaller) TransactionCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "transactionCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TransactionCount is a free data retrieval call binding the contract method 0xb77bf600.
//
// Solidity: function transactionCount() view returns(uint256)
func (_SecurityCouncil *SecurityCouncilSession) TransactionCount() (*big.Int, error) {
	return _SecurityCouncil.Contract.TransactionCount(&_SecurityCouncil.CallOpts)
}

// TransactionCount is a free data retrieval call binding the contract method 0xb77bf600.
//
// Solidity: function transactionCount() view returns(uint256)
func (_SecurityCouncil *SecurityCouncilCallerSession) TransactionCount() (*big.Int, error) {
	return _SecurityCouncil.Contract.TransactionCount(&_SecurityCouncil.CallOpts)
}

// Transactions is a free data retrieval call binding the contract method 0x9ace38c2.
//
// Solidity: function transactions(uint256 ) view returns(address destination, bool executed, uint256 value, bytes data)
func (_SecurityCouncil *SecurityCouncilCaller) Transactions(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Destination common.Address
	Executed    bool
	Value       *big.Int
	Data        []byte
}, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "transactions", arg0)

	outstruct := new(struct {
		Destination common.Address
		Executed    bool
		Value       *big.Int
		Data        []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Destination = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Executed = *abi.ConvertType(out[1], new(bool)).(*bool)
	outstruct.Value = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Data = *abi.ConvertType(out[3], new([]byte)).(*[]byte)

	return *outstruct, err

}

// Transactions is a free data retrieval call binding the contract method 0x9ace38c2.
//
// Solidity: function transactions(uint256 ) view returns(address destination, bool executed, uint256 value, bytes data)
func (_SecurityCouncil *SecurityCouncilSession) Transactions(arg0 *big.Int) (struct {
	Destination common.Address
	Executed    bool
	Value       *big.Int
	Data        []byte
}, error) {
	return _SecurityCouncil.Contract.Transactions(&_SecurityCouncil.CallOpts, arg0)
}

// Transactions is a free data retrieval call binding the contract method 0x9ace38c2.
//
// Solidity: function transactions(uint256 ) view returns(address destination, bool executed, uint256 value, bytes data)
func (_SecurityCouncil *SecurityCouncilCallerSession) Transactions(arg0 *big.Int) (struct {
	Destination common.Address
	Executed    bool
	Value       *big.Int
	Data        []byte
}, error) {
	return _SecurityCouncil.Contract.Transactions(&_SecurityCouncil.CallOpts, arg0)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_SecurityCouncil *SecurityCouncilCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_SecurityCouncil *SecurityCouncilSession) Version() (string, error) {
	return _SecurityCouncil.Contract.Version(&_SecurityCouncil.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_SecurityCouncil *SecurityCouncilCallerSession) Version() (string, error) {
	return _SecurityCouncil.Contract.Version(&_SecurityCouncil.CallOpts)
}

// AddOwner is a paid mutator transaction binding the contract method 0x7065cb48.
//
// Solidity: function addOwner(address _owner) returns()
func (_SecurityCouncil *SecurityCouncilTransactor) AddOwner(opts *bind.TransactOpts, _owner common.Address) (*types.Transaction, error) {
	return _SecurityCouncil.contract.Transact(opts, "addOwner", _owner)
}

// AddOwner is a paid mutator transaction binding the contract method 0x7065cb48.
//
// Solidity: function addOwner(address _owner) returns()
func (_SecurityCouncil *SecurityCouncilSession) AddOwner(_owner common.Address) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.AddOwner(&_SecurityCouncil.TransactOpts, _owner)
}

// AddOwner is a paid mutator transaction binding the contract method 0x7065cb48.
//
// Solidity: function addOwner(address _owner) returns()
func (_SecurityCouncil *SecurityCouncilTransactorSession) AddOwner(_owner common.Address) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.AddOwner(&_SecurityCouncil.TransactOpts, _owner)
}

// ChangeRequirement is a paid mutator transaction binding the contract method 0xba51a6df.
//
// Solidity: function changeRequirement(uint256 _numConfirmationsRequired) returns()
func (_SecurityCouncil *SecurityCouncilTransactor) ChangeRequirement(opts *bind.TransactOpts, _numConfirmationsRequired *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.contract.Transact(opts, "changeRequirement", _numConfirmationsRequired)
}

// ChangeRequirement is a paid mutator transaction binding the contract method 0xba51a6df.
//
// Solidity: function changeRequirement(uint256 _numConfirmationsRequired) returns()
func (_SecurityCouncil *SecurityCouncilSession) ChangeRequirement(_numConfirmationsRequired *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.ChangeRequirement(&_SecurityCouncil.TransactOpts, _numConfirmationsRequired)
}

// ChangeRequirement is a paid mutator transaction binding the contract method 0xba51a6df.
//
// Solidity: function changeRequirement(uint256 _numConfirmationsRequired) returns()
func (_SecurityCouncil *SecurityCouncilTransactorSession) ChangeRequirement(_numConfirmationsRequired *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.ChangeRequirement(&_SecurityCouncil.TransactOpts, _numConfirmationsRequired)
}

// ConfirmTransaction is a paid mutator transaction binding the contract method 0xc01a8c84.
//
// Solidity: function confirmTransaction(uint256 _transactionId) returns()
func (_SecurityCouncil *SecurityCouncilTransactor) ConfirmTransaction(opts *bind.TransactOpts, _transactionId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.contract.Transact(opts, "confirmTransaction", _transactionId)
}

// ConfirmTransaction is a paid mutator transaction binding the contract method 0xc01a8c84.
//
// Solidity: function confirmTransaction(uint256 _transactionId) returns()
func (_SecurityCouncil *SecurityCouncilSession) ConfirmTransaction(_transactionId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.ConfirmTransaction(&_SecurityCouncil.TransactOpts, _transactionId)
}

// ConfirmTransaction is a paid mutator transaction binding the contract method 0xc01a8c84.
//
// Solidity: function confirmTransaction(uint256 _transactionId) returns()
func (_SecurityCouncil *SecurityCouncilTransactorSession) ConfirmTransaction(_transactionId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.ConfirmTransaction(&_SecurityCouncil.TransactOpts, _transactionId)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xee22610b.
//
// Solidity: function executeTransaction(uint256 _transactionId) returns()
func (_SecurityCouncil *SecurityCouncilTransactor) ExecuteTransaction(opts *bind.TransactOpts, _transactionId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.contract.Transact(opts, "executeTransaction", _transactionId)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xee22610b.
//
// Solidity: function executeTransaction(uint256 _transactionId) returns()
func (_SecurityCouncil *SecurityCouncilSession) ExecuteTransaction(_transactionId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.ExecuteTransaction(&_SecurityCouncil.TransactOpts, _transactionId)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xee22610b.
//
// Solidity: function executeTransaction(uint256 _transactionId) returns()
func (_SecurityCouncil *SecurityCouncilTransactorSession) ExecuteTransaction(_transactionId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.ExecuteTransaction(&_SecurityCouncil.TransactOpts, _transactionId)
}

// Initialize is a paid mutator transaction binding the contract method 0x60b5bb3f.
//
// Solidity: function initialize(address[] _owners, uint256 _numConfirmationsRequired) returns()
func (_SecurityCouncil *SecurityCouncilTransactor) Initialize(opts *bind.TransactOpts, _owners []common.Address, _numConfirmationsRequired *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.contract.Transact(opts, "initialize", _owners, _numConfirmationsRequired)
}

// Initialize is a paid mutator transaction binding the contract method 0x60b5bb3f.
//
// Solidity: function initialize(address[] _owners, uint256 _numConfirmationsRequired) returns()
func (_SecurityCouncil *SecurityCouncilSession) Initialize(_owners []common.Address, _numConfirmationsRequired *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.Initialize(&_SecurityCouncil.TransactOpts, _owners, _numConfirmationsRequired)
}

// Initialize is a paid mutator transaction binding the contract method 0x60b5bb3f.
//
// Solidity: function initialize(address[] _owners, uint256 _numConfirmationsRequired) returns()
func (_SecurityCouncil *SecurityCouncilTransactorSession) Initialize(_owners []common.Address, _numConfirmationsRequired *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.Initialize(&_SecurityCouncil.TransactOpts, _owners, _numConfirmationsRequired)
}

// Initialize0 is a paid mutator transaction binding the contract method 0x98293ebc.
//
// Solidity: function initialize(bool , address[] _owners, uint256 _numConfirmationsRequired) returns()
func (_SecurityCouncil *SecurityCouncilTransactor) Initialize0(opts *bind.TransactOpts, arg0 bool, _owners []common.Address, _numConfirmationsRequired *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.contract.Transact(opts, "initialize0", arg0, _owners, _numConfirmationsRequired)
}

// Initialize0 is a paid mutator transaction binding the contract method 0x98293ebc.
//
// Solidity: function initialize(bool , address[] _owners, uint256 _numConfirmationsRequired) returns()
func (_SecurityCouncil *SecurityCouncilSession) Initialize0(arg0 bool, _owners []common.Address, _numConfirmationsRequired *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.Initialize0(&_SecurityCouncil.TransactOpts, arg0, _owners, _numConfirmationsRequired)
}

// Initialize0 is a paid mutator transaction binding the contract method 0x98293ebc.
//
// Solidity: function initialize(bool , address[] _owners, uint256 _numConfirmationsRequired) returns()
func (_SecurityCouncil *SecurityCouncilTransactorSession) Initialize0(arg0 bool, _owners []common.Address, _numConfirmationsRequired *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.Initialize0(&_SecurityCouncil.TransactOpts, arg0, _owners, _numConfirmationsRequired)
}

// RemoveOwner is a paid mutator transaction binding the contract method 0x173825d9.
//
// Solidity: function removeOwner(address _owner) returns()
func (_SecurityCouncil *SecurityCouncilTransactor) RemoveOwner(opts *bind.TransactOpts, _owner common.Address) (*types.Transaction, error) {
	return _SecurityCouncil.contract.Transact(opts, "removeOwner", _owner)
}

// RemoveOwner is a paid mutator transaction binding the contract method 0x173825d9.
//
// Solidity: function removeOwner(address _owner) returns()
func (_SecurityCouncil *SecurityCouncilSession) RemoveOwner(_owner common.Address) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.RemoveOwner(&_SecurityCouncil.TransactOpts, _owner)
}

// RemoveOwner is a paid mutator transaction binding the contract method 0x173825d9.
//
// Solidity: function removeOwner(address _owner) returns()
func (_SecurityCouncil *SecurityCouncilTransactorSession) RemoveOwner(_owner common.Address) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.RemoveOwner(&_SecurityCouncil.TransactOpts, _owner)
}

// ReplaceOwner is a paid mutator transaction binding the contract method 0xe20056e6.
//
// Solidity: function replaceOwner(address _owner, address _newOwner) returns()
func (_SecurityCouncil *SecurityCouncilTransactor) ReplaceOwner(opts *bind.TransactOpts, _owner common.Address, _newOwner common.Address) (*types.Transaction, error) {
	return _SecurityCouncil.contract.Transact(opts, "replaceOwner", _owner, _newOwner)
}

// ReplaceOwner is a paid mutator transaction binding the contract method 0xe20056e6.
//
// Solidity: function replaceOwner(address _owner, address _newOwner) returns()
func (_SecurityCouncil *SecurityCouncilSession) ReplaceOwner(_owner common.Address, _newOwner common.Address) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.ReplaceOwner(&_SecurityCouncil.TransactOpts, _owner, _newOwner)
}

// ReplaceOwner is a paid mutator transaction binding the contract method 0xe20056e6.
//
// Solidity: function replaceOwner(address _owner, address _newOwner) returns()
func (_SecurityCouncil *SecurityCouncilTransactorSession) ReplaceOwner(_owner common.Address, _newOwner common.Address) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.ReplaceOwner(&_SecurityCouncil.TransactOpts, _owner, _newOwner)
}

// RequestValidation is a paid mutator transaction binding the contract method 0xb46bd885.
//
// Solidity: function requestValidation(bytes32 _outputRoot, uint128 _l2BlockNumber, bytes _data) returns()
func (_SecurityCouncil *SecurityCouncilTransactor) RequestValidation(opts *bind.TransactOpts, _outputRoot [32]byte, _l2BlockNumber *big.Int, _data []byte) (*types.Transaction, error) {
	return _SecurityCouncil.contract.Transact(opts, "requestValidation", _outputRoot, _l2BlockNumber, _data)
}

// RequestValidation is a paid mutator transaction binding the contract method 0xb46bd885.
//
// Solidity: function requestValidation(bytes32 _outputRoot, uint128 _l2BlockNumber, bytes _data) returns()
func (_SecurityCouncil *SecurityCouncilSession) RequestValidation(_outputRoot [32]byte, _l2BlockNumber *big.Int, _data []byte) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.RequestValidation(&_SecurityCouncil.TransactOpts, _outputRoot, _l2BlockNumber, _data)
}

// RequestValidation is a paid mutator transaction binding the contract method 0xb46bd885.
//
// Solidity: function requestValidation(bytes32 _outputRoot, uint128 _l2BlockNumber, bytes _data) returns()
func (_SecurityCouncil *SecurityCouncilTransactorSession) RequestValidation(_outputRoot [32]byte, _l2BlockNumber *big.Int, _data []byte) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.RequestValidation(&_SecurityCouncil.TransactOpts, _outputRoot, _l2BlockNumber, _data)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x20ea8d86.
//
// Solidity: function revokeConfirmation(uint256 _transactionId) returns()
func (_SecurityCouncil *SecurityCouncilTransactor) RevokeConfirmation(opts *bind.TransactOpts, _transactionId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.contract.Transact(opts, "revokeConfirmation", _transactionId)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x20ea8d86.
//
// Solidity: function revokeConfirmation(uint256 _transactionId) returns()
func (_SecurityCouncil *SecurityCouncilSession) RevokeConfirmation(_transactionId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.RevokeConfirmation(&_SecurityCouncil.TransactOpts, _transactionId)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x20ea8d86.
//
// Solidity: function revokeConfirmation(uint256 _transactionId) returns()
func (_SecurityCouncil *SecurityCouncilTransactorSession) RevokeConfirmation(_transactionId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.RevokeConfirmation(&_SecurityCouncil.TransactOpts, _transactionId)
}

// SubmitTransaction is a paid mutator transaction binding the contract method 0xc6427474.
//
// Solidity: function submitTransaction(address _destination, uint256 _value, bytes _data) returns(uint256)
func (_SecurityCouncil *SecurityCouncilTransactor) SubmitTransaction(opts *bind.TransactOpts, _destination common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _SecurityCouncil.contract.Transact(opts, "submitTransaction", _destination, _value, _data)
}

// SubmitTransaction is a paid mutator transaction binding the contract method 0xc6427474.
//
// Solidity: function submitTransaction(address _destination, uint256 _value, bytes _data) returns(uint256)
func (_SecurityCouncil *SecurityCouncilSession) SubmitTransaction(_destination common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.SubmitTransaction(&_SecurityCouncil.TransactOpts, _destination, _value, _data)
}

// SubmitTransaction is a paid mutator transaction binding the contract method 0xc6427474.
//
// Solidity: function submitTransaction(address _destination, uint256 _value, bytes _data) returns(uint256)
func (_SecurityCouncil *SecurityCouncilTransactorSession) SubmitTransaction(_destination common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.SubmitTransaction(&_SecurityCouncil.TransactOpts, _destination, _value, _data)
}

// SecurityCouncilConfirmationIterator is returned from FilterConfirmation and is used to iterate over the raw logs and unpacked data for Confirmation events raised by the SecurityCouncil contract.
type SecurityCouncilConfirmationIterator struct {
	Event *SecurityCouncilConfirmation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilConfirmationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilConfirmation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilConfirmation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilConfirmationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilConfirmationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilConfirmation represents a Confirmation event raised by the SecurityCouncil contract.
type SecurityCouncilConfirmation struct {
	Sender        common.Address
	TransactionId *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterConfirmation is a free log retrieval operation binding the contract event 0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef.
//
// Solidity: event Confirmation(address indexed sender, uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) FilterConfirmation(opts *bind.FilterOpts, sender []common.Address, transactionId []*big.Int) (*SecurityCouncilConfirmationIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}

	logs, sub, err := _SecurityCouncil.contract.FilterLogs(opts, "Confirmation", senderRule, transactionIdRule)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilConfirmationIterator{contract: _SecurityCouncil.contract, event: "Confirmation", logs: logs, sub: sub}, nil
}

// WatchConfirmation is a free log subscription operation binding the contract event 0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef.
//
// Solidity: event Confirmation(address indexed sender, uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) WatchConfirmation(opts *bind.WatchOpts, sink chan<- *SecurityCouncilConfirmation, sender []common.Address, transactionId []*big.Int) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}

	logs, sub, err := _SecurityCouncil.contract.WatchLogs(opts, "Confirmation", senderRule, transactionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilConfirmation)
				if err := _SecurityCouncil.contract.UnpackLog(event, "Confirmation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConfirmation is a log parse operation binding the contract event 0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef.
//
// Solidity: event Confirmation(address indexed sender, uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) ParseConfirmation(log types.Log) (*SecurityCouncilConfirmation, error) {
	event := new(SecurityCouncilConfirmation)
	if err := _SecurityCouncil.contract.UnpackLog(event, "Confirmation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilExecutionIterator is returned from FilterExecution and is used to iterate over the raw logs and unpacked data for Execution events raised by the SecurityCouncil contract.
type SecurityCouncilExecutionIterator struct {
	Event *SecurityCouncilExecution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilExecutionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilExecution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilExecution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilExecutionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilExecutionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilExecution represents a Execution event raised by the SecurityCouncil contract.
type SecurityCouncilExecution struct {
	TransactionId *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterExecution is a free log retrieval operation binding the contract event 0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75.
//
// Solidity: event Execution(uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) FilterExecution(opts *bind.FilterOpts, transactionId []*big.Int) (*SecurityCouncilExecutionIterator, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}

	logs, sub, err := _SecurityCouncil.contract.FilterLogs(opts, "Execution", transactionIdRule)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilExecutionIterator{contract: _SecurityCouncil.contract, event: "Execution", logs: logs, sub: sub}, nil
}

// WatchExecution is a free log subscription operation binding the contract event 0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75.
//
// Solidity: event Execution(uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) WatchExecution(opts *bind.WatchOpts, sink chan<- *SecurityCouncilExecution, transactionId []*big.Int) (event.Subscription, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}

	logs, sub, err := _SecurityCouncil.contract.WatchLogs(opts, "Execution", transactionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilExecution)
				if err := _SecurityCouncil.contract.UnpackLog(event, "Execution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecution is a log parse operation binding the contract event 0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75.
//
// Solidity: event Execution(uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) ParseExecution(log types.Log) (*SecurityCouncilExecution, error) {
	event := new(SecurityCouncilExecution)
	if err := _SecurityCouncil.contract.UnpackLog(event, "Execution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilExecutionFailureIterator is returned from FilterExecutionFailure and is used to iterate over the raw logs and unpacked data for ExecutionFailure events raised by the SecurityCouncil contract.
type SecurityCouncilExecutionFailureIterator struct {
	Event *SecurityCouncilExecutionFailure // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilExecutionFailureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilExecutionFailure)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilExecutionFailure)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilExecutionFailureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilExecutionFailureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilExecutionFailure represents a ExecutionFailure event raised by the SecurityCouncil contract.
type SecurityCouncilExecutionFailure struct {
	TransactionId *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterExecutionFailure is a free log retrieval operation binding the contract event 0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236.
//
// Solidity: event ExecutionFailure(uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) FilterExecutionFailure(opts *bind.FilterOpts, transactionId []*big.Int) (*SecurityCouncilExecutionFailureIterator, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}

	logs, sub, err := _SecurityCouncil.contract.FilterLogs(opts, "ExecutionFailure", transactionIdRule)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilExecutionFailureIterator{contract: _SecurityCouncil.contract, event: "ExecutionFailure", logs: logs, sub: sub}, nil
}

// WatchExecutionFailure is a free log subscription operation binding the contract event 0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236.
//
// Solidity: event ExecutionFailure(uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) WatchExecutionFailure(opts *bind.WatchOpts, sink chan<- *SecurityCouncilExecutionFailure, transactionId []*big.Int) (event.Subscription, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}

	logs, sub, err := _SecurityCouncil.contract.WatchLogs(opts, "ExecutionFailure", transactionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilExecutionFailure)
				if err := _SecurityCouncil.contract.UnpackLog(event, "ExecutionFailure", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecutionFailure is a log parse operation binding the contract event 0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236.
//
// Solidity: event ExecutionFailure(uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) ParseExecutionFailure(log types.Log) (*SecurityCouncilExecutionFailure, error) {
	event := new(SecurityCouncilExecutionFailure)
	if err := _SecurityCouncil.contract.UnpackLog(event, "ExecutionFailure", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the SecurityCouncil contract.
type SecurityCouncilInitializedIterator struct {
	Event *SecurityCouncilInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilInitialized represents a Initialized event raised by the SecurityCouncil contract.
type SecurityCouncilInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_SecurityCouncil *SecurityCouncilFilterer) FilterInitialized(opts *bind.FilterOpts) (*SecurityCouncilInitializedIterator, error) {

	logs, sub, err := _SecurityCouncil.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilInitializedIterator{contract: _SecurityCouncil.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_SecurityCouncil *SecurityCouncilFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *SecurityCouncilInitialized) (event.Subscription, error) {

	logs, sub, err := _SecurityCouncil.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilInitialized)
				if err := _SecurityCouncil.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_SecurityCouncil *SecurityCouncilFilterer) ParseInitialized(log types.Log) (*SecurityCouncilInitialized, error) {
	event := new(SecurityCouncilInitialized)
	if err := _SecurityCouncil.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilOwnerAdditionIterator is returned from FilterOwnerAddition and is used to iterate over the raw logs and unpacked data for OwnerAddition events raised by the SecurityCouncil contract.
type SecurityCouncilOwnerAdditionIterator struct {
	Event *SecurityCouncilOwnerAddition // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilOwnerAdditionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilOwnerAddition)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilOwnerAddition)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilOwnerAdditionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilOwnerAdditionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilOwnerAddition represents a OwnerAddition event raised by the SecurityCouncil contract.
type SecurityCouncilOwnerAddition struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterOwnerAddition is a free log retrieval operation binding the contract event 0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d.
//
// Solidity: event OwnerAddition(address indexed owner)
func (_SecurityCouncil *SecurityCouncilFilterer) FilterOwnerAddition(opts *bind.FilterOpts, owner []common.Address) (*SecurityCouncilOwnerAdditionIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _SecurityCouncil.contract.FilterLogs(opts, "OwnerAddition", ownerRule)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilOwnerAdditionIterator{contract: _SecurityCouncil.contract, event: "OwnerAddition", logs: logs, sub: sub}, nil
}

// WatchOwnerAddition is a free log subscription operation binding the contract event 0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d.
//
// Solidity: event OwnerAddition(address indexed owner)
func (_SecurityCouncil *SecurityCouncilFilterer) WatchOwnerAddition(opts *bind.WatchOpts, sink chan<- *SecurityCouncilOwnerAddition, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _SecurityCouncil.contract.WatchLogs(opts, "OwnerAddition", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilOwnerAddition)
				if err := _SecurityCouncil.contract.UnpackLog(event, "OwnerAddition", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnerAddition is a log parse operation binding the contract event 0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d.
//
// Solidity: event OwnerAddition(address indexed owner)
func (_SecurityCouncil *SecurityCouncilFilterer) ParseOwnerAddition(log types.Log) (*SecurityCouncilOwnerAddition, error) {
	event := new(SecurityCouncilOwnerAddition)
	if err := _SecurityCouncil.contract.UnpackLog(event, "OwnerAddition", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilOwnerRemovalIterator is returned from FilterOwnerRemoval and is used to iterate over the raw logs and unpacked data for OwnerRemoval events raised by the SecurityCouncil contract.
type SecurityCouncilOwnerRemovalIterator struct {
	Event *SecurityCouncilOwnerRemoval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilOwnerRemovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilOwnerRemoval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilOwnerRemoval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilOwnerRemovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilOwnerRemovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilOwnerRemoval represents a OwnerRemoval event raised by the SecurityCouncil contract.
type SecurityCouncilOwnerRemoval struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterOwnerRemoval is a free log retrieval operation binding the contract event 0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90.
//
// Solidity: event OwnerRemoval(address indexed owner)
func (_SecurityCouncil *SecurityCouncilFilterer) FilterOwnerRemoval(opts *bind.FilterOpts, owner []common.Address) (*SecurityCouncilOwnerRemovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _SecurityCouncil.contract.FilterLogs(opts, "OwnerRemoval", ownerRule)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilOwnerRemovalIterator{contract: _SecurityCouncil.contract, event: "OwnerRemoval", logs: logs, sub: sub}, nil
}

// WatchOwnerRemoval is a free log subscription operation binding the contract event 0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90.
//
// Solidity: event OwnerRemoval(address indexed owner)
func (_SecurityCouncil *SecurityCouncilFilterer) WatchOwnerRemoval(opts *bind.WatchOpts, sink chan<- *SecurityCouncilOwnerRemoval, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _SecurityCouncil.contract.WatchLogs(opts, "OwnerRemoval", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilOwnerRemoval)
				if err := _SecurityCouncil.contract.UnpackLog(event, "OwnerRemoval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnerRemoval is a log parse operation binding the contract event 0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90.
//
// Solidity: event OwnerRemoval(address indexed owner)
func (_SecurityCouncil *SecurityCouncilFilterer) ParseOwnerRemoval(log types.Log) (*SecurityCouncilOwnerRemoval, error) {
	event := new(SecurityCouncilOwnerRemoval)
	if err := _SecurityCouncil.contract.UnpackLog(event, "OwnerRemoval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilRequirementChangeIterator is returned from FilterRequirementChange and is used to iterate over the raw logs and unpacked data for RequirementChange events raised by the SecurityCouncil contract.
type SecurityCouncilRequirementChangeIterator struct {
	Event *SecurityCouncilRequirementChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilRequirementChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilRequirementChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilRequirementChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilRequirementChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilRequirementChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilRequirementChange represents a RequirementChange event raised by the SecurityCouncil contract.
type SecurityCouncilRequirementChange struct {
	Required *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterRequirementChange is a free log retrieval operation binding the contract event 0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a.
//
// Solidity: event RequirementChange(uint256 required)
func (_SecurityCouncil *SecurityCouncilFilterer) FilterRequirementChange(opts *bind.FilterOpts) (*SecurityCouncilRequirementChangeIterator, error) {

	logs, sub, err := _SecurityCouncil.contract.FilterLogs(opts, "RequirementChange")
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilRequirementChangeIterator{contract: _SecurityCouncil.contract, event: "RequirementChange", logs: logs, sub: sub}, nil
}

// WatchRequirementChange is a free log subscription operation binding the contract event 0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a.
//
// Solidity: event RequirementChange(uint256 required)
func (_SecurityCouncil *SecurityCouncilFilterer) WatchRequirementChange(opts *bind.WatchOpts, sink chan<- *SecurityCouncilRequirementChange) (event.Subscription, error) {

	logs, sub, err := _SecurityCouncil.contract.WatchLogs(opts, "RequirementChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilRequirementChange)
				if err := _SecurityCouncil.contract.UnpackLog(event, "RequirementChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequirementChange is a log parse operation binding the contract event 0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a.
//
// Solidity: event RequirementChange(uint256 required)
func (_SecurityCouncil *SecurityCouncilFilterer) ParseRequirementChange(log types.Log) (*SecurityCouncilRequirementChange, error) {
	event := new(SecurityCouncilRequirementChange)
	if err := _SecurityCouncil.contract.UnpackLog(event, "RequirementChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilRevocationIterator is returned from FilterRevocation and is used to iterate over the raw logs and unpacked data for Revocation events raised by the SecurityCouncil contract.
type SecurityCouncilRevocationIterator struct {
	Event *SecurityCouncilRevocation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilRevocationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilRevocation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilRevocation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilRevocationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilRevocationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilRevocation represents a Revocation event raised by the SecurityCouncil contract.
type SecurityCouncilRevocation struct {
	Sender        common.Address
	TransactionId *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterRevocation is a free log retrieval operation binding the contract event 0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9.
//
// Solidity: event Revocation(address indexed sender, uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) FilterRevocation(opts *bind.FilterOpts, sender []common.Address, transactionId []*big.Int) (*SecurityCouncilRevocationIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}

	logs, sub, err := _SecurityCouncil.contract.FilterLogs(opts, "Revocation", senderRule, transactionIdRule)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilRevocationIterator{contract: _SecurityCouncil.contract, event: "Revocation", logs: logs, sub: sub}, nil
}

// WatchRevocation is a free log subscription operation binding the contract event 0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9.
//
// Solidity: event Revocation(address indexed sender, uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) WatchRevocation(opts *bind.WatchOpts, sink chan<- *SecurityCouncilRevocation, sender []common.Address, transactionId []*big.Int) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}

	logs, sub, err := _SecurityCouncil.contract.WatchLogs(opts, "Revocation", senderRule, transactionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilRevocation)
				if err := _SecurityCouncil.contract.UnpackLog(event, "Revocation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevocation is a log parse operation binding the contract event 0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9.
//
// Solidity: event Revocation(address indexed sender, uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) ParseRevocation(log types.Log) (*SecurityCouncilRevocation, error) {
	event := new(SecurityCouncilRevocation)
	if err := _SecurityCouncil.contract.UnpackLog(event, "Revocation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilSubmissionIterator is returned from FilterSubmission and is used to iterate over the raw logs and unpacked data for Submission events raised by the SecurityCouncil contract.
type SecurityCouncilSubmissionIterator struct {
	Event *SecurityCouncilSubmission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilSubmissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilSubmission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilSubmission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilSubmissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilSubmissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilSubmission represents a Submission event raised by the SecurityCouncil contract.
type SecurityCouncilSubmission struct {
	TransactionId *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterSubmission is a free log retrieval operation binding the contract event 0xc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e51.
//
// Solidity: event Submission(uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) FilterSubmission(opts *bind.FilterOpts, transactionId []*big.Int) (*SecurityCouncilSubmissionIterator, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}

	logs, sub, err := _SecurityCouncil.contract.FilterLogs(opts, "Submission", transactionIdRule)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilSubmissionIterator{contract: _SecurityCouncil.contract, event: "Submission", logs: logs, sub: sub}, nil
}

// WatchSubmission is a free log subscription operation binding the contract event 0xc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e51.
//
// Solidity: event Submission(uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) WatchSubmission(opts *bind.WatchOpts, sink chan<- *SecurityCouncilSubmission, transactionId []*big.Int) (event.Subscription, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}

	logs, sub, err := _SecurityCouncil.contract.WatchLogs(opts, "Submission", transactionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilSubmission)
				if err := _SecurityCouncil.contract.UnpackLog(event, "Submission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubmission is a log parse operation binding the contract event 0xc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e51.
//
// Solidity: event Submission(uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) ParseSubmission(log types.Log) (*SecurityCouncilSubmission, error) {
	event := new(SecurityCouncilSubmission)
	if err := _SecurityCouncil.contract.UnpackLog(event, "Submission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilValidationRequestedIterator is returned from FilterValidationRequested and is used to iterate over the raw logs and unpacked data for ValidationRequested events raised by the SecurityCouncil contract.
type SecurityCouncilValidationRequestedIterator struct {
	Event *SecurityCouncilValidationRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilValidationRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilValidationRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilValidationRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilValidationRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilValidationRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilValidationRequested represents a ValidationRequested event raised by the SecurityCouncil contract.
type SecurityCouncilValidationRequested struct {
	TransactionId *big.Int
	OutputRoot    [32]byte
	L2BlockNumber *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterValidationRequested is a free log retrieval operation binding the contract event 0xf973426617caf7de616b7acd718dc2a21cc22f9657006240f06999faf231fb60.
//
// Solidity: event ValidationRequested(uint256 indexed transactionId, bytes32 outputRoot, uint128 l2BlockNumber)
func (_SecurityCouncil *SecurityCouncilFilterer) FilterValidationRequested(opts *bind.FilterOpts, transactionId []*big.Int) (*SecurityCouncilValidationRequestedIterator, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}

	logs, sub, err := _SecurityCouncil.contract.FilterLogs(opts, "ValidationRequested", transactionIdRule)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilValidationRequestedIterator{contract: _SecurityCouncil.contract, event: "ValidationRequested", logs: logs, sub: sub}, nil
}

// WatchValidationRequested is a free log subscription operation binding the contract event 0xf973426617caf7de616b7acd718dc2a21cc22f9657006240f06999faf231fb60.
//
// Solidity: event ValidationRequested(uint256 indexed transactionId, bytes32 outputRoot, uint128 l2BlockNumber)
func (_SecurityCouncil *SecurityCouncilFilterer) WatchValidationRequested(opts *bind.WatchOpts, sink chan<- *SecurityCouncilValidationRequested, transactionId []*big.Int) (event.Subscription, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}

	logs, sub, err := _SecurityCouncil.contract.WatchLogs(opts, "ValidationRequested", transactionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilValidationRequested)
				if err := _SecurityCouncil.contract.UnpackLog(event, "ValidationRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidationRequested is a log parse operation binding the contract event 0xf973426617caf7de616b7acd718dc2a21cc22f9657006240f06999faf231fb60.
//
// Solidity: event ValidationRequested(uint256 indexed transactionId, bytes32 outputRoot, uint128 l2BlockNumber)
func (_SecurityCouncil *SecurityCouncilFilterer) ParseValidationRequested(log types.Log) (*SecurityCouncilValidationRequested, error) {
	event := new(SecurityCouncilValidationRequested)
	if err := _SecurityCouncil.contract.UnpackLog(event, "ValidationRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
