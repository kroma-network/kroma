package derive

import (
	"fmt"
	"math/big"
	"strconv"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/params"

	oppredeploys "github.com/ethereum-optimism/optimism/op-bindings/predeploys"
	"github.com/kroma-network/kroma/kroma-bindings/predeploys"
)

const (
	KromaLocalDevnetChainID = 901
	kromaMPTUpgradeTxCount  = 11
)

var (
	L1BlockMPTDeployerAddress        = common.HexToAddress("0x2551000000000000000000000000000000000000")
	BaseFeeVaultDeployerAddress      = common.HexToAddress("0x2551000000000000000000000000000000000001")
	L1FeeVaultDeployerAddress        = common.HexToAddress("0x2551000000000000000000000000000000000002")
	SequencerFeeVaultDeployerAddress = common.HexToAddress("0x2551000000000000000000000000000000000003")
	GasPriceOracleMPTDeployerAddress = common.HexToAddress("0x2551000000000000000000000000000000000004")

	newL1BlockMPTAddress        = crypto.CreateAddress(L1BlockMPTDeployerAddress, 0)
	newBaseFeeVaultAddress      = crypto.CreateAddress(BaseFeeVaultDeployerAddress, 0)
	newL1FeeVaultAddress        = crypto.CreateAddress(L1FeeVaultDeployerAddress, 0)
	newSequencerFeeVaultAddress = crypto.CreateAddress(SequencerFeeVaultDeployerAddress, 0)
	newGasPriceOracleMPTAddress = crypto.CreateAddress(GasPriceOracleMPTDeployerAddress, 0)

	deployBaseFeeVaultSource           = UpgradeDepositSource{Intent: "KromaMPT: BaseFee Vault Deployment"}
	updateBaseFeeVaultProxySource      = UpgradeDepositSource{Intent: "KromaMPT: BaseFee Vault Proxy Update"}
	deployL1FeeVaultSource             = UpgradeDepositSource{Intent: "KromaMPT: L1 Fee Vault Deployment"}
	updateL1FeeVaultProxySource        = UpgradeDepositSource{Intent: "KromaMPT: L1 Fee Vault Proxy Update"}
	deploySequencerFeeVaultSource      = UpgradeDepositSource{Intent: "KromaMPT: Sequencer Fee Vault Deployment"}
	updateSequencerFeeVaultProxySource = UpgradeDepositSource{Intent: "KromaMPT: Sequencer Fee Vault Proxy Update"}
	deployL1BlockMPTSource             = UpgradeDepositSource{Intent: "KromaMPT: L1 Block Deployment"}
	updateL1BlockMPTProxySource        = UpgradeDepositSource{Intent: "KromaMPT: L1 Block Proxy Update"}
	deployGasPriceOracleMPTSource      = UpgradeDepositSource{Intent: "KromaMPT: Gas Price Oracle Deployment"}
	updateGasPriceOracleMPTProxySource = UpgradeDepositSource{Intent: "KromaMPT: Gas Price Oracle Proxy Update"}
	enableKromaMPTSource               = UpgradeDepositSource{Intent: "KromaMPT: Gas Price Oracle Set Kroma MPT"}

	enableKromaMPTInput = crypto.Keccak256([]byte("setKromaMPT()"))[:4]

	l1BlockMPTDeploymentBytecode        = common.FromHex("0x608060405234801561001057600080fd5b5061053e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638381f58a11610097578063c598591811610066578063c598591814610229578063e591b28214610249578063e81b2c6d14610289578063f82061401461029257600080fd5b80638381f58a146101e35780638b239f73146101f75780639e8c496614610200578063b80777ea1461020957600080fd5b806354fd4d50116100d357806354fd4d50146101335780635cf249691461017c57806364ca23ef1461018557806368d5dca6146101b257600080fd5b8063015d8eb9146100fa57806309bd5a601461010f578063440a5e201461012b575b600080fd5b61010d61010836600461044c565b61029b565b005b61011860025481565b6040519081526020015b60405180910390f35b61010d6103da565b61016f6040518060400160405280600581526020017f312e322e3000000000000000000000000000000000000000000000000000000081525081565b60405161012291906104be565b61011860015481565b6003546101999067ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610122565b6003546101ce9068010000000000000000900463ffffffff1681565b60405163ffffffff9091168152602001610122565b6000546101999067ffffffffffffffff1681565b61011860055481565b61011860065481565b6000546101999068010000000000000000900467ffffffffffffffff1681565b6003546101ce906c01000000000000000000000000900463ffffffff1681565b61026473deaddeaddeaddeaddeaddeaddeaddeaddead000181565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610122565b61011860045481565b61011860075481565b3373deaddeaddeaddeaddeaddeaddeaddeaddead000114610342576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f4c31426c6f636b3a206f6e6c7920746865206465706f7369746f72206163636f60448201527f756e742063616e20736574204c3120626c6f636b2076616c7565730000000000606482015260840160405180910390fd5b6000805467ffffffffffffffff98891668010000000000000000027fffffffffffffffffffffffffffffffff00000000000000000000000000000000909116998916999099179890981790975560019490945560029290925560038054919094167fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009190911617909255600491909155600555600655565b3373deaddeaddeaddeaddeaddeaddeaddeaddead00011461040357633cc50b456000526004601cfd5b60043560801c60035560143560801c600055602435600155604435600755606435600255608435600455565b803567ffffffffffffffff8116811461044757600080fd5b919050565b600080600080600080600080610100898b03121561046957600080fd5b6104728961042f565b975061048060208a0161042f565b9650604089013595506060890135945061049c60808a0161042f565b979a969950949793969560a0850135955060c08501359460e001359350915050565b600060208083528351808285015260005b818110156104eb578581018301518582016040015282016104cf565b818111156104fd576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01692909201604001939250505056fea164736f6c634300080f000a")
	sequencerFeeVaultDeploymentBytecode = common.FromHex("0x60c060405234801561001057600080fd5b5060405161081638038061081683398101604081905261002f91610045565b60006080526001600160a01b031660a052610075565b60006020828403121561005757600080fd5b81516001600160a01b038116811461006e57600080fd5b9392505050565b60805160a0516107536100c3600039600081816087015281816101c5015281816102db015281816103550152818161041501526105b401526000818161018b01526104bc01526107536000f3fe6080604052600436106100695760003560e01c80636ed39f62116100435780636ed39f621461014057806384411d6514610155578063d3e5792b1461017957600080fd5b80630d9019e1146100755780633ccfd60b146100d357806354fd4d50146100ea57600080fd5b3661007057005b600080fd5b34801561008157600080fd5b506100a97f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156100df57600080fd5b506100e86101ad565b005b3480156100f657600080fd5b506101336040518060400160405280600581526020017f312e302e3100000000000000000000000000000000000000000000000000000081525081565b6040516100ca91906106a9565b34801561014c57600080fd5b506100e861033d565b34801561016157600080fd5b5061016b60005481565b6040519081526020016100ca565b34801561018557600080fd5b5061016b7f000000000000000000000000000000000000000000000000000000000000000081565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610277576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4665655661756c743a20746865206f6e6c7920726563697069656e742063616e60448201527f2063616c6c00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60006102816104b8565b604080516020810182526000815290517fe11013dd0000000000000000000000000000000000000000000000000000000081529192507342000000000000000000000000000000000000099163e11013dd918491610308917f0000000000000000000000000000000000000000000000000000000000000000916188b891906004016106c3565b6000604051808303818588803b15801561032157600080fd5b505af1158015610335573d6000803e3d6000fd5b505050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610402576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4665655661756c743a20746865206f6e6c7920726563697069656e742063616e60448201527f2063616c6c000000000000000000000000000000000000000000000000000000606482015260840161026e565b600061040c6104b8565b9050600061044b7f00000000000000000000000000000000000000000000000000000000000000005a8460405180602001604052806000815250610624565b9050806104b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4665655661756c743a20455448207472616e73666572206661696c6564000000604482015260640161026e565b5050565b60007f0000000000000000000000000000000000000000000000000000000000000000471015610590576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604a60248201527f4665655661756c743a207769746864726177616c20616d6f756e74206d75737460448201527f2062652067726561746572207468616e206d696e696d756d207769746864726160648201527f77616c20616d6f756e7400000000000000000000000000000000000000000000608482015260a40161026e565b6000479050806000808282546105a69190610707565b9091555050604080518281527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166020820152338183015290517fc8a211cc64b6ed1b50595a9fcb1932b6d1e5a6e8ef15b60e5b1f988ea9086bba9181900360600190a1919050565b600080600080845160208601878a8af19695505050505050565b6000815180845260005b8181101561066457602081850181015186830182015201610648565b81811115610676576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006106bc602083018461063e565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8416815263ffffffff831660208201526060604082015260006106fe606083018461063e565b95945050505050565b60008219821115610741577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fea164736f6c634300080f000a")
	baseFeeVaultDeploymentBytecode      = common.FromHex("0x60c060405234801561001057600080fd5b5060405161081638038061081683398101604081905261002f91610045565b60006080526001600160a01b031660a052610075565b60006020828403121561005757600080fd5b81516001600160a01b038116811461006e57600080fd5b9392505050565b60805160a0516107536100c3600039600081816087015281816101c5015281816102db015281816103550152818161041501526105b401526000818161018b01526104bc01526107536000f3fe6080604052600436106100695760003560e01c80636ed39f62116100435780636ed39f621461014057806384411d6514610155578063d3e5792b1461017957600080fd5b80630d9019e1146100755780633ccfd60b146100d357806354fd4d50146100ea57600080fd5b3661007057005b600080fd5b34801561008157600080fd5b506100a97f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156100df57600080fd5b506100e86101ad565b005b3480156100f657600080fd5b506101336040518060400160405280600581526020017f312e302e3100000000000000000000000000000000000000000000000000000081525081565b6040516100ca91906106a9565b34801561014c57600080fd5b506100e861033d565b34801561016157600080fd5b5061016b60005481565b6040519081526020016100ca565b34801561018557600080fd5b5061016b7f000000000000000000000000000000000000000000000000000000000000000081565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610277576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4665655661756c743a20746865206f6e6c7920726563697069656e742063616e60448201527f2063616c6c00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60006102816104b8565b604080516020810182526000815290517fe11013dd0000000000000000000000000000000000000000000000000000000081529192507342000000000000000000000000000000000000099163e11013dd918491610308917f0000000000000000000000000000000000000000000000000000000000000000916188b891906004016106c3565b6000604051808303818588803b15801561032157600080fd5b505af1158015610335573d6000803e3d6000fd5b505050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610402576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4665655661756c743a20746865206f6e6c7920726563697069656e742063616e60448201527f2063616c6c000000000000000000000000000000000000000000000000000000606482015260840161026e565b600061040c6104b8565b9050600061044b7f00000000000000000000000000000000000000000000000000000000000000005a8460405180602001604052806000815250610624565b9050806104b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4665655661756c743a20455448207472616e73666572206661696c6564000000604482015260640161026e565b5050565b60007f0000000000000000000000000000000000000000000000000000000000000000471015610590576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604a60248201527f4665655661756c743a207769746864726177616c20616d6f756e74206d75737460448201527f2062652067726561746572207468616e206d696e696d756d207769746864726160648201527f77616c20616d6f756e7400000000000000000000000000000000000000000000608482015260a40161026e565b6000479050806000808282546105a69190610707565b9091555050604080518281527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166020820152338183015290517fc8a211cc64b6ed1b50595a9fcb1932b6d1e5a6e8ef15b60e5b1f988ea9086bba9181900360600190a1919050565b600080600080845160208601878a8af19695505050505050565b6000815180845260005b8181101561066457602081850181015186830182015201610648565b81811115610676576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006106bc602083018461063e565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8416815263ffffffff831660208201526060604082015260006106fe606083018461063e565b95945050505050565b60008219821115610741577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fea164736f6c634300080f000a")
	l1FeeVaultDeploymentBytecode        = common.FromHex("0x60c060405234801561001057600080fd5b5060405161081638038061081683398101604081905261002f91610045565b60006080526001600160a01b031660a052610075565b60006020828403121561005757600080fd5b81516001600160a01b038116811461006e57600080fd5b9392505050565b60805160a0516107536100c3600039600081816087015281816101c5015281816102db015281816103550152818161041501526105b401526000818161018b01526104bc01526107536000f3fe6080604052600436106100695760003560e01c80636ed39f62116100435780636ed39f621461014057806384411d6514610155578063d3e5792b1461017957600080fd5b80630d9019e1146100755780633ccfd60b146100d357806354fd4d50146100ea57600080fd5b3661007057005b600080fd5b34801561008157600080fd5b506100a97f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156100df57600080fd5b506100e86101ad565b005b3480156100f657600080fd5b506101336040518060400160405280600581526020017f312e302e3200000000000000000000000000000000000000000000000000000081525081565b6040516100ca91906106a9565b34801561014c57600080fd5b506100e861033d565b34801561016157600080fd5b5061016b60005481565b6040519081526020016100ca565b34801561018557600080fd5b5061016b7f000000000000000000000000000000000000000000000000000000000000000081565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610277576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4665655661756c743a20746865206f6e6c7920726563697069656e742063616e60448201527f2063616c6c00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60006102816104b8565b604080516020810182526000815290517fe11013dd0000000000000000000000000000000000000000000000000000000081529192507342000000000000000000000000000000000000099163e11013dd918491610308917f0000000000000000000000000000000000000000000000000000000000000000916188b891906004016106c3565b6000604051808303818588803b15801561032157600080fd5b505af1158015610335573d6000803e3d6000fd5b505050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610402576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4665655661756c743a20746865206f6e6c7920726563697069656e742063616e60448201527f2063616c6c000000000000000000000000000000000000000000000000000000606482015260840161026e565b600061040c6104b8565b9050600061044b7f00000000000000000000000000000000000000000000000000000000000000005a8460405180602001604052806000815250610624565b9050806104b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4665655661756c743a20455448207472616e73666572206661696c6564000000604482015260640161026e565b5050565b60007f0000000000000000000000000000000000000000000000000000000000000000471015610590576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604a60248201527f4665655661756c743a207769746864726177616c20616d6f756e74206d75737460448201527f2062652067726561746572207468616e206d696e696d756d207769746864726160648201527f77616c20616d6f756e7400000000000000000000000000000000000000000000608482015260a40161026e565b6000479050806000808282546105a69190610707565b9091555050604080518281527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166020820152338183015290517fc8a211cc64b6ed1b50595a9fcb1932b6d1e5a6e8ef15b60e5b1f988ea9086bba9181900360600190a1919050565b600080600080845160208601878a8af19695505050505050565b6000815180845260005b8181101561066457602081850181015186830182015201610648565b81811115610676576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006106bc602083018461063e565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8416815263ffffffff831660208201526060604082015260006106fe606083018461063e565b95945050505050565b60008219821115610741577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fea164736f6c634300080f000a")
	gasPriceOracleMPTDeploymentBytecode = common.FromHex("0x608060405234801561001057600080fd5b50611509806100206000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c806368d5dca6116100b2578063c598591811610081578063f45e65d811610066578063f45e65d814610242578063f82061401461024a578063fe173b97146101f257600080fd5b8063c598591814610227578063de26c4a11461022f57600080fd5b806368d5dca6146101d55780636ef25c3a146101f25780638cca6762146101f8578063a566e1a51461020057600080fd5b806349948e0e116100ee57806349948e0e146101545780634ef6e22414610167578063519b4bd31461018457806354fd4d501461018c57600080fd5b80630c18c1621461012057806322b90ab31461013b5780632e0f262514610145578063313ce5671461014d575b600080fd5b610128610252565b6040519081526020015b60405180910390f35b610143610373565b005b610128600681565b6006610128565b6101286101623660046110c7565b610596565b6000546101749060ff1681565b6040519015158152602001610132565b6101286105ba565b6101c86040518060400160405280600581526020017f312e312e3000000000000000000000000000000000000000000000000000000081525081565b6040516101329190611196565b6101dd6106a7565b60405163ffffffff9091168152602001610132565b48610128565b6101436107b8565b7f8f72cb8c9ce0db6b33874dcafb4caaa75b2406f18992b3856856f86d8949de5c54610174565b6101dd610a87565b61012861023d3660046110c7565b610b74565b610128610c28565b610128610d1b565b6000805460ff16156102eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f47617350726963654f7261636c653a206f76657268656164282920697320646560448201527f707265636174656400000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b73420000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff16638b239f736040518163ffffffff1660e01b8152600401602060405180830381865afa15801561034a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036e9190611209565b905090565b73420000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663e591b2826040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f69190611222565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f47617350726963654f7261636c653a206f6e6c7920746865206465706f73697460448201527f6f72206163636f756e742063616e2073657420697345636f746f6e6520666c6160648201527f6700000000000000000000000000000000000000000000000000000000000000608482015260a4016102e2565b60005460ff1615610569576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f47617350726963654f7261636c653a2045636f746f6e6520616c72656164792060448201527f616374697665000000000000000000000000000000000000000000000000000060648201526084016102e2565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b6000805460ff16156105b1576105ab82610e08565b92915050565b6105ab82610eac565b60006105e47f8f72cb8c9ce0db6b33874dcafb4caaa75b2406f18992b3856856f86d8949de5c5490565b156106485773420000000000000000000000000000000000001573ffffffffffffffffffffffffffffffffffffffff16635cf249696040518163ffffffff1660e01b8152600401602060405180830381865afa15801561034a573d6000803e3d6000fd5b73420000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff16635cf249696040518163ffffffff1660e01b8152600401602060405180830381865afa15801561034a573d6000803e3d6000fd5b60006106d17f8f72cb8c9ce0db6b33874dcafb4caaa75b2406f18992b3856856f86d8949de5c5490565b156107595773420000000000000000000000000000000000001573ffffffffffffffffffffffffffffffffffffffff166368d5dca66040518163ffffffff1660e01b8152600401602060405180830381865afa158015610735573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036e9190611258565b73420000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff166368d5dca66040518163ffffffff1660e01b8152600401602060405180830381865afa158015610735573d6000803e3d6000fd5b73420000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663e591b2826040518163ffffffff1660e01b8152600401602060405180830381865afa158015610817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083b9190611222565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461091b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f47617350726963654f7261636c653a206f6e6c7920746865206465706f73697460448201527f6f72206163636f756e742063616e207365742069734b726f6d614d505420666c60648201527f6167000000000000000000000000000000000000000000000000000000000000608482015260a4016102e2565b60005460ff1615156001146109b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f47617350726963654f7261636c653a2045636f746f6e65206973206e6f74206160448201527f637469766500000000000000000000000000000000000000000000000000000060648201526084016102e2565b7f8f72cb8c9ce0db6b33874dcafb4caaa75b2406f18992b3856856f86d8949de5c5415610a61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f47617350726963654f7261636c653a204b726f6d61204d505420616c7265616460448201527f792061637469766500000000000000000000000000000000000000000000000060648201526084016102e2565b60017f8f72cb8c9ce0db6b33874dcafb4caaa75b2406f18992b3856856f86d8949de5c55565b6000610ab17f8f72cb8c9ce0db6b33874dcafb4caaa75b2406f18992b3856856f86d8949de5c5490565b15610b155773420000000000000000000000000000000000001573ffffffffffffffffffffffffffffffffffffffff1663c59859186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610735573d6000803e3d6000fd5b73420000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663c59859186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610735573d6000803e3d6000fd5b600080610b8083611008565b60005490915060ff1615610b945792915050565b73420000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff16638b239f736040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c179190611209565b610c2190826112ad565b9392505050565b6000805460ff1615610cbc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f47617350726963654f7261636c653a207363616c61722829206973206465707260448201527f656361746564000000000000000000000000000000000000000000000000000060648201526084016102e2565b73420000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff16639e8c49666040518163ffffffff1660e01b8152600401602060405180830381865afa15801561034a573d6000803e3d6000fd5b6000610d457f8f72cb8c9ce0db6b33874dcafb4caaa75b2406f18992b3856856f86d8949de5c5490565b15610da95773420000000000000000000000000000000000001573ffffffffffffffffffffffffffffffffffffffff1663f82061406040518163ffffffff1660e01b8152600401602060405180830381865afa15801561034a573d6000803e3d6000fd5b73420000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663f82061406040518163ffffffff1660e01b8152600401602060405180830381865afa15801561034a573d6000803e3d6000fd5b600080610e1483611008565b90506000610e206105ba565b610e28610a87565b610e339060106112c5565b63ffffffff16610e4391906112f1565b90506000610e4f610d1b565b610e576106a7565b63ffffffff16610e6791906112f1565b90506000610e7582846112ad565b610e7f90856112f1565b9050610e8d6006600a61144e565b610e989060106112f1565b610ea2908261145a565b9695505050505050565b600080610eb883611008565b9050600073420000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff16639e8c49666040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3f9190611209565b610f476105ba565b73420000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff16638b239f736040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fca9190611209565b610fd490856112ad565b610fde91906112f1565b610fe891906112f1565b9050610ff66006600a61144e565b611000908261145a565b949350505050565b80516000908190815b8181101561108b5784818151811061102b5761102b611495565b01602001517fff000000000000000000000000000000000000000000000000000000000000001660000361106b576110646004846112ad565b9250611079565b6110766010846112ad565b92505b80611083816114c4565b915050611011565b50611000826104406112ad565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082840312156110d957600080fd5b813567ffffffffffffffff808211156110f157600080fd5b818401915084601f83011261110557600080fd5b81358181111561111757611117611098565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561115d5761115d611098565b8160405282815287602084870101111561117657600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208083528351808285015260005b818110156111c3578581018301518582016040015282016111a7565b818111156111d5576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60006020828403121561121b57600080fd5b5051919050565b60006020828403121561123457600080fd5b815173ffffffffffffffffffffffffffffffffffffffff81168114610c2157600080fd5b60006020828403121561126a57600080fd5b815163ffffffff81168114610c2157600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156112c0576112c061127e565b500190565b600063ffffffff808316818516818304811182151516156112e8576112e861127e565b02949350505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156113295761132961127e565b500290565b600181815b8085111561138757817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561136d5761136d61127e565b8085161561137a57918102915b93841c9390800290611333565b509250929050565b60008261139e575060016105ab565b816113ab575060006105ab565b81600181146113c157600281146113cb576113e7565b60019150506105ab565b60ff8411156113dc576113dc61127e565b50506001821b6105ab565b5060208310610133831016604e8410600b841016171561140a575081810a6105ab565b611414838361132e565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156114465761144661127e565b029392505050565b6000610c21838361138f565b600082611490577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036114f5576114f561127e565b506001019056fea164736f6c634300080f000a")
)

var ChainConfigs = map[string]ChainConfig{
	strconv.Itoa(KromaLocalDevnetChainID): { // Local devnet (Default)
		protocolVaultRecipient: common.HexToAddress("0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"),
		l1FeeVaultRecipient:    common.HexToAddress("0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"),
	},
	strconv.Itoa(params.KromaMainnetChainID): { // Kroma
		protocolVaultRecipient: common.HexToAddress("0xA03c13C6597a0716D1525b7fDaD2fD95ECb49081"),
		l1FeeVaultRecipient:    common.HexToAddress("0xA03c13C6597a0716D1525b7fDaD2fD95ECb49081"),
	},
	strconv.Itoa(params.KromaSepoliaChainID): { // Kroma Sepolia
		protocolVaultRecipient: common.HexToAddress("0xb5d7c1921fdbdea614f264a75ca0be416cf63eb5"),
		l1FeeVaultRecipient:    common.HexToAddress("0xb5d7c1921fdbdea614f264a75ca0be416cf63eb5"),
	},
	strconv.Itoa(params.KromaDevnetChainID): { // Kroma Holesky
		protocolVaultRecipient: common.HexToAddress("0x69487D0D1F969E99D3b68C4F79F0F47375c4Ee4A"),
		l1FeeVaultRecipient:    common.HexToAddress("0x69487D0D1F969E99D3b68C4F79F0F47375c4Ee4A"),
	},
}

// ChainConfig constructor arguments mapping by ChainID
type ChainConfig struct {
	protocolVaultRecipient common.Address
	l1FeeVaultRecipient    common.Address
}

// DeploymentData deployment bytecode information including constructor arguments
type DeploymentData struct {
	sequencerFeeVaultDeploymentBytecodeWithArg []byte
	baseFeeVaultDeploymentBytecodeWithArg      []byte
	l1FeeVaultDeploymentBytecodeWithArg        []byte
}

// getDeploymentData retrieves data that is necessary for deployments of predeploy contracts
// at the previous block of Kroma MPT upgrade.
func getDeploymentData(chainID *big.Int) (*DeploymentData, error) {
	chainConfig, exists := ChainConfigs[chainID.String()]
	if !exists {
		chainConfig = ChainConfigs[strconv.Itoa(KromaLocalDevnetChainID)] // Default to local devnet configuration
	}

	sequencerBytecode, err := createDeploymentBytecode(sequencerFeeVaultDeploymentBytecode, chainConfig.protocolVaultRecipient)
	if err != nil {
		return nil, fmt.Errorf("failed to create sequencerFeeVault deployment bytecode: %w", err)
	}

	baseFeeBytecode, err := createDeploymentBytecode(baseFeeVaultDeploymentBytecode, chainConfig.protocolVaultRecipient)
	if err != nil {
		return nil, fmt.Errorf("failed to create baseFeeVault deployment bytecode: %w", err)
	}

	l1FeeBytecode, err := createDeploymentBytecode(l1FeeVaultDeploymentBytecode, chainConfig.l1FeeVaultRecipient)
	if err != nil {
		return nil, fmt.Errorf("failed to create l1FeeVault deployment bytecode: %w", err)
	}

	return &DeploymentData{
		sequencerFeeVaultDeploymentBytecodeWithArg: sequencerBytecode,
		baseFeeVaultDeploymentBytecodeWithArg:      baseFeeBytecode,
		l1FeeVaultDeploymentBytecodeWithArg:        l1FeeBytecode,
	}, nil
}

// createDeploymentBytecode returns the result, including information about the constructor arguments
// in the deploymentByteCode.
func createDeploymentBytecode(bytecode []byte, args ...interface{}) ([]byte, error) {
	encodedArgs, err := encodeConstructorArg(args...)
	if err != nil {
		return nil, err
	}
	// combine bytecode with encoded arguments
	deploymentBytecode := append(bytecode, encodedArgs...)
	return deploymentBytecode, nil
}

func encodeConstructorArg(args ...interface{}) ([]byte, error) {
	// define ABI arguments dynamically based on the types of args
	constructorArgs := abi.Arguments{}

	for _, arg := range args {
		var argType abi.Type
		var err error

		switch v := arg.(type) {
		case common.Address:
			argType, err = abi.NewType("address", "", nil)
		default:
			return nil, fmt.Errorf("unsupported argument type: %T", v)
		}

		if err != nil {
			return nil, fmt.Errorf("failed to create ABI type for argument: %w", err)
		}

		constructorArgs = append(constructorArgs, abi.Argument{
			Type: argType,
		})
	}

	// pack the arguments into ABI-encoded bytes
	encodedArgs, err := constructorArgs.Pack(args...)
	if err != nil {
		return nil, fmt.Errorf("failed to encode constructor arguments: %w", err)
	}

	return encodedArgs, nil
}

func KromaMPTNetworkUpgradeTransactions(chainID *big.Int) ([]hexutil.Bytes, error) {
	deploymentData, err := getDeploymentData(chainID)
	if err != nil {
		return nil, err
	}

	upgradeTxns := make([]hexutil.Bytes, 0, kromaMPTUpgradeTxCount)

	deployL1BlockTransaction, err := types.NewTx(&types.DepositTx{
		SourceHash:          deployL1BlockMPTSource.SourceHash(),
		From:                L1BlockMPTDeployerAddress,
		To:                  nil,
		Mint:                big.NewInt(0),
		Value:               big.NewInt(0),
		Gas:                 500_000,
		IsSystemTransaction: false,
		Data:                l1BlockMPTDeploymentBytecode,
	}).MarshalBinary()
	if err != nil {
		return nil, err
	}

	upgradeTxns = append(upgradeTxns, deployL1BlockTransaction)

	deployBaseFeeVault, err := types.NewTx(&types.DepositTx{
		SourceHash:          deployBaseFeeVaultSource.SourceHash(),
		From:                BaseFeeVaultDeployerAddress,
		To:                  nil,
		Mint:                big.NewInt(0),
		Value:               big.NewInt(0),
		Gas:                 1_000_000,
		IsSystemTransaction: false,
		Data:                deploymentData.baseFeeVaultDeploymentBytecodeWithArg,
	}).MarshalBinary()
	if err != nil {
		return nil, err
	}

	upgradeTxns = append(upgradeTxns, deployBaseFeeVault)

	deployL1FeeVault, err := types.NewTx(&types.DepositTx{
		SourceHash:          deployL1FeeVaultSource.SourceHash(),
		From:                L1FeeVaultDeployerAddress,
		To:                  nil,
		Mint:                big.NewInt(0),
		Value:               big.NewInt(0),
		Gas:                 1_000_000,
		IsSystemTransaction: false,
		Data:                deploymentData.l1FeeVaultDeploymentBytecodeWithArg,
	}).MarshalBinary()
	if err != nil {
		return nil, err
	}

	upgradeTxns = append(upgradeTxns, deployL1FeeVault)

	deploySequencerFeeVault, err := types.NewTx(&types.DepositTx{
		SourceHash:          deploySequencerFeeVaultSource.SourceHash(),
		From:                SequencerFeeVaultDeployerAddress,
		To:                  nil,
		Mint:                big.NewInt(0),
		Value:               big.NewInt(0),
		Gas:                 1_000_000,
		IsSystemTransaction: false,
		Data:                deploymentData.sequencerFeeVaultDeploymentBytecodeWithArg,
	}).MarshalBinary()
	if err != nil {
		return nil, err
	}

	upgradeTxns = append(upgradeTxns, deploySequencerFeeVault)

	deployGasPriceOracle, err := types.NewTx(&types.DepositTx{
		SourceHash:          deployGasPriceOracleMPTSource.SourceHash(),
		From:                GasPriceOracleMPTDeployerAddress,
		To:                  nil,
		Mint:                big.NewInt(0),
		Value:               big.NewInt(0),
		Gas:                 1_000_000,
		IsSystemTransaction: false,
		Data:                gasPriceOracleMPTDeploymentBytecode,
	}).MarshalBinary()
	if err != nil {
		return nil, err
	}

	upgradeTxns = append(upgradeTxns, deployGasPriceOracle)

	updateL1BlockProxy, err := types.NewTx(&types.DepositTx{
		SourceHash:          updateL1BlockMPTProxySource.SourceHash(),
		From:                common.Address{},
		To:                  &oppredeploys.L1BlockAddr,
		Mint:                big.NewInt(0),
		Value:               big.NewInt(0),
		Gas:                 50_000,
		IsSystemTransaction: false,
		Data:                upgradeToCalldata(newL1BlockMPTAddress),
	}).MarshalBinary()
	if err != nil {
		return nil, err
	}

	upgradeTxns = append(upgradeTxns, updateL1BlockProxy)

	updateBaseFeeVaultProxy, err := types.NewTx(&types.DepositTx{
		SourceHash:          updateBaseFeeVaultProxySource.SourceHash(),
		From:                common.Address{},
		To:                  &oppredeploys.BaseFeeVaultAddr,
		Mint:                big.NewInt(0),
		Value:               big.NewInt(0),
		Gas:                 50_000,
		IsSystemTransaction: false,
		Data:                upgradeToCalldata(newBaseFeeVaultAddress),
	}).MarshalBinary()
	if err != nil {
		return nil, err
	}

	upgradeTxns = append(upgradeTxns, updateBaseFeeVaultProxy)

	updateL1FeeVaultProxy, err := types.NewTx(&types.DepositTx{
		SourceHash:          updateL1FeeVaultProxySource.SourceHash(),
		From:                common.Address{},
		To:                  &oppredeploys.L1FeeVaultAddr,
		Mint:                big.NewInt(0),
		Value:               big.NewInt(0),
		Gas:                 50_000,
		IsSystemTransaction: false,
		Data:                upgradeToCalldata(newL1FeeVaultAddress),
	}).MarshalBinary()
	if err != nil {
		return nil, err
	}

	upgradeTxns = append(upgradeTxns, updateL1FeeVaultProxy)

	updateSequencerFeeVaultProxy, err := types.NewTx(&types.DepositTx{
		SourceHash:          updateSequencerFeeVaultProxySource.SourceHash(),
		From:                common.Address{},
		To:                  &oppredeploys.SequencerFeeVaultAddr,
		Mint:                big.NewInt(0),
		Value:               big.NewInt(0),
		Gas:                 50_000,
		IsSystemTransaction: false,
		Data:                upgradeToCalldata(newSequencerFeeVaultAddress),
	}).MarshalBinary()
	if err != nil {
		return nil, err
	}

	upgradeTxns = append(upgradeTxns, updateSequencerFeeVaultProxy)

	updateGasPriceOracleMPTProxy, err := types.NewTx(&types.DepositTx{
		SourceHash:          updateGasPriceOracleMPTProxySource.SourceHash(),
		From:                common.Address{},
		To:                  &predeploys.GasPriceOracleAddr,
		Mint:                big.NewInt(0),
		Value:               big.NewInt(0),
		Gas:                 50_000,
		IsSystemTransaction: false,
		Data:                upgradeToCalldata(newGasPriceOracleMPTAddress),
	}).MarshalBinary()
	if err != nil {
		return nil, err
	}

	upgradeTxns = append(upgradeTxns, updateGasPriceOracleMPTProxy)

	enableKromaMPT, err := types.NewTx(&types.DepositTx{
		SourceHash:          enableKromaMPTSource.SourceHash(),
		From:                L1InfoDepositerAddress,
		To:                  &predeploys.GasPriceOracleAddr,
		Mint:                big.NewInt(0),
		Value:               big.NewInt(0),
		Gas:                 80_000,
		IsSystemTransaction: false,
		Data:                enableKromaMPTInput,
	}).MarshalBinary()
	if err != nil {
		return nil, err
	}

	upgradeTxns = append(upgradeTxns, enableKromaMPT)

	return upgradeTxns, nil
}
