// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IValidatorManagerConstructorParams is an auto generated low-level Go binding around an user-defined struct.
type IValidatorManagerConstructorParams struct {
	L2Oracle                     common.Address
	AssetManager                 common.Address
	TrustedValidator             common.Address
	CommissionChangeDelaySeconds *big.Int
	RoundDurationSeconds         *big.Int
	SoftJailPeriodSeconds        *big.Int
	HardJailPeriodSeconds        *big.Int
	JailThreshold                *big.Int
	MaxOutputFinalizations       *big.Int
	BaseReward                   *big.Int
	MinRegisterAmount            *big.Int
	MinActivateAmount            *big.Int
	MptFirstOutputIndex          *big.Int
}

// ValidatorManagerMetaData contains all meta data concerning the ValidatorManager contract.
var ValidatorManagerMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_constructorParams\",\"type\":\"tuple\",\"internalType\":\"structIValidatorManager.ConstructorParams\",\"components\":[{\"name\":\"_l2Oracle\",\"type\":\"address\",\"internalType\":\"contractL2OutputOracle\"},{\"name\":\"_assetManager\",\"type\":\"address\",\"internalType\":\"contractAssetManager\"},{\"name\":\"_trustedValidator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_commissionChangeDelaySeconds\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_roundDurationSeconds\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_softJailPeriodSeconds\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_hardJailPeriodSeconds\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_jailThreshold\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_maxOutputFinalizations\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_baseReward\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_minRegisterAmount\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_minActivateAmount\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_mptFirstOutputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"ASSET_MANAGER\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractAssetManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"BASE_REWARD\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"BOOSTED_REWARD_DENOM\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"BOOSTED_REWARD_NUMERATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"COMMISSION_CHANGE_DELAY_SECONDS\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"COMMISSION_RATE_DENOM\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"HARD_JAIL_PERIOD_SECONDS\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"JAIL_THRESHOLD\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"L2_ORACLE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractL2OutputOracle\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MAX_OUTPUT_FINALIZATIONS\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MIN_ACTIVATE_AMOUNT\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MIN_REGISTER_AMOUNT\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MPT_FIRST_OUTPUT_INDEX\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROUND_DURATION_SECONDS\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"SOFT_JAIL_PERIOD_SECONDS\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"TRUSTED_VALIDATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"activateValidator\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"activatedValidatorCount\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"activatedValidatorTotalWeight\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint120\",\"internalType\":\"uint120\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"afterSubmitL2Output\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"bondValidatorKro\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"canFinalizeCommissionChangeAt\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"checkChallengeEligibility\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"checkSubmissionEligibility\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"finalizeCommissionChange\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getCommissionRate\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPendingCommissionRate\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStatus\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"enumIValidatorManager.ValidatorStatus\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getWeight\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint120\",\"internalType\":\"uint120\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"inJail\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initCommissionChange\",\"inputs\":[{\"name\":\"newCommissionRate\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"isActive\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"jailExpiresAt\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"nextValidator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"noSubmissionCount\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerValidator\",\"inputs\":[{\"name\":\"assets\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"commissionRate\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"withdrawAccount\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"revertSlash\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"loser\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"slash\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"winner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"loser\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"tryActivateValidator\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"tryUnjail\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unbondValidatorKro\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateValidatorTree\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tryRemove\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"version\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"ChallengeRewardDistributed\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RewardDistributed\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"validatorReward\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"},{\"name\":\"baseReward\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"},{\"name\":\"boostedReward\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SlashReverted\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"loser\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Slashed\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"loser\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorActivated\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"activatedAt\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorCommissionChangeFinalized\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"oldCommissionRate\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"},{\"name\":\"newCommissionRate\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorCommissionChangeInitiated\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"oldCommissionRate\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"},{\"name\":\"newCommissionRate\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorJailed\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"expiresAt\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorRegistered\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"activated\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"},{\"name\":\"commissionRate\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"},{\"name\":\"assets\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorStopped\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"stopsAt\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorUnjailed\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"ImproperValidatorStatus\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InsufficientAsset\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidConstructorParams\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"MaxCommissionRateExceeded\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"MptFirstOutputRestricted\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotAllowedCaller\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotElapsedCommissionChangeDelay\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotElapsedJailPeriod\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotInitiatedCommissionChange\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotSelectedPriorityValidator\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"SameCommissionRate\",\"inputs\":[]}]",
	Bin: "",
}

// ValidatorManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorManagerMetaData.ABI instead.
var ValidatorManagerABI = ValidatorManagerMetaData.ABI

// ValidatorManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorManagerMetaData.Bin instead.
var ValidatorManagerBin = ValidatorManagerMetaData.Bin

// DeployValidatorManager deploys a new Ethereum contract, binding an instance of ValidatorManager to it.
func DeployValidatorManager(auth *bind.TransactOpts, backend bind.ContractBackend, _constructorParams IValidatorManagerConstructorParams) (common.Address, *types.Transaction, *ValidatorManager, error) {
	parsed, err := ValidatorManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorManagerBin), backend, _constructorParams)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorManager{ValidatorManagerCaller: ValidatorManagerCaller{contract: contract}, ValidatorManagerTransactor: ValidatorManagerTransactor{contract: contract}, ValidatorManagerFilterer: ValidatorManagerFilterer{contract: contract}}, nil
}

// ValidatorManager is an auto generated Go binding around an Ethereum contract.
type ValidatorManager struct {
	ValidatorManagerCaller     // Read-only binding to the contract
	ValidatorManagerTransactor // Write-only binding to the contract
	ValidatorManagerFilterer   // Log filterer for contract events
}

// ValidatorManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorManagerSession struct {
	Contract     *ValidatorManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorManagerCallerSession struct {
	Contract *ValidatorManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// ValidatorManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorManagerTransactorSession struct {
	Contract     *ValidatorManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// ValidatorManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorManagerRaw struct {
	Contract *ValidatorManager // Generic contract binding to access the raw methods on
}

// ValidatorManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorManagerCallerRaw struct {
	Contract *ValidatorManagerCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorManagerTransactorRaw struct {
	Contract *ValidatorManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorManager creates a new instance of ValidatorManager, bound to a specific deployed contract.
func NewValidatorManager(address common.Address, backend bind.ContractBackend) (*ValidatorManager, error) {
	contract, err := bindValidatorManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorManager{ValidatorManagerCaller: ValidatorManagerCaller{contract: contract}, ValidatorManagerTransactor: ValidatorManagerTransactor{contract: contract}, ValidatorManagerFilterer: ValidatorManagerFilterer{contract: contract}}, nil
}

// NewValidatorManagerCaller creates a new read-only instance of ValidatorManager, bound to a specific deployed contract.
func NewValidatorManagerCaller(address common.Address, caller bind.ContractCaller) (*ValidatorManagerCaller, error) {
	contract, err := bindValidatorManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerCaller{contract: contract}, nil
}

// NewValidatorManagerTransactor creates a new write-only instance of ValidatorManager, bound to a specific deployed contract.
func NewValidatorManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorManagerTransactor, error) {
	contract, err := bindValidatorManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerTransactor{contract: contract}, nil
}

// NewValidatorManagerFilterer creates a new log filterer instance of ValidatorManager, bound to a specific deployed contract.
func NewValidatorManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorManagerFilterer, error) {
	contract, err := bindValidatorManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerFilterer{contract: contract}, nil
}

// bindValidatorManager binds a generic wrapper to an already deployed contract.
func bindValidatorManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ValidatorManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorManager *ValidatorManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorManager.Contract.ValidatorManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorManager *ValidatorManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorManager.Contract.ValidatorManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorManager *ValidatorManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorManager.Contract.ValidatorManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorManager *ValidatorManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorManager *ValidatorManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorManager *ValidatorManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorManager.Contract.contract.Transact(opts, method, params...)
}

// ASSETMANAGER is a free data retrieval call binding the contract method 0x6874e042.
//
// Solidity: function ASSET_MANAGER() view returns(address)
func (_ValidatorManager *ValidatorManagerCaller) ASSETMANAGER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "ASSET_MANAGER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ASSETMANAGER is a free data retrieval call binding the contract method 0x6874e042.
//
// Solidity: function ASSET_MANAGER() view returns(address)
func (_ValidatorManager *ValidatorManagerSession) ASSETMANAGER() (common.Address, error) {
	return _ValidatorManager.Contract.ASSETMANAGER(&_ValidatorManager.CallOpts)
}

// ASSETMANAGER is a free data retrieval call binding the contract method 0x6874e042.
//
// Solidity: function ASSET_MANAGER() view returns(address)
func (_ValidatorManager *ValidatorManagerCallerSession) ASSETMANAGER() (common.Address, error) {
	return _ValidatorManager.Contract.ASSETMANAGER(&_ValidatorManager.CallOpts)
}

// BASEREWARD is a free data retrieval call binding the contract method 0x22009af6.
//
// Solidity: function BASE_REWARD() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) BASEREWARD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "BASE_REWARD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BASEREWARD is a free data retrieval call binding the contract method 0x22009af6.
//
// Solidity: function BASE_REWARD() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) BASEREWARD() (*big.Int, error) {
	return _ValidatorManager.Contract.BASEREWARD(&_ValidatorManager.CallOpts)
}

// BASEREWARD is a free data retrieval call binding the contract method 0x22009af6.
//
// Solidity: function BASE_REWARD() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) BASEREWARD() (*big.Int, error) {
	return _ValidatorManager.Contract.BASEREWARD(&_ValidatorManager.CallOpts)
}

// BOOSTEDREWARDDENOM is a free data retrieval call binding the contract method 0x110d6069.
//
// Solidity: function BOOSTED_REWARD_DENOM() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) BOOSTEDREWARDDENOM(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "BOOSTED_REWARD_DENOM")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BOOSTEDREWARDDENOM is a free data retrieval call binding the contract method 0x110d6069.
//
// Solidity: function BOOSTED_REWARD_DENOM() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) BOOSTEDREWARDDENOM() (*big.Int, error) {
	return _ValidatorManager.Contract.BOOSTEDREWARDDENOM(&_ValidatorManager.CallOpts)
}

// BOOSTEDREWARDDENOM is a free data retrieval call binding the contract method 0x110d6069.
//
// Solidity: function BOOSTED_REWARD_DENOM() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) BOOSTEDREWARDDENOM() (*big.Int, error) {
	return _ValidatorManager.Contract.BOOSTEDREWARDDENOM(&_ValidatorManager.CallOpts)
}

// BOOSTEDREWARDNUMERATOR is a free data retrieval call binding the contract method 0x0763fa7e.
//
// Solidity: function BOOSTED_REWARD_NUMERATOR() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) BOOSTEDREWARDNUMERATOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "BOOSTED_REWARD_NUMERATOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BOOSTEDREWARDNUMERATOR is a free data retrieval call binding the contract method 0x0763fa7e.
//
// Solidity: function BOOSTED_REWARD_NUMERATOR() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) BOOSTEDREWARDNUMERATOR() (*big.Int, error) {
	return _ValidatorManager.Contract.BOOSTEDREWARDNUMERATOR(&_ValidatorManager.CallOpts)
}

// BOOSTEDREWARDNUMERATOR is a free data retrieval call binding the contract method 0x0763fa7e.
//
// Solidity: function BOOSTED_REWARD_NUMERATOR() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) BOOSTEDREWARDNUMERATOR() (*big.Int, error) {
	return _ValidatorManager.Contract.BOOSTEDREWARDNUMERATOR(&_ValidatorManager.CallOpts)
}

// COMMISSIONCHANGEDELAYSECONDS is a free data retrieval call binding the contract method 0x9e449b02.
//
// Solidity: function COMMISSION_CHANGE_DELAY_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) COMMISSIONCHANGEDELAYSECONDS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "COMMISSION_CHANGE_DELAY_SECONDS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// COMMISSIONCHANGEDELAYSECONDS is a free data retrieval call binding the contract method 0x9e449b02.
//
// Solidity: function COMMISSION_CHANGE_DELAY_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) COMMISSIONCHANGEDELAYSECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.COMMISSIONCHANGEDELAYSECONDS(&_ValidatorManager.CallOpts)
}

// COMMISSIONCHANGEDELAYSECONDS is a free data retrieval call binding the contract method 0x9e449b02.
//
// Solidity: function COMMISSION_CHANGE_DELAY_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) COMMISSIONCHANGEDELAYSECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.COMMISSIONCHANGEDELAYSECONDS(&_ValidatorManager.CallOpts)
}

// COMMISSIONRATEDENOM is a free data retrieval call binding the contract method 0xb91b2723.
//
// Solidity: function COMMISSION_RATE_DENOM() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) COMMISSIONRATEDENOM(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "COMMISSION_RATE_DENOM")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// COMMISSIONRATEDENOM is a free data retrieval call binding the contract method 0xb91b2723.
//
// Solidity: function COMMISSION_RATE_DENOM() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) COMMISSIONRATEDENOM() (*big.Int, error) {
	return _ValidatorManager.Contract.COMMISSIONRATEDENOM(&_ValidatorManager.CallOpts)
}

// COMMISSIONRATEDENOM is a free data retrieval call binding the contract method 0xb91b2723.
//
// Solidity: function COMMISSION_RATE_DENOM() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) COMMISSIONRATEDENOM() (*big.Int, error) {
	return _ValidatorManager.Contract.COMMISSIONRATEDENOM(&_ValidatorManager.CallOpts)
}

// HARDJAILPERIODSECONDS is a free data retrieval call binding the contract method 0x3ca83045.
//
// Solidity: function HARD_JAIL_PERIOD_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) HARDJAILPERIODSECONDS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "HARD_JAIL_PERIOD_SECONDS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// HARDJAILPERIODSECONDS is a free data retrieval call binding the contract method 0x3ca83045.
//
// Solidity: function HARD_JAIL_PERIOD_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) HARDJAILPERIODSECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.HARDJAILPERIODSECONDS(&_ValidatorManager.CallOpts)
}

// HARDJAILPERIODSECONDS is a free data retrieval call binding the contract method 0x3ca83045.
//
// Solidity: function HARD_JAIL_PERIOD_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) HARDJAILPERIODSECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.HARDJAILPERIODSECONDS(&_ValidatorManager.CallOpts)
}

// JAILTHRESHOLD is a free data retrieval call binding the contract method 0x42223ae9.
//
// Solidity: function JAIL_THRESHOLD() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) JAILTHRESHOLD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "JAIL_THRESHOLD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// JAILTHRESHOLD is a free data retrieval call binding the contract method 0x42223ae9.
//
// Solidity: function JAIL_THRESHOLD() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) JAILTHRESHOLD() (*big.Int, error) {
	return _ValidatorManager.Contract.JAILTHRESHOLD(&_ValidatorManager.CallOpts)
}

// JAILTHRESHOLD is a free data retrieval call binding the contract method 0x42223ae9.
//
// Solidity: function JAIL_THRESHOLD() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) JAILTHRESHOLD() (*big.Int, error) {
	return _ValidatorManager.Contract.JAILTHRESHOLD(&_ValidatorManager.CallOpts)
}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_ValidatorManager *ValidatorManagerCaller) L2ORACLE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "L2_ORACLE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_ValidatorManager *ValidatorManagerSession) L2ORACLE() (common.Address, error) {
	return _ValidatorManager.Contract.L2ORACLE(&_ValidatorManager.CallOpts)
}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_ValidatorManager *ValidatorManagerCallerSession) L2ORACLE() (common.Address, error) {
	return _ValidatorManager.Contract.L2ORACLE(&_ValidatorManager.CallOpts)
}

// MAXOUTPUTFINALIZATIONS is a free data retrieval call binding the contract method 0xe7816b7f.
//
// Solidity: function MAX_OUTPUT_FINALIZATIONS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) MAXOUTPUTFINALIZATIONS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "MAX_OUTPUT_FINALIZATIONS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXOUTPUTFINALIZATIONS is a free data retrieval call binding the contract method 0xe7816b7f.
//
// Solidity: function MAX_OUTPUT_FINALIZATIONS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) MAXOUTPUTFINALIZATIONS() (*big.Int, error) {
	return _ValidatorManager.Contract.MAXOUTPUTFINALIZATIONS(&_ValidatorManager.CallOpts)
}

// MAXOUTPUTFINALIZATIONS is a free data retrieval call binding the contract method 0xe7816b7f.
//
// Solidity: function MAX_OUTPUT_FINALIZATIONS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) MAXOUTPUTFINALIZATIONS() (*big.Int, error) {
	return _ValidatorManager.Contract.MAXOUTPUTFINALIZATIONS(&_ValidatorManager.CallOpts)
}

// MINACTIVATEAMOUNT is a free data retrieval call binding the contract method 0xb2653fe3.
//
// Solidity: function MIN_ACTIVATE_AMOUNT() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) MINACTIVATEAMOUNT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "MIN_ACTIVATE_AMOUNT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINACTIVATEAMOUNT is a free data retrieval call binding the contract method 0xb2653fe3.
//
// Solidity: function MIN_ACTIVATE_AMOUNT() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) MINACTIVATEAMOUNT() (*big.Int, error) {
	return _ValidatorManager.Contract.MINACTIVATEAMOUNT(&_ValidatorManager.CallOpts)
}

// MINACTIVATEAMOUNT is a free data retrieval call binding the contract method 0xb2653fe3.
//
// Solidity: function MIN_ACTIVATE_AMOUNT() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) MINACTIVATEAMOUNT() (*big.Int, error) {
	return _ValidatorManager.Contract.MINACTIVATEAMOUNT(&_ValidatorManager.CallOpts)
}

// MINREGISTERAMOUNT is a free data retrieval call binding the contract method 0x1796e52e.
//
// Solidity: function MIN_REGISTER_AMOUNT() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) MINREGISTERAMOUNT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "MIN_REGISTER_AMOUNT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINREGISTERAMOUNT is a free data retrieval call binding the contract method 0x1796e52e.
//
// Solidity: function MIN_REGISTER_AMOUNT() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) MINREGISTERAMOUNT() (*big.Int, error) {
	return _ValidatorManager.Contract.MINREGISTERAMOUNT(&_ValidatorManager.CallOpts)
}

// MINREGISTERAMOUNT is a free data retrieval call binding the contract method 0x1796e52e.
//
// Solidity: function MIN_REGISTER_AMOUNT() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) MINREGISTERAMOUNT() (*big.Int, error) {
	return _ValidatorManager.Contract.MINREGISTERAMOUNT(&_ValidatorManager.CallOpts)
}

// MPTFIRSTOUTPUTINDEX is a free data retrieval call binding the contract method 0x6fd48520.
//
// Solidity: function MPT_FIRST_OUTPUT_INDEX() view returns(uint256)
func (_ValidatorManager *ValidatorManagerCaller) MPTFIRSTOUTPUTINDEX(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "MPT_FIRST_OUTPUT_INDEX")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MPTFIRSTOUTPUTINDEX is a free data retrieval call binding the contract method 0x6fd48520.
//
// Solidity: function MPT_FIRST_OUTPUT_INDEX() view returns(uint256)
func (_ValidatorManager *ValidatorManagerSession) MPTFIRSTOUTPUTINDEX() (*big.Int, error) {
	return _ValidatorManager.Contract.MPTFIRSTOUTPUTINDEX(&_ValidatorManager.CallOpts)
}

// MPTFIRSTOUTPUTINDEX is a free data retrieval call binding the contract method 0x6fd48520.
//
// Solidity: function MPT_FIRST_OUTPUT_INDEX() view returns(uint256)
func (_ValidatorManager *ValidatorManagerCallerSession) MPTFIRSTOUTPUTINDEX() (*big.Int, error) {
	return _ValidatorManager.Contract.MPTFIRSTOUTPUTINDEX(&_ValidatorManager.CallOpts)
}

// ROUNDDURATIONSECONDS is a free data retrieval call binding the contract method 0x4cca5e6c.
//
// Solidity: function ROUND_DURATION_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) ROUNDDURATIONSECONDS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "ROUND_DURATION_SECONDS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ROUNDDURATIONSECONDS is a free data retrieval call binding the contract method 0x4cca5e6c.
//
// Solidity: function ROUND_DURATION_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) ROUNDDURATIONSECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.ROUNDDURATIONSECONDS(&_ValidatorManager.CallOpts)
}

// ROUNDDURATIONSECONDS is a free data retrieval call binding the contract method 0x4cca5e6c.
//
// Solidity: function ROUND_DURATION_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) ROUNDDURATIONSECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.ROUNDDURATIONSECONDS(&_ValidatorManager.CallOpts)
}

// SOFTJAILPERIODSECONDS is a free data retrieval call binding the contract method 0xdaec6770.
//
// Solidity: function SOFT_JAIL_PERIOD_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) SOFTJAILPERIODSECONDS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "SOFT_JAIL_PERIOD_SECONDS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SOFTJAILPERIODSECONDS is a free data retrieval call binding the contract method 0xdaec6770.
//
// Solidity: function SOFT_JAIL_PERIOD_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) SOFTJAILPERIODSECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.SOFTJAILPERIODSECONDS(&_ValidatorManager.CallOpts)
}

// SOFTJAILPERIODSECONDS is a free data retrieval call binding the contract method 0xdaec6770.
//
// Solidity: function SOFT_JAIL_PERIOD_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) SOFTJAILPERIODSECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.SOFTJAILPERIODSECONDS(&_ValidatorManager.CallOpts)
}

// TRUSTEDVALIDATOR is a free data retrieval call binding the contract method 0x3ee4d4a3.
//
// Solidity: function TRUSTED_VALIDATOR() view returns(address)
func (_ValidatorManager *ValidatorManagerCaller) TRUSTEDVALIDATOR(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "TRUSTED_VALIDATOR")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TRUSTEDVALIDATOR is a free data retrieval call binding the contract method 0x3ee4d4a3.
//
// Solidity: function TRUSTED_VALIDATOR() view returns(address)
func (_ValidatorManager *ValidatorManagerSession) TRUSTEDVALIDATOR() (common.Address, error) {
	return _ValidatorManager.Contract.TRUSTEDVALIDATOR(&_ValidatorManager.CallOpts)
}

// TRUSTEDVALIDATOR is a free data retrieval call binding the contract method 0x3ee4d4a3.
//
// Solidity: function TRUSTED_VALIDATOR() view returns(address)
func (_ValidatorManager *ValidatorManagerCallerSession) TRUSTEDVALIDATOR() (common.Address, error) {
	return _ValidatorManager.Contract.TRUSTEDVALIDATOR(&_ValidatorManager.CallOpts)
}

// ActivatedValidatorCount is a free data retrieval call binding the contract method 0xcdff5e19.
//
// Solidity: function activatedValidatorCount() view returns(uint32)
func (_ValidatorManager *ValidatorManagerCaller) ActivatedValidatorCount(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "activatedValidatorCount")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// ActivatedValidatorCount is a free data retrieval call binding the contract method 0xcdff5e19.
//
// Solidity: function activatedValidatorCount() view returns(uint32)
func (_ValidatorManager *ValidatorManagerSession) ActivatedValidatorCount() (uint32, error) {
	return _ValidatorManager.Contract.ActivatedValidatorCount(&_ValidatorManager.CallOpts)
}

// ActivatedValidatorCount is a free data retrieval call binding the contract method 0xcdff5e19.
//
// Solidity: function activatedValidatorCount() view returns(uint32)
func (_ValidatorManager *ValidatorManagerCallerSession) ActivatedValidatorCount() (uint32, error) {
	return _ValidatorManager.Contract.ActivatedValidatorCount(&_ValidatorManager.CallOpts)
}

// ActivatedValidatorTotalWeight is a free data retrieval call binding the contract method 0xaf6ca762.
//
// Solidity: function activatedValidatorTotalWeight() view returns(uint120)
func (_ValidatorManager *ValidatorManagerCaller) ActivatedValidatorTotalWeight(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "activatedValidatorTotalWeight")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ActivatedValidatorTotalWeight is a free data retrieval call binding the contract method 0xaf6ca762.
//
// Solidity: function activatedValidatorTotalWeight() view returns(uint120)
func (_ValidatorManager *ValidatorManagerSession) ActivatedValidatorTotalWeight() (*big.Int, error) {
	return _ValidatorManager.Contract.ActivatedValidatorTotalWeight(&_ValidatorManager.CallOpts)
}

// ActivatedValidatorTotalWeight is a free data retrieval call binding the contract method 0xaf6ca762.
//
// Solidity: function activatedValidatorTotalWeight() view returns(uint120)
func (_ValidatorManager *ValidatorManagerCallerSession) ActivatedValidatorTotalWeight() (*big.Int, error) {
	return _ValidatorManager.Contract.ActivatedValidatorTotalWeight(&_ValidatorManager.CallOpts)
}

// CanFinalizeCommissionChangeAt is a free data retrieval call binding the contract method 0xbde022bb.
//
// Solidity: function canFinalizeCommissionChangeAt(address validator) view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) CanFinalizeCommissionChangeAt(opts *bind.CallOpts, validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "canFinalizeCommissionChangeAt", validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CanFinalizeCommissionChangeAt is a free data retrieval call binding the contract method 0xbde022bb.
//
// Solidity: function canFinalizeCommissionChangeAt(address validator) view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) CanFinalizeCommissionChangeAt(validator common.Address) (*big.Int, error) {
	return _ValidatorManager.Contract.CanFinalizeCommissionChangeAt(&_ValidatorManager.CallOpts, validator)
}

// CanFinalizeCommissionChangeAt is a free data retrieval call binding the contract method 0xbde022bb.
//
// Solidity: function canFinalizeCommissionChangeAt(address validator) view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) CanFinalizeCommissionChangeAt(validator common.Address) (*big.Int, error) {
	return _ValidatorManager.Contract.CanFinalizeCommissionChangeAt(&_ValidatorManager.CallOpts, validator)
}

// CheckChallengeEligibility is a free data retrieval call binding the contract method 0x2afe548d.
//
// Solidity: function checkChallengeEligibility(uint256 outputIndex) view returns()
func (_ValidatorManager *ValidatorManagerCaller) CheckChallengeEligibility(opts *bind.CallOpts, outputIndex *big.Int) error {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "checkChallengeEligibility", outputIndex)

	if err != nil {
		return err
	}

	return err

}

// CheckChallengeEligibility is a free data retrieval call binding the contract method 0x2afe548d.
//
// Solidity: function checkChallengeEligibility(uint256 outputIndex) view returns()
func (_ValidatorManager *ValidatorManagerSession) CheckChallengeEligibility(outputIndex *big.Int) error {
	return _ValidatorManager.Contract.CheckChallengeEligibility(&_ValidatorManager.CallOpts, outputIndex)
}

// CheckChallengeEligibility is a free data retrieval call binding the contract method 0x2afe548d.
//
// Solidity: function checkChallengeEligibility(uint256 outputIndex) view returns()
func (_ValidatorManager *ValidatorManagerCallerSession) CheckChallengeEligibility(outputIndex *big.Int) error {
	return _ValidatorManager.Contract.CheckChallengeEligibility(&_ValidatorManager.CallOpts, outputIndex)
}

// CheckSubmissionEligibility is a free data retrieval call binding the contract method 0x891aab74.
//
// Solidity: function checkSubmissionEligibility(address validator) view returns()
func (_ValidatorManager *ValidatorManagerCaller) CheckSubmissionEligibility(opts *bind.CallOpts, validator common.Address) error {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "checkSubmissionEligibility", validator)

	if err != nil {
		return err
	}

	return err

}

// CheckSubmissionEligibility is a free data retrieval call binding the contract method 0x891aab74.
//
// Solidity: function checkSubmissionEligibility(address validator) view returns()
func (_ValidatorManager *ValidatorManagerSession) CheckSubmissionEligibility(validator common.Address) error {
	return _ValidatorManager.Contract.CheckSubmissionEligibility(&_ValidatorManager.CallOpts, validator)
}

// CheckSubmissionEligibility is a free data retrieval call binding the contract method 0x891aab74.
//
// Solidity: function checkSubmissionEligibility(address validator) view returns()
func (_ValidatorManager *ValidatorManagerCallerSession) CheckSubmissionEligibility(validator common.Address) error {
	return _ValidatorManager.Contract.CheckSubmissionEligibility(&_ValidatorManager.CallOpts, validator)
}

// GetCommissionRate is a free data retrieval call binding the contract method 0xe0cc26a2.
//
// Solidity: function getCommissionRate(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCaller) GetCommissionRate(opts *bind.CallOpts, validator common.Address) (uint8, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "getCommissionRate", validator)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetCommissionRate is a free data retrieval call binding the contract method 0xe0cc26a2.
//
// Solidity: function getCommissionRate(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerSession) GetCommissionRate(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.GetCommissionRate(&_ValidatorManager.CallOpts, validator)
}

// GetCommissionRate is a free data retrieval call binding the contract method 0xe0cc26a2.
//
// Solidity: function getCommissionRate(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCallerSession) GetCommissionRate(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.GetCommissionRate(&_ValidatorManager.CallOpts, validator)
}

// GetPendingCommissionRate is a free data retrieval call binding the contract method 0xc26148fe.
//
// Solidity: function getPendingCommissionRate(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCaller) GetPendingCommissionRate(opts *bind.CallOpts, validator common.Address) (uint8, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "getPendingCommissionRate", validator)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetPendingCommissionRate is a free data retrieval call binding the contract method 0xc26148fe.
//
// Solidity: function getPendingCommissionRate(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerSession) GetPendingCommissionRate(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.GetPendingCommissionRate(&_ValidatorManager.CallOpts, validator)
}

// GetPendingCommissionRate is a free data retrieval call binding the contract method 0xc26148fe.
//
// Solidity: function getPendingCommissionRate(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCallerSession) GetPendingCommissionRate(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.GetPendingCommissionRate(&_ValidatorManager.CallOpts, validator)
}

// GetStatus is a free data retrieval call binding the contract method 0x30ccebb5.
//
// Solidity: function getStatus(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCaller) GetStatus(opts *bind.CallOpts, validator common.Address) (uint8, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "getStatus", validator)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetStatus is a free data retrieval call binding the contract method 0x30ccebb5.
//
// Solidity: function getStatus(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerSession) GetStatus(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.GetStatus(&_ValidatorManager.CallOpts, validator)
}

// GetStatus is a free data retrieval call binding the contract method 0x30ccebb5.
//
// Solidity: function getStatus(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCallerSession) GetStatus(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.GetStatus(&_ValidatorManager.CallOpts, validator)
}

// GetWeight is a free data retrieval call binding the contract method 0xac6c5251.
//
// Solidity: function getWeight(address validator) view returns(uint120)
func (_ValidatorManager *ValidatorManagerCaller) GetWeight(opts *bind.CallOpts, validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "getWeight", validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetWeight is a free data retrieval call binding the contract method 0xac6c5251.
//
// Solidity: function getWeight(address validator) view returns(uint120)
func (_ValidatorManager *ValidatorManagerSession) GetWeight(validator common.Address) (*big.Int, error) {
	return _ValidatorManager.Contract.GetWeight(&_ValidatorManager.CallOpts, validator)
}

// GetWeight is a free data retrieval call binding the contract method 0xac6c5251.
//
// Solidity: function getWeight(address validator) view returns(uint120)
func (_ValidatorManager *ValidatorManagerCallerSession) GetWeight(validator common.Address) (*big.Int, error) {
	return _ValidatorManager.Contract.GetWeight(&_ValidatorManager.CallOpts, validator)
}

// InJail is a free data retrieval call binding the contract method 0x56b65e97.
//
// Solidity: function inJail(address validator) view returns(bool)
func (_ValidatorManager *ValidatorManagerCaller) InJail(opts *bind.CallOpts, validator common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "inJail", validator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// InJail is a free data retrieval call binding the contract method 0x56b65e97.
//
// Solidity: function inJail(address validator) view returns(bool)
func (_ValidatorManager *ValidatorManagerSession) InJail(validator common.Address) (bool, error) {
	return _ValidatorManager.Contract.InJail(&_ValidatorManager.CallOpts, validator)
}

// InJail is a free data retrieval call binding the contract method 0x56b65e97.
//
// Solidity: function inJail(address validator) view returns(bool)
func (_ValidatorManager *ValidatorManagerCallerSession) InJail(validator common.Address) (bool, error) {
	return _ValidatorManager.Contract.InJail(&_ValidatorManager.CallOpts, validator)
}

// IsActive is a free data retrieval call binding the contract method 0x9f8a13d7.
//
// Solidity: function isActive(address validator) view returns(bool)
func (_ValidatorManager *ValidatorManagerCaller) IsActive(opts *bind.CallOpts, validator common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "isActive", validator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsActive is a free data retrieval call binding the contract method 0x9f8a13d7.
//
// Solidity: function isActive(address validator) view returns(bool)
func (_ValidatorManager *ValidatorManagerSession) IsActive(validator common.Address) (bool, error) {
	return _ValidatorManager.Contract.IsActive(&_ValidatorManager.CallOpts, validator)
}

// IsActive is a free data retrieval call binding the contract method 0x9f8a13d7.
//
// Solidity: function isActive(address validator) view returns(bool)
func (_ValidatorManager *ValidatorManagerCallerSession) IsActive(validator common.Address) (bool, error) {
	return _ValidatorManager.Contract.IsActive(&_ValidatorManager.CallOpts, validator)
}

// JailExpiresAt is a free data retrieval call binding the contract method 0x970531c1.
//
// Solidity: function jailExpiresAt(address validator) view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) JailExpiresAt(opts *bind.CallOpts, validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "jailExpiresAt", validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// JailExpiresAt is a free data retrieval call binding the contract method 0x970531c1.
//
// Solidity: function jailExpiresAt(address validator) view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) JailExpiresAt(validator common.Address) (*big.Int, error) {
	return _ValidatorManager.Contract.JailExpiresAt(&_ValidatorManager.CallOpts, validator)
}

// JailExpiresAt is a free data retrieval call binding the contract method 0x970531c1.
//
// Solidity: function jailExpiresAt(address validator) view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) JailExpiresAt(validator common.Address) (*big.Int, error) {
	return _ValidatorManager.Contract.JailExpiresAt(&_ValidatorManager.CallOpts, validator)
}

// NextValidator is a free data retrieval call binding the contract method 0x3a549046.
//
// Solidity: function nextValidator() view returns(address)
func (_ValidatorManager *ValidatorManagerCaller) NextValidator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "nextValidator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NextValidator is a free data retrieval call binding the contract method 0x3a549046.
//
// Solidity: function nextValidator() view returns(address)
func (_ValidatorManager *ValidatorManagerSession) NextValidator() (common.Address, error) {
	return _ValidatorManager.Contract.NextValidator(&_ValidatorManager.CallOpts)
}

// NextValidator is a free data retrieval call binding the contract method 0x3a549046.
//
// Solidity: function nextValidator() view returns(address)
func (_ValidatorManager *ValidatorManagerCallerSession) NextValidator() (common.Address, error) {
	return _ValidatorManager.Contract.NextValidator(&_ValidatorManager.CallOpts)
}

// NoSubmissionCount is a free data retrieval call binding the contract method 0xdff221b5.
//
// Solidity: function noSubmissionCount(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCaller) NoSubmissionCount(opts *bind.CallOpts, validator common.Address) (uint8, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "noSubmissionCount", validator)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// NoSubmissionCount is a free data retrieval call binding the contract method 0xdff221b5.
//
// Solidity: function noSubmissionCount(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerSession) NoSubmissionCount(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.NoSubmissionCount(&_ValidatorManager.CallOpts, validator)
}

// NoSubmissionCount is a free data retrieval call binding the contract method 0xdff221b5.
//
// Solidity: function noSubmissionCount(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCallerSession) NoSubmissionCount(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.NoSubmissionCount(&_ValidatorManager.CallOpts, validator)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_ValidatorManager *ValidatorManagerCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_ValidatorManager *ValidatorManagerSession) Version() (string, error) {
	return _ValidatorManager.Contract.Version(&_ValidatorManager.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_ValidatorManager *ValidatorManagerCallerSession) Version() (string, error) {
	return _ValidatorManager.Contract.Version(&_ValidatorManager.CallOpts)
}

// ActivateValidator is a paid mutator transaction binding the contract method 0x263a3402.
//
// Solidity: function activateValidator() returns()
func (_ValidatorManager *ValidatorManagerTransactor) ActivateValidator(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "activateValidator")
}

// ActivateValidator is a paid mutator transaction binding the contract method 0x263a3402.
//
// Solidity: function activateValidator() returns()
func (_ValidatorManager *ValidatorManagerSession) ActivateValidator() (*types.Transaction, error) {
	return _ValidatorManager.Contract.ActivateValidator(&_ValidatorManager.TransactOpts)
}

// ActivateValidator is a paid mutator transaction binding the contract method 0x263a3402.
//
// Solidity: function activateValidator() returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) ActivateValidator() (*types.Transaction, error) {
	return _ValidatorManager.Contract.ActivateValidator(&_ValidatorManager.TransactOpts)
}

// AfterSubmitL2Output is a paid mutator transaction binding the contract method 0xbe119347.
//
// Solidity: function afterSubmitL2Output(uint256 outputIndex) returns()
func (_ValidatorManager *ValidatorManagerTransactor) AfterSubmitL2Output(opts *bind.TransactOpts, outputIndex *big.Int) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "afterSubmitL2Output", outputIndex)
}

// AfterSubmitL2Output is a paid mutator transaction binding the contract method 0xbe119347.
//
// Solidity: function afterSubmitL2Output(uint256 outputIndex) returns()
func (_ValidatorManager *ValidatorManagerSession) AfterSubmitL2Output(outputIndex *big.Int) (*types.Transaction, error) {
	return _ValidatorManager.Contract.AfterSubmitL2Output(&_ValidatorManager.TransactOpts, outputIndex)
}

// AfterSubmitL2Output is a paid mutator transaction binding the contract method 0xbe119347.
//
// Solidity: function afterSubmitL2Output(uint256 outputIndex) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) AfterSubmitL2Output(outputIndex *big.Int) (*types.Transaction, error) {
	return _ValidatorManager.Contract.AfterSubmitL2Output(&_ValidatorManager.TransactOpts, outputIndex)
}

// BondValidatorKro is a paid mutator transaction binding the contract method 0x8c1516c7.
//
// Solidity: function bondValidatorKro(address validator) returns()
func (_ValidatorManager *ValidatorManagerTransactor) BondValidatorKro(opts *bind.TransactOpts, validator common.Address) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "bondValidatorKro", validator)
}

// BondValidatorKro is a paid mutator transaction binding the contract method 0x8c1516c7.
//
// Solidity: function bondValidatorKro(address validator) returns()
func (_ValidatorManager *ValidatorManagerSession) BondValidatorKro(validator common.Address) (*types.Transaction, error) {
	return _ValidatorManager.Contract.BondValidatorKro(&_ValidatorManager.TransactOpts, validator)
}

// BondValidatorKro is a paid mutator transaction binding the contract method 0x8c1516c7.
//
// Solidity: function bondValidatorKro(address validator) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) BondValidatorKro(validator common.Address) (*types.Transaction, error) {
	return _ValidatorManager.Contract.BondValidatorKro(&_ValidatorManager.TransactOpts, validator)
}

// FinalizeCommissionChange is a paid mutator transaction binding the contract method 0x943e4005.
//
// Solidity: function finalizeCommissionChange() returns()
func (_ValidatorManager *ValidatorManagerTransactor) FinalizeCommissionChange(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "finalizeCommissionChange")
}

// FinalizeCommissionChange is a paid mutator transaction binding the contract method 0x943e4005.
//
// Solidity: function finalizeCommissionChange() returns()
func (_ValidatorManager *ValidatorManagerSession) FinalizeCommissionChange() (*types.Transaction, error) {
	return _ValidatorManager.Contract.FinalizeCommissionChange(&_ValidatorManager.TransactOpts)
}

// FinalizeCommissionChange is a paid mutator transaction binding the contract method 0x943e4005.
//
// Solidity: function finalizeCommissionChange() returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) FinalizeCommissionChange() (*types.Transaction, error) {
	return _ValidatorManager.Contract.FinalizeCommissionChange(&_ValidatorManager.TransactOpts)
}

// InitCommissionChange is a paid mutator transaction binding the contract method 0xa3433d07.
//
// Solidity: function initCommissionChange(uint8 newCommissionRate) returns()
func (_ValidatorManager *ValidatorManagerTransactor) InitCommissionChange(opts *bind.TransactOpts, newCommissionRate uint8) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "initCommissionChange", newCommissionRate)
}

// InitCommissionChange is a paid mutator transaction binding the contract method 0xa3433d07.
//
// Solidity: function initCommissionChange(uint8 newCommissionRate) returns()
func (_ValidatorManager *ValidatorManagerSession) InitCommissionChange(newCommissionRate uint8) (*types.Transaction, error) {
	return _ValidatorManager.Contract.InitCommissionChange(&_ValidatorManager.TransactOpts, newCommissionRate)
}

// InitCommissionChange is a paid mutator transaction binding the contract method 0xa3433d07.
//
// Solidity: function initCommissionChange(uint8 newCommissionRate) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) InitCommissionChange(newCommissionRate uint8) (*types.Transaction, error) {
	return _ValidatorManager.Contract.InitCommissionChange(&_ValidatorManager.TransactOpts, newCommissionRate)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x065643ea.
//
// Solidity: function registerValidator(uint128 assets, uint8 commissionRate, address withdrawAccount) returns()
func (_ValidatorManager *ValidatorManagerTransactor) RegisterValidator(opts *bind.TransactOpts, assets *big.Int, commissionRate uint8, withdrawAccount common.Address) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "registerValidator", assets, commissionRate, withdrawAccount)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x065643ea.
//
// Solidity: function registerValidator(uint128 assets, uint8 commissionRate, address withdrawAccount) returns()
func (_ValidatorManager *ValidatorManagerSession) RegisterValidator(assets *big.Int, commissionRate uint8, withdrawAccount common.Address) (*types.Transaction, error) {
	return _ValidatorManager.Contract.RegisterValidator(&_ValidatorManager.TransactOpts, assets, commissionRate, withdrawAccount)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x065643ea.
//
// Solidity: function registerValidator(uint128 assets, uint8 commissionRate, address withdrawAccount) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) RegisterValidator(assets *big.Int, commissionRate uint8, withdrawAccount common.Address) (*types.Transaction, error) {
	return _ValidatorManager.Contract.RegisterValidator(&_ValidatorManager.TransactOpts, assets, commissionRate, withdrawAccount)
}

// RevertSlash is a paid mutator transaction binding the contract method 0xab04b8aa.
//
// Solidity: function revertSlash(uint256 outputIndex, address loser) returns()
func (_ValidatorManager *ValidatorManagerTransactor) RevertSlash(opts *bind.TransactOpts, outputIndex *big.Int, loser common.Address) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "revertSlash", outputIndex, loser)
}

// RevertSlash is a paid mutator transaction binding the contract method 0xab04b8aa.
//
// Solidity: function revertSlash(uint256 outputIndex, address loser) returns()
func (_ValidatorManager *ValidatorManagerSession) RevertSlash(outputIndex *big.Int, loser common.Address) (*types.Transaction, error) {
	return _ValidatorManager.Contract.RevertSlash(&_ValidatorManager.TransactOpts, outputIndex, loser)
}

// RevertSlash is a paid mutator transaction binding the contract method 0xab04b8aa.
//
// Solidity: function revertSlash(uint256 outputIndex, address loser) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) RevertSlash(outputIndex *big.Int, loser common.Address) (*types.Transaction, error) {
	return _ValidatorManager.Contract.RevertSlash(&_ValidatorManager.TransactOpts, outputIndex, loser)
}

// Slash is a paid mutator transaction binding the contract method 0xbe995dc2.
//
// Solidity: function slash(uint256 outputIndex, address winner, address loser) returns()
func (_ValidatorManager *ValidatorManagerTransactor) Slash(opts *bind.TransactOpts, outputIndex *big.Int, winner common.Address, loser common.Address) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "slash", outputIndex, winner, loser)
}

// Slash is a paid mutator transaction binding the contract method 0xbe995dc2.
//
// Solidity: function slash(uint256 outputIndex, address winner, address loser) returns()
func (_ValidatorManager *ValidatorManagerSession) Slash(outputIndex *big.Int, winner common.Address, loser common.Address) (*types.Transaction, error) {
	return _ValidatorManager.Contract.Slash(&_ValidatorManager.TransactOpts, outputIndex, winner, loser)
}

// Slash is a paid mutator transaction binding the contract method 0xbe995dc2.
//
// Solidity: function slash(uint256 outputIndex, address winner, address loser) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) Slash(outputIndex *big.Int, winner common.Address, loser common.Address) (*types.Transaction, error) {
	return _ValidatorManager.Contract.Slash(&_ValidatorManager.TransactOpts, outputIndex, winner, loser)
}

// TryActivateValidator is a paid mutator transaction binding the contract method 0xe428c2f4.
//
// Solidity: function tryActivateValidator(address validator) returns()
func (_ValidatorManager *ValidatorManagerTransactor) TryActivateValidator(opts *bind.TransactOpts, validator common.Address) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "tryActivateValidator", validator)
}

// TryActivateValidator is a paid mutator transaction binding the contract method 0xe428c2f4.
//
// Solidity: function tryActivateValidator(address validator) returns()
func (_ValidatorManager *ValidatorManagerSession) TryActivateValidator(validator common.Address) (*types.Transaction, error) {
	return _ValidatorManager.Contract.TryActivateValidator(&_ValidatorManager.TransactOpts, validator)
}

// TryActivateValidator is a paid mutator transaction binding the contract method 0xe428c2f4.
//
// Solidity: function tryActivateValidator(address validator) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) TryActivateValidator(validator common.Address) (*types.Transaction, error) {
	return _ValidatorManager.Contract.TryActivateValidator(&_ValidatorManager.TransactOpts, validator)
}

// TryUnjail is a paid mutator transaction binding the contract method 0x7d2243b4.
//
// Solidity: function tryUnjail() returns()
func (_ValidatorManager *ValidatorManagerTransactor) TryUnjail(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "tryUnjail")
}

// TryUnjail is a paid mutator transaction binding the contract method 0x7d2243b4.
//
// Solidity: function tryUnjail() returns()
func (_ValidatorManager *ValidatorManagerSession) TryUnjail() (*types.Transaction, error) {
	return _ValidatorManager.Contract.TryUnjail(&_ValidatorManager.TransactOpts)
}

// TryUnjail is a paid mutator transaction binding the contract method 0x7d2243b4.
//
// Solidity: function tryUnjail() returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) TryUnjail() (*types.Transaction, error) {
	return _ValidatorManager.Contract.TryUnjail(&_ValidatorManager.TransactOpts)
}

// UnbondValidatorKro is a paid mutator transaction binding the contract method 0xa8387172.
//
// Solidity: function unbondValidatorKro(address validator) returns()
func (_ValidatorManager *ValidatorManagerTransactor) UnbondValidatorKro(opts *bind.TransactOpts, validator common.Address) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "unbondValidatorKro", validator)
}

// UnbondValidatorKro is a paid mutator transaction binding the contract method 0xa8387172.
//
// Solidity: function unbondValidatorKro(address validator) returns()
func (_ValidatorManager *ValidatorManagerSession) UnbondValidatorKro(validator common.Address) (*types.Transaction, error) {
	return _ValidatorManager.Contract.UnbondValidatorKro(&_ValidatorManager.TransactOpts, validator)
}

// UnbondValidatorKro is a paid mutator transaction binding the contract method 0xa8387172.
//
// Solidity: function unbondValidatorKro(address validator) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) UnbondValidatorKro(validator common.Address) (*types.Transaction, error) {
	return _ValidatorManager.Contract.UnbondValidatorKro(&_ValidatorManager.TransactOpts, validator)
}

// UpdateValidatorTree is a paid mutator transaction binding the contract method 0x5bab847f.
//
// Solidity: function updateValidatorTree(address validator, bool tryRemove) returns()
func (_ValidatorManager *ValidatorManagerTransactor) UpdateValidatorTree(opts *bind.TransactOpts, validator common.Address, tryRemove bool) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "updateValidatorTree", validator, tryRemove)
}

// UpdateValidatorTree is a paid mutator transaction binding the contract method 0x5bab847f.
//
// Solidity: function updateValidatorTree(address validator, bool tryRemove) returns()
func (_ValidatorManager *ValidatorManagerSession) UpdateValidatorTree(validator common.Address, tryRemove bool) (*types.Transaction, error) {
	return _ValidatorManager.Contract.UpdateValidatorTree(&_ValidatorManager.TransactOpts, validator, tryRemove)
}

// UpdateValidatorTree is a paid mutator transaction binding the contract method 0x5bab847f.
//
// Solidity: function updateValidatorTree(address validator, bool tryRemove) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) UpdateValidatorTree(validator common.Address, tryRemove bool) (*types.Transaction, error) {
	return _ValidatorManager.Contract.UpdateValidatorTree(&_ValidatorManager.TransactOpts, validator, tryRemove)
}

// ValidatorManagerChallengeRewardDistributedIterator is returned from FilterChallengeRewardDistributed and is used to iterate over the raw logs and unpacked data for ChallengeRewardDistributed events raised by the ValidatorManager contract.
type ValidatorManagerChallengeRewardDistributedIterator struct {
	Event *ValidatorManagerChallengeRewardDistributed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerChallengeRewardDistributedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerChallengeRewardDistributed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerChallengeRewardDistributed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerChallengeRewardDistributedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerChallengeRewardDistributedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerChallengeRewardDistributed represents a ChallengeRewardDistributed event raised by the ValidatorManager contract.
type ValidatorManagerChallengeRewardDistributed struct {
	OutputIndex *big.Int
	Recipient   common.Address
	Amount      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterChallengeRewardDistributed is a free log retrieval operation binding the contract event 0xd537f9e63e8da05cdb52f795e1c79d7b163e2517d5229375474dbe60b48cfa14.
//
// Solidity: event ChallengeRewardDistributed(uint256 indexed outputIndex, address indexed recipient, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) FilterChallengeRewardDistributed(opts *bind.FilterOpts, outputIndex []*big.Int, recipient []common.Address) (*ValidatorManagerChallengeRewardDistributedIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ChallengeRewardDistributed", outputIndexRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerChallengeRewardDistributedIterator{contract: _ValidatorManager.contract, event: "ChallengeRewardDistributed", logs: logs, sub: sub}, nil
}

// WatchChallengeRewardDistributed is a free log subscription operation binding the contract event 0xd537f9e63e8da05cdb52f795e1c79d7b163e2517d5229375474dbe60b48cfa14.
//
// Solidity: event ChallengeRewardDistributed(uint256 indexed outputIndex, address indexed recipient, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) WatchChallengeRewardDistributed(opts *bind.WatchOpts, sink chan<- *ValidatorManagerChallengeRewardDistributed, outputIndex []*big.Int, recipient []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ChallengeRewardDistributed", outputIndexRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerChallengeRewardDistributed)
				if err := _ValidatorManager.contract.UnpackLog(event, "ChallengeRewardDistributed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeRewardDistributed is a log parse operation binding the contract event 0xd537f9e63e8da05cdb52f795e1c79d7b163e2517d5229375474dbe60b48cfa14.
//
// Solidity: event ChallengeRewardDistributed(uint256 indexed outputIndex, address indexed recipient, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) ParseChallengeRewardDistributed(log types.Log) (*ValidatorManagerChallengeRewardDistributed, error) {
	event := new(ValidatorManagerChallengeRewardDistributed)
	if err := _ValidatorManager.contract.UnpackLog(event, "ChallengeRewardDistributed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerRewardDistributedIterator is returned from FilterRewardDistributed and is used to iterate over the raw logs and unpacked data for RewardDistributed events raised by the ValidatorManager contract.
type ValidatorManagerRewardDistributedIterator struct {
	Event *ValidatorManagerRewardDistributed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerRewardDistributedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerRewardDistributed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerRewardDistributed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerRewardDistributedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerRewardDistributedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerRewardDistributed represents a RewardDistributed event raised by the ValidatorManager contract.
type ValidatorManagerRewardDistributed struct {
	OutputIndex     *big.Int
	Validator       common.Address
	ValidatorReward *big.Int
	BaseReward      *big.Int
	BoostedReward   *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterRewardDistributed is a free log retrieval operation binding the contract event 0xd74a44a8cd6c73740a70271e07ee96d8a495ff30037ae6381cbcdb8fe7f2a1ea.
//
// Solidity: event RewardDistributed(uint256 indexed outputIndex, address indexed validator, uint128 validatorReward, uint128 baseReward, uint128 boostedReward)
func (_ValidatorManager *ValidatorManagerFilterer) FilterRewardDistributed(opts *bind.FilterOpts, outputIndex []*big.Int, validator []common.Address) (*ValidatorManagerRewardDistributedIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "RewardDistributed", outputIndexRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerRewardDistributedIterator{contract: _ValidatorManager.contract, event: "RewardDistributed", logs: logs, sub: sub}, nil
}

// WatchRewardDistributed is a free log subscription operation binding the contract event 0xd74a44a8cd6c73740a70271e07ee96d8a495ff30037ae6381cbcdb8fe7f2a1ea.
//
// Solidity: event RewardDistributed(uint256 indexed outputIndex, address indexed validator, uint128 validatorReward, uint128 baseReward, uint128 boostedReward)
func (_ValidatorManager *ValidatorManagerFilterer) WatchRewardDistributed(opts *bind.WatchOpts, sink chan<- *ValidatorManagerRewardDistributed, outputIndex []*big.Int, validator []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "RewardDistributed", outputIndexRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerRewardDistributed)
				if err := _ValidatorManager.contract.UnpackLog(event, "RewardDistributed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardDistributed is a log parse operation binding the contract event 0xd74a44a8cd6c73740a70271e07ee96d8a495ff30037ae6381cbcdb8fe7f2a1ea.
//
// Solidity: event RewardDistributed(uint256 indexed outputIndex, address indexed validator, uint128 validatorReward, uint128 baseReward, uint128 boostedReward)
func (_ValidatorManager *ValidatorManagerFilterer) ParseRewardDistributed(log types.Log) (*ValidatorManagerRewardDistributed, error) {
	event := new(ValidatorManagerRewardDistributed)
	if err := _ValidatorManager.contract.UnpackLog(event, "RewardDistributed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerSlashRevertedIterator is returned from FilterSlashReverted and is used to iterate over the raw logs and unpacked data for SlashReverted events raised by the ValidatorManager contract.
type ValidatorManagerSlashRevertedIterator struct {
	Event *ValidatorManagerSlashReverted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerSlashRevertedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerSlashReverted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerSlashReverted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerSlashRevertedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerSlashRevertedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerSlashReverted represents a SlashReverted event raised by the ValidatorManager contract.
type ValidatorManagerSlashReverted struct {
	OutputIndex *big.Int
	Loser       common.Address
	Amount      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSlashReverted is a free log retrieval operation binding the contract event 0xe2d313b9d9b90c2930241ea64ee5d6f4ff30dfd44a15cd3f1df2c6cb8021ec07.
//
// Solidity: event SlashReverted(uint256 indexed outputIndex, address indexed loser, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) FilterSlashReverted(opts *bind.FilterOpts, outputIndex []*big.Int, loser []common.Address) (*ValidatorManagerSlashRevertedIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var loserRule []interface{}
	for _, loserItem := range loser {
		loserRule = append(loserRule, loserItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "SlashReverted", outputIndexRule, loserRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerSlashRevertedIterator{contract: _ValidatorManager.contract, event: "SlashReverted", logs: logs, sub: sub}, nil
}

// WatchSlashReverted is a free log subscription operation binding the contract event 0xe2d313b9d9b90c2930241ea64ee5d6f4ff30dfd44a15cd3f1df2c6cb8021ec07.
//
// Solidity: event SlashReverted(uint256 indexed outputIndex, address indexed loser, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) WatchSlashReverted(opts *bind.WatchOpts, sink chan<- *ValidatorManagerSlashReverted, outputIndex []*big.Int, loser []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var loserRule []interface{}
	for _, loserItem := range loser {
		loserRule = append(loserRule, loserItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "SlashReverted", outputIndexRule, loserRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerSlashReverted)
				if err := _ValidatorManager.contract.UnpackLog(event, "SlashReverted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashReverted is a log parse operation binding the contract event 0xe2d313b9d9b90c2930241ea64ee5d6f4ff30dfd44a15cd3f1df2c6cb8021ec07.
//
// Solidity: event SlashReverted(uint256 indexed outputIndex, address indexed loser, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) ParseSlashReverted(log types.Log) (*ValidatorManagerSlashReverted, error) {
	event := new(ValidatorManagerSlashReverted)
	if err := _ValidatorManager.contract.UnpackLog(event, "SlashReverted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerSlashedIterator is returned from FilterSlashed and is used to iterate over the raw logs and unpacked data for Slashed events raised by the ValidatorManager contract.
type ValidatorManagerSlashedIterator struct {
	Event *ValidatorManagerSlashed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerSlashedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerSlashed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerSlashed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerSlashedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerSlashedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerSlashed represents a Slashed event raised by the ValidatorManager contract.
type ValidatorManagerSlashed struct {
	OutputIndex *big.Int
	Loser       common.Address
	Amount      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSlashed is a free log retrieval operation binding the contract event 0x1237821480ce4d75f917bc39d1641eb17a5e09a2d5bf982cdd8cb2561aa28e68.
//
// Solidity: event Slashed(uint256 indexed outputIndex, address indexed loser, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) FilterSlashed(opts *bind.FilterOpts, outputIndex []*big.Int, loser []common.Address) (*ValidatorManagerSlashedIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var loserRule []interface{}
	for _, loserItem := range loser {
		loserRule = append(loserRule, loserItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "Slashed", outputIndexRule, loserRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerSlashedIterator{contract: _ValidatorManager.contract, event: "Slashed", logs: logs, sub: sub}, nil
}

// WatchSlashed is a free log subscription operation binding the contract event 0x1237821480ce4d75f917bc39d1641eb17a5e09a2d5bf982cdd8cb2561aa28e68.
//
// Solidity: event Slashed(uint256 indexed outputIndex, address indexed loser, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) WatchSlashed(opts *bind.WatchOpts, sink chan<- *ValidatorManagerSlashed, outputIndex []*big.Int, loser []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var loserRule []interface{}
	for _, loserItem := range loser {
		loserRule = append(loserRule, loserItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "Slashed", outputIndexRule, loserRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerSlashed)
				if err := _ValidatorManager.contract.UnpackLog(event, "Slashed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashed is a log parse operation binding the contract event 0x1237821480ce4d75f917bc39d1641eb17a5e09a2d5bf982cdd8cb2561aa28e68.
//
// Solidity: event Slashed(uint256 indexed outputIndex, address indexed loser, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) ParseSlashed(log types.Log) (*ValidatorManagerSlashed, error) {
	event := new(ValidatorManagerSlashed)
	if err := _ValidatorManager.contract.UnpackLog(event, "Slashed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerValidatorActivatedIterator is returned from FilterValidatorActivated and is used to iterate over the raw logs and unpacked data for ValidatorActivated events raised by the ValidatorManager contract.
type ValidatorManagerValidatorActivatedIterator struct {
	Event *ValidatorManagerValidatorActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerValidatorActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerValidatorActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerValidatorActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerValidatorActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerValidatorActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerValidatorActivated represents a ValidatorActivated event raised by the ValidatorManager contract.
type ValidatorManagerValidatorActivated struct {
	Validator   common.Address
	ActivatedAt *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterValidatorActivated is a free log retrieval operation binding the contract event 0xf33a24861b76047debce215c7ae4915a9befc5d870e97efbd4152df23c72112a.
//
// Solidity: event ValidatorActivated(address indexed validator, uint256 activatedAt)
func (_ValidatorManager *ValidatorManagerFilterer) FilterValidatorActivated(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerValidatorActivatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ValidatorActivated", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerValidatorActivatedIterator{contract: _ValidatorManager.contract, event: "ValidatorActivated", logs: logs, sub: sub}, nil
}

// WatchValidatorActivated is a free log subscription operation binding the contract event 0xf33a24861b76047debce215c7ae4915a9befc5d870e97efbd4152df23c72112a.
//
// Solidity: event ValidatorActivated(address indexed validator, uint256 activatedAt)
func (_ValidatorManager *ValidatorManagerFilterer) WatchValidatorActivated(opts *bind.WatchOpts, sink chan<- *ValidatorManagerValidatorActivated, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ValidatorActivated", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerValidatorActivated)
				if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorActivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorActivated is a log parse operation binding the contract event 0xf33a24861b76047debce215c7ae4915a9befc5d870e97efbd4152df23c72112a.
//
// Solidity: event ValidatorActivated(address indexed validator, uint256 activatedAt)
func (_ValidatorManager *ValidatorManagerFilterer) ParseValidatorActivated(log types.Log) (*ValidatorManagerValidatorActivated, error) {
	event := new(ValidatorManagerValidatorActivated)
	if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorActivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerValidatorCommissionChangeFinalizedIterator is returned from FilterValidatorCommissionChangeFinalized and is used to iterate over the raw logs and unpacked data for ValidatorCommissionChangeFinalized events raised by the ValidatorManager contract.
type ValidatorManagerValidatorCommissionChangeFinalizedIterator struct {
	Event *ValidatorManagerValidatorCommissionChangeFinalized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerValidatorCommissionChangeFinalizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerValidatorCommissionChangeFinalized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerValidatorCommissionChangeFinalized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerValidatorCommissionChangeFinalizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerValidatorCommissionChangeFinalizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerValidatorCommissionChangeFinalized represents a ValidatorCommissionChangeFinalized event raised by the ValidatorManager contract.
type ValidatorManagerValidatorCommissionChangeFinalized struct {
	Validator         common.Address
	OldCommissionRate uint8
	NewCommissionRate uint8
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterValidatorCommissionChangeFinalized is a free log retrieval operation binding the contract event 0xa40865ec905b139b9cdbd0566756b576b074c47d9dde9f62388b1d66d3e72a64.
//
// Solidity: event ValidatorCommissionChangeFinalized(address indexed validator, uint8 oldCommissionRate, uint8 newCommissionRate)
func (_ValidatorManager *ValidatorManagerFilterer) FilterValidatorCommissionChangeFinalized(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerValidatorCommissionChangeFinalizedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ValidatorCommissionChangeFinalized", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerValidatorCommissionChangeFinalizedIterator{contract: _ValidatorManager.contract, event: "ValidatorCommissionChangeFinalized", logs: logs, sub: sub}, nil
}

// WatchValidatorCommissionChangeFinalized is a free log subscription operation binding the contract event 0xa40865ec905b139b9cdbd0566756b576b074c47d9dde9f62388b1d66d3e72a64.
//
// Solidity: event ValidatorCommissionChangeFinalized(address indexed validator, uint8 oldCommissionRate, uint8 newCommissionRate)
func (_ValidatorManager *ValidatorManagerFilterer) WatchValidatorCommissionChangeFinalized(opts *bind.WatchOpts, sink chan<- *ValidatorManagerValidatorCommissionChangeFinalized, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ValidatorCommissionChangeFinalized", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerValidatorCommissionChangeFinalized)
				if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorCommissionChangeFinalized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCommissionChangeFinalized is a log parse operation binding the contract event 0xa40865ec905b139b9cdbd0566756b576b074c47d9dde9f62388b1d66d3e72a64.
//
// Solidity: event ValidatorCommissionChangeFinalized(address indexed validator, uint8 oldCommissionRate, uint8 newCommissionRate)
func (_ValidatorManager *ValidatorManagerFilterer) ParseValidatorCommissionChangeFinalized(log types.Log) (*ValidatorManagerValidatorCommissionChangeFinalized, error) {
	event := new(ValidatorManagerValidatorCommissionChangeFinalized)
	if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorCommissionChangeFinalized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerValidatorCommissionChangeInitiatedIterator is returned from FilterValidatorCommissionChangeInitiated and is used to iterate over the raw logs and unpacked data for ValidatorCommissionChangeInitiated events raised by the ValidatorManager contract.
type ValidatorManagerValidatorCommissionChangeInitiatedIterator struct {
	Event *ValidatorManagerValidatorCommissionChangeInitiated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerValidatorCommissionChangeInitiatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerValidatorCommissionChangeInitiated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerValidatorCommissionChangeInitiated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerValidatorCommissionChangeInitiatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerValidatorCommissionChangeInitiatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerValidatorCommissionChangeInitiated represents a ValidatorCommissionChangeInitiated event raised by the ValidatorManager contract.
type ValidatorManagerValidatorCommissionChangeInitiated struct {
	Validator         common.Address
	OldCommissionRate uint8
	NewCommissionRate uint8
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterValidatorCommissionChangeInitiated is a free log retrieval operation binding the contract event 0x9d9fe61047777339f4f4cb36a1f75ee90e3c6aa90c13abd3ffa07f6f86e0a307.
//
// Solidity: event ValidatorCommissionChangeInitiated(address indexed validator, uint8 oldCommissionRate, uint8 newCommissionRate)
func (_ValidatorManager *ValidatorManagerFilterer) FilterValidatorCommissionChangeInitiated(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerValidatorCommissionChangeInitiatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ValidatorCommissionChangeInitiated", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerValidatorCommissionChangeInitiatedIterator{contract: _ValidatorManager.contract, event: "ValidatorCommissionChangeInitiated", logs: logs, sub: sub}, nil
}

// WatchValidatorCommissionChangeInitiated is a free log subscription operation binding the contract event 0x9d9fe61047777339f4f4cb36a1f75ee90e3c6aa90c13abd3ffa07f6f86e0a307.
//
// Solidity: event ValidatorCommissionChangeInitiated(address indexed validator, uint8 oldCommissionRate, uint8 newCommissionRate)
func (_ValidatorManager *ValidatorManagerFilterer) WatchValidatorCommissionChangeInitiated(opts *bind.WatchOpts, sink chan<- *ValidatorManagerValidatorCommissionChangeInitiated, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ValidatorCommissionChangeInitiated", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerValidatorCommissionChangeInitiated)
				if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorCommissionChangeInitiated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCommissionChangeInitiated is a log parse operation binding the contract event 0x9d9fe61047777339f4f4cb36a1f75ee90e3c6aa90c13abd3ffa07f6f86e0a307.
//
// Solidity: event ValidatorCommissionChangeInitiated(address indexed validator, uint8 oldCommissionRate, uint8 newCommissionRate)
func (_ValidatorManager *ValidatorManagerFilterer) ParseValidatorCommissionChangeInitiated(log types.Log) (*ValidatorManagerValidatorCommissionChangeInitiated, error) {
	event := new(ValidatorManagerValidatorCommissionChangeInitiated)
	if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorCommissionChangeInitiated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerValidatorJailedIterator is returned from FilterValidatorJailed and is used to iterate over the raw logs and unpacked data for ValidatorJailed events raised by the ValidatorManager contract.
type ValidatorManagerValidatorJailedIterator struct {
	Event *ValidatorManagerValidatorJailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerValidatorJailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerValidatorJailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerValidatorJailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerValidatorJailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerValidatorJailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerValidatorJailed represents a ValidatorJailed event raised by the ValidatorManager contract.
type ValidatorManagerValidatorJailed struct {
	Validator common.Address
	ExpiresAt *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorJailed is a free log retrieval operation binding the contract event 0x95a398f2b6b2ad94f281708c97fe502386fc16adca43daed577a1e992a4cc814.
//
// Solidity: event ValidatorJailed(address indexed validator, uint128 expiresAt)
func (_ValidatorManager *ValidatorManagerFilterer) FilterValidatorJailed(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerValidatorJailedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ValidatorJailed", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerValidatorJailedIterator{contract: _ValidatorManager.contract, event: "ValidatorJailed", logs: logs, sub: sub}, nil
}

// WatchValidatorJailed is a free log subscription operation binding the contract event 0x95a398f2b6b2ad94f281708c97fe502386fc16adca43daed577a1e992a4cc814.
//
// Solidity: event ValidatorJailed(address indexed validator, uint128 expiresAt)
func (_ValidatorManager *ValidatorManagerFilterer) WatchValidatorJailed(opts *bind.WatchOpts, sink chan<- *ValidatorManagerValidatorJailed, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ValidatorJailed", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerValidatorJailed)
				if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorJailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJailed is a log parse operation binding the contract event 0x95a398f2b6b2ad94f281708c97fe502386fc16adca43daed577a1e992a4cc814.
//
// Solidity: event ValidatorJailed(address indexed validator, uint128 expiresAt)
func (_ValidatorManager *ValidatorManagerFilterer) ParseValidatorJailed(log types.Log) (*ValidatorManagerValidatorJailed, error) {
	event := new(ValidatorManagerValidatorJailed)
	if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorJailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerValidatorRegisteredIterator is returned from FilterValidatorRegistered and is used to iterate over the raw logs and unpacked data for ValidatorRegistered events raised by the ValidatorManager contract.
type ValidatorManagerValidatorRegisteredIterator struct {
	Event *ValidatorManagerValidatorRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerValidatorRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerValidatorRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerValidatorRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerValidatorRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerValidatorRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerValidatorRegistered represents a ValidatorRegistered event raised by the ValidatorManager contract.
type ValidatorManagerValidatorRegistered struct {
	Validator      common.Address
	Activated      bool
	CommissionRate uint8
	Assets         *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorRegistered is a free log retrieval operation binding the contract event 0x36f43e5c63d19ec0a34168ec0838b5bfae77656b9f5b94b896e9d2172a41f4fe.
//
// Solidity: event ValidatorRegistered(address indexed validator, bool activated, uint8 commissionRate, uint128 assets)
func (_ValidatorManager *ValidatorManagerFilterer) FilterValidatorRegistered(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerValidatorRegisteredIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ValidatorRegistered", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerValidatorRegisteredIterator{contract: _ValidatorManager.contract, event: "ValidatorRegistered", logs: logs, sub: sub}, nil
}

// WatchValidatorRegistered is a free log subscription operation binding the contract event 0x36f43e5c63d19ec0a34168ec0838b5bfae77656b9f5b94b896e9d2172a41f4fe.
//
// Solidity: event ValidatorRegistered(address indexed validator, bool activated, uint8 commissionRate, uint128 assets)
func (_ValidatorManager *ValidatorManagerFilterer) WatchValidatorRegistered(opts *bind.WatchOpts, sink chan<- *ValidatorManagerValidatorRegistered, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ValidatorRegistered", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerValidatorRegistered)
				if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorRegistered is a log parse operation binding the contract event 0x36f43e5c63d19ec0a34168ec0838b5bfae77656b9f5b94b896e9d2172a41f4fe.
//
// Solidity: event ValidatorRegistered(address indexed validator, bool activated, uint8 commissionRate, uint128 assets)
func (_ValidatorManager *ValidatorManagerFilterer) ParseValidatorRegistered(log types.Log) (*ValidatorManagerValidatorRegistered, error) {
	event := new(ValidatorManagerValidatorRegistered)
	if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerValidatorStoppedIterator is returned from FilterValidatorStopped and is used to iterate over the raw logs and unpacked data for ValidatorStopped events raised by the ValidatorManager contract.
type ValidatorManagerValidatorStoppedIterator struct {
	Event *ValidatorManagerValidatorStopped // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerValidatorStoppedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerValidatorStopped)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerValidatorStopped)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerValidatorStoppedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerValidatorStoppedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerValidatorStopped represents a ValidatorStopped event raised by the ValidatorManager contract.
type ValidatorManagerValidatorStopped struct {
	Validator common.Address
	StopsAt   *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorStopped is a free log retrieval operation binding the contract event 0xdee7e7274fb1911def379ceda542a2723358c99d6d1f89fcbdbe9e9d638d9961.
//
// Solidity: event ValidatorStopped(address indexed validator, uint256 stopsAt)
func (_ValidatorManager *ValidatorManagerFilterer) FilterValidatorStopped(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerValidatorStoppedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ValidatorStopped", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerValidatorStoppedIterator{contract: _ValidatorManager.contract, event: "ValidatorStopped", logs: logs, sub: sub}, nil
}

// WatchValidatorStopped is a free log subscription operation binding the contract event 0xdee7e7274fb1911def379ceda542a2723358c99d6d1f89fcbdbe9e9d638d9961.
//
// Solidity: event ValidatorStopped(address indexed validator, uint256 stopsAt)
func (_ValidatorManager *ValidatorManagerFilterer) WatchValidatorStopped(opts *bind.WatchOpts, sink chan<- *ValidatorManagerValidatorStopped, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ValidatorStopped", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerValidatorStopped)
				if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorStopped", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorStopped is a log parse operation binding the contract event 0xdee7e7274fb1911def379ceda542a2723358c99d6d1f89fcbdbe9e9d638d9961.
//
// Solidity: event ValidatorStopped(address indexed validator, uint256 stopsAt)
func (_ValidatorManager *ValidatorManagerFilterer) ParseValidatorStopped(log types.Log) (*ValidatorManagerValidatorStopped, error) {
	event := new(ValidatorManagerValidatorStopped)
	if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorStopped", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerValidatorUnjailedIterator is returned from FilterValidatorUnjailed and is used to iterate over the raw logs and unpacked data for ValidatorUnjailed events raised by the ValidatorManager contract.
type ValidatorManagerValidatorUnjailedIterator struct {
	Event *ValidatorManagerValidatorUnjailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerValidatorUnjailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerValidatorUnjailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerValidatorUnjailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerValidatorUnjailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerValidatorUnjailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerValidatorUnjailed represents a ValidatorUnjailed event raised by the ValidatorManager contract.
type ValidatorManagerValidatorUnjailed struct {
	Validator common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorUnjailed is a free log retrieval operation binding the contract event 0x9390b453426557da5ebdc31f19a37753ca04addf656d32f35232211bb2af3f19.
//
// Solidity: event ValidatorUnjailed(address indexed validator)
func (_ValidatorManager *ValidatorManagerFilterer) FilterValidatorUnjailed(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerValidatorUnjailedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ValidatorUnjailed", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerValidatorUnjailedIterator{contract: _ValidatorManager.contract, event: "ValidatorUnjailed", logs: logs, sub: sub}, nil
}

// WatchValidatorUnjailed is a free log subscription operation binding the contract event 0x9390b453426557da5ebdc31f19a37753ca04addf656d32f35232211bb2af3f19.
//
// Solidity: event ValidatorUnjailed(address indexed validator)
func (_ValidatorManager *ValidatorManagerFilterer) WatchValidatorUnjailed(opts *bind.WatchOpts, sink chan<- *ValidatorManagerValidatorUnjailed, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ValidatorUnjailed", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerValidatorUnjailed)
				if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorUnjailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorUnjailed is a log parse operation binding the contract event 0x9390b453426557da5ebdc31f19a37753ca04addf656d32f35232211bb2af3f19.
//
// Solidity: event ValidatorUnjailed(address indexed validator)
func (_ValidatorManager *ValidatorManagerFilterer) ParseValidatorUnjailed(log types.Log) (*ValidatorManagerValidatorUnjailed, error) {
	event := new(ValidatorManagerValidatorUnjailed)
	if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorUnjailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
