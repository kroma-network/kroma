// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IValidatorManagerConstructorParams is an auto generated low-level Go binding around an user-defined struct.
type IValidatorManagerConstructorParams struct {
	L2Oracle                       common.Address
	AssetManager                   common.Address
	TrustedValidator               common.Address
	CommissionRateMinChangeSeconds *big.Int
	RoundDurationSeconds           *big.Int
	JailPeriodSeconds              *big.Int
	JailThreshold                  *big.Int
	MaxOutputFinalizations         *big.Int
	BaseReward                     *big.Int
	MinRegisterAmount              *big.Int
	MinActivateAmount              *big.Int
}

// ValidatorManagerMetaData contains all meta data concerning the ValidatorManager contract.
var ValidatorManagerMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_constructorParams\",\"type\":\"tuple\",\"internalType\":\"structIValidatorManager.ConstructorParams\",\"components\":[{\"name\":\"_l2Oracle\",\"type\":\"address\",\"internalType\":\"contractL2OutputOracle\"},{\"name\":\"_assetManager\",\"type\":\"address\",\"internalType\":\"contractAssetManager\"},{\"name\":\"_trustedValidator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_commissionRateMinChangeSeconds\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_roundDurationSeconds\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_jailPeriodSeconds\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_jailThreshold\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_maxOutputFinalizations\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_baseReward\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_minRegisterAmount\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_minActivateAmount\",\"type\":\"uint128\",\"internalType\":\"uint128\"}]}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"ASSET_MANAGER\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractAssetManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"BASE_REWARD\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"BOOSTED_REWARD_DENOM\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"BOOSTED_REWARD_NUMERATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"COMMISSION_RATE_DENOM\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"COMMISSION_RATE_MIN_CHANGE_SECONDS\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"JAIL_PERIOD_SECONDS\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"JAIL_THRESHOLD\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"L2_ORACLE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractL2OutputOracle\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MAX_OUTPUT_FINALIZATIONS\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MIN_ACTIVATE_AMOUNT\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MIN_REGISTER_AMOUNT\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROUND_DURATION_SECONDS\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"TRUSTED_VALIDATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"activateValidator\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"activatedValidatorCount\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"activatedValidatorTotalWeight\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint120\",\"internalType\":\"uint120\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"afterSubmitL2Output\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"assertCanSubmitOutput\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"changeCommissionRate\",\"inputs\":[{\"name\":\"newCommissionRate\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"checkSubmissionEligibility\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getCommissionMaxChangeRate\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getCommissionRate\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStatus\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"enumIValidatorManager.ValidatorStatus\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getWeight\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint120\",\"internalType\":\"uint120\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"inJail\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"jailExpiresAt\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"nextValidator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"noSubmissionCount\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerValidator\",\"inputs\":[{\"name\":\"assets\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"commissionRate\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"commissionMaxChangeRate\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"slash\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"winner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"loser\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"tryUnjail\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"force\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateValidatorTree\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tryRemove\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"version\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"ChallengeRewardDistributed\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RewardDistributed\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"validatorReward\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"},{\"name\":\"baseReward\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"},{\"name\":\"boostedReward\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Slashed\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"loser\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorActivated\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"activatedAt\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorCommissionRateChanged\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"oldCommissionRate\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"},{\"name\":\"newCommissionRate\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorJailed\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"expiresAt\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorRegistered\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"activated\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"},{\"name\":\"commissionRate\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"},{\"name\":\"commissionMaxChangeRate\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"},{\"name\":\"assets\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorStopped\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"stopsAt\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorUnjailed\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"CommissionChangeRateExceeded\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ImproperValidatorStatus\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InsufficientAsset\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidConstructorParams\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"MaxCommissionChangeRateExceeded\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"MaxCommissionRateExceeded\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotAllowedCaller\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotElapsedCommissionChangePeriod\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotElapsedJailPeriod\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotSelectedPriorityValidator\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"SameCommissionRate\",\"inputs\":[]}]",
	Bin: "0x6101e06040523480156200001257600080fd5b50604051620051cf380380620051cf833981016040819052620000359162000171565b8061014001516001600160801b03168161012001516001600160801b031611156200007357604051631510b77f60e01b815260040160405180910390fd5b80516001600160a01b0390811660809081526020830151821660a0908152604084015190921660c0908152610120808501516001600160801b0390811660e09081526101408088015183166101009081526060890151841690945294870151821690945293850151841661016052908401518316610180529083015182166101a05290910151166101c05262000264565b60405161016081016001600160401b03811182821017156200013657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200015457600080fd5b919050565b80516001600160801b03811681146200015457600080fd5b600061016082840312156200018557600080fd5b6200018f62000104565b6200019a836200013c565b8152620001aa602084016200013c565b6020820152620001bd604084016200013c565b6040820152620001d06060840162000159565b6060820152620001e36080840162000159565b6080820152620001f660a0840162000159565b60a08201526200020960c0840162000159565b60c08201526200021c60e0840162000159565b60e08201526101006200023181850162000159565b908201526101206200024584820162000159565b908201526101406200025984820162000159565b908201529392505050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c051614dcc62000403600039600081816102e001528181614263015281816142a501526145920152600081816107280152612aeb01526000818161035e0152613041015260008181610503015261339d0152600081816103850152610cf601526000818161069e0152610f820152600081816105ef01528181610ab301526115840152600081816102b90152818161099e01526112ef0152600081816103370152610d5301526000818161045501528181610892015281816109d201528181610ae701528181610b8c01528181610e70015281816114cb015281816115ec01528181611b3101528181611d4101528181612d0201528181612e3e015261450d01526000818161022f01528181610c5d015281816111c8015281816116eb015281816118de0152818161197001528181611a1c01528181611c12015281816128e001528181612966015281816129ea01528181612b7001528181612c1701528181612f9b0152818161313e01526131f20152614dcc6000f3fe608060405234801561001057600080fd5b50600436106102255760003560e01c8063891aab741161012a578063b91b2723116100bd578063cdff5e191161008c578063dff221b511610071578063dff221b5146106c0578063e0cc26a2146106f1578063e7816b7f1461072357600080fd5b8063cdff5e191461067c578063dea152541461069957600080fd5b8063b91b2723146102ac578063b9551f8214610611578063be11934714610656578063be995dc21461066957600080fd5b8063abeba449116100f9578063abeba449146104fe578063ac6c525114610525578063af6ca7621461059a578063b2653fe3146105ea57600080fd5b8063891aab741461048a5780638ee4b6021461049d578063970531c1146104b05780639d6b2e37146104eb57600080fd5b80633a549046116101bd57806354fd4d501161018c5780635bab847f116101715780635bab847f1461043d5780636874e0421461045057806388576dc91461047757600080fd5b806354fd4d50146103a757806356b65e97146103f057600080fd5b80633a5490461461032a5780633ee4d4a31461033257806342223ae9146103595780634cca5e6c1461038057600080fd5b80631796e52e116101f95780631796e52e146102b457806322009af6146102db578063263a34021461030257806330ccebb51461030a57600080fd5b80621c2ff61461022a578063020810c31461026e5780630763fa7e14610283578063110d6069146102ac575b600080fd5b6102517f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61028161027c3660046148c0565b61074a565b005b61028b602881565b6040516fffffffffffffffffffffffffffffffff9091168152602001610265565b61028b606481565b61028b7f000000000000000000000000000000000000000000000000000000000000000081565b61028b7f000000000000000000000000000000000000000000000000000000000000000081565b6102816107d6565b61031d6103183660046148c0565b61093e565b604051610265919061490c565b610251610c47565b6102517f000000000000000000000000000000000000000000000000000000000000000081565b61028b7f000000000000000000000000000000000000000000000000000000000000000081565b61028b7f000000000000000000000000000000000000000000000000000000000000000081565b6103e36040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b604051610265919061494d565b61042d6103fe3660046148c0565b6001600160a01b03166000908152600560205260409020546fffffffffffffffffffffffffffffffff16151590565b6040519015158152602001610265565b61028161044b3660046149ce565b610d75565b6102517f000000000000000000000000000000000000000000000000000000000000000081565b610281610485366004614a1d565b610eea565b6102816104983660046148c0565b6111bd565b6102816104ab366004614a56565b61129a565b61028b6104be3660046148c0565b6001600160a01b03166000908152600560205260409020546fffffffffffffffffffffffffffffffff1690565b6102816104f93660046149ce565b611682565b61028b7f000000000000000000000000000000000000000000000000000000000000000081565b61057a6105333660046148c0565b6001600160a01b031660009081526003602090815260408083205463ffffffff168352600290915290206001015461010090046effffffffffffffffffffffffffffff1690565b6040516effffffffffffffffffffffffffffff9091168152602001610265565b6001805468010000000000000000900463ffffffff166000908152600260205260409020015470010000000000000000000000000000000090046effffffffffffffffffffffffffffff1661057a565b61028b7f000000000000000000000000000000000000000000000000000000000000000081565b61064461061f3660046148c0565b6001600160a01b03166000908152600460205260409020546301000000900460ff1690565b60405160ff9091168152602001610265565b610281610664366004614a9b565b6118d3565b610281610677366004614ab4565b611a1a565b610684611e14565b60405163ffffffff9091168152602001610265565b61028b7f000000000000000000000000000000000000000000000000000000000000000081565b6106446106ce3660046148c0565b6001600160a01b0316600090815260046020526040902054610100900460ff1690565b6106446106ff3660046148c0565b6001600160a01b031660009081526004602052604090205462010000900460ff1690565b61028b7f000000000000000000000000000000000000000000000000000000000000000081565b60056107558261093e565b6005811115610766576107666148dd565b14158061079c57506001600160a01b0381166000908152600560205260409020546fffffffffffffffffffffffffffffffff1615155b156107d3576040517f197299a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60036107e13361093e565b60058111156107f2576107f26148dd565b14158061081f5750336000908152600560205260409020546fffffffffffffffffffffffffffffffff1615155b15610856576040517f197299a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f8abf0af00000000000000000000000000000000000000000000000000000000081523360048201819052610907916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638abf0af0906024015b602060405180830381865afa1580156108da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fe9190614af6565b60019190611e39565b60405142815233907ff33a24861b76047debce215c7ae4915a9befc5d870e97efbd4152df23c72112a9060200160405180910390a2565b6001600160a01b03811660009081526004602052604081205460ff1661096657506000919050565b6040517f981cee530000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301527f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff16917f00000000000000000000000000000000000000000000000000000000000000009091169063981cee5390602401602060405180830381865afa158015610a1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3f9190614af6565b6fffffffffffffffffffffffffffffffff161015610a5f57506001919050565b6001600160a01b03828116600081815260036020526040908190205490517f12188543000000000000000000000000000000000000000000000000000000008152600481019290925263ffffffff161515917f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff16917f000000000000000000000000000000000000000000000000000000000000000090911690631218854390602401602060405180830381865afa158015610b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b549190614af6565b6040517f8abf0af00000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301527f00000000000000000000000000000000000000000000000000000000000000001690638abf0af090602401602060405180830381865afa158015610bd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf79190614af6565b610c019190614b42565b6fffffffffffffffffffffffffffffffff161015610c305780610c275750600292915050565b50600492915050565b80610c3e5750600392915050565b50600592915050565b600080546001600160a01b031615610d505760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380446bd26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdd9190614b73565b9050804210610d3f576000610cf28242614b8c565b90507f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff16811115610d3d576001600160a01b039250505090565b505b50506000546001600160a01b031690565b507f000000000000000000000000000000000000000000000000000000000000000090565b6000610d808361093e565b9050818015610dbb57506001816005811115610d9e57610d9e6148dd565b1480610dbb57506004816005811115610db957610db96148dd565b145b15610e1957610dcb6001846123be565b15610e1457826001600160a01b03167fdee7e7274fb1911def379ceda542a2723358c99d6d1f89fcbdbe9e9d638d996142604051610e0b91815260200190565b60405180910390a25b505050565b6004816005811115610e2d57610e2d6148dd565b10610e14576040517f8abf0af00000000000000000000000000000000000000000000000000000000081526001600160a01b038085166004830152610ee49185917f00000000000000000000000000000000000000000000000000000000000000001690638abf0af090602401602060405180830381865afa158015610eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edb9190614af6565b60019190612561565b50505050565b6002610ef53361093e565b6005811115610f0657610f066148dd565b1080610f325750336000908152600560205260409020546fffffffffffffffffffffffffffffffff1615155b15610f69576040517f197299a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260046020526040902080544290610fc1907f00000000000000000000000000000000000000000000000000000000000000009064010000000090046fffffffffffffffffffffffffffffffff16614ba3565b6fffffffffffffffffffffffffffffffff16111561100b576040517f7d7a4d1600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606460ff83161115611049576040517f406b265300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805460ff620100009091048116908316819003611092576040517f150393f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160ff168460ff16116110b0576110ab8483614bd7565b6110ba565b6110ba8285614bd7565b835490915060ff630100000090910481169082161115611106576040517f9ed4fa4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82547fffffffffffffffffffffffff00000000000000000000000000000000ff00ffff166201000060ff8681169182027fffffffffffffffffffffffff00000000000000000000000000000000ffffffff1692909217640100000000426fffffffffffffffffffffffffffffffff1602178555604080519285168352602083019190915233917fc0b29b9b824f7a62d93fde5832bb8307fd62594d0a08d96d533407a0a147ec48910160405180910390a250505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461121f576040517f9d02a7c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611229610c47565b90506001600160a01b03808216148015906112565750806001600160a01b0316826001600160a01b031614155b1561128d576040517fc625317600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112968261074a565b5050565b60006112a53361093e565b60058111156112b6576112b66148dd565b146112ed576040517f197299a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff16836fffffffffffffffffffffffffffffffff16101561136b576040517f24f21b1500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606460ff831611156113a9576040517f406b265300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606460ff821611156113e7576040517f4143808b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360008181526004602081905260409182902080546fffffffffffffffffffffffffffffffff4216640100000000027fffffffffffffffffffffffff00000000000000000000000000000000ffffffff60ff888116630100000002919091167fffffffffffffffffffffffff0000000000000000000000000000000000ffffff918a1662010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff0090941693909317600117169190911717815591517fd7f1a3d800000000000000000000000000000000000000000000000000000000815291927f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169263d7f1a3d89261152d92918991016001600160a01b039290921682526fffffffffffffffffffffffffffffffff16602082015260400190565b6020604051808303816000875af115801561154c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115709190614af6565b506fffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081169085161080159061161b576040517f8abf0af0000000000000000000000000000000000000000000000000000000008152336004820181905261161b916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638abf0af0906024016108bd565b60408051821515815260ff86811660208301528516818301526fffffffffffffffffffffffffffffffff87166060820152905133917f04ba0c4d7cbac9138f7b73ec9fef796e4ad320bf5fb204f080f81fd59c2d48b9919081900360800190a25050505050565b6001600160a01b0382166000908152600560205260409020546fffffffffffffffffffffffffffffffff166116e3576040517f197299a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80156117ba577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639e45e8f46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176b9190614bfa565b6001600160a01b0316336001600160a01b0316146117b5576040517f9d02a7c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61186b565b336001600160a01b038316146117fc576040517f9d02a7c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038216600090815260056020526040902054426fffffffffffffffffffffffffffffffff9091161115611862576040517f1dfc20f100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61186b82612876565b6001600160a01b03821660008181526005602052604080822080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000169055517f9390b453426557da5ebdc31f19a37753ca04addf656d32f35232211bb2af3f199190a25050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611935576040517f9d02a7c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61193d6128db565b506040517fb0ea09a8000000000000000000000000000000000000000000000000000000008152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b0ea09a890602401602060405180830381865afa1580156119bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e39190614bfa565b6000549091506001600160a01b0390811690821603611a0a57611a0581612876565b611a12565b611a12613015565b6112966130eb565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639e45e8f46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9c9190614bfa565b6001600160a01b0316336001600160a01b031614611ae6576040517f9d02a7c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f3ecf0ced0000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152600060248301819052600160448401529182917f00000000000000000000000000000000000000000000000000000000000000001690633ecf0ced9060640160408051808303816000875af1158015611b79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9d9190614c17565b91509150611bac836001610d75565b6001600160a01b038316857f1237821480ce4d75f917bc39d1641eb17a5e09a2d5bf982cdd8cb2561aa28e68611be28486614ba3565b6040516fffffffffffffffffffffffffffffffff909116815260200160405180910390a3611c0f83613385565b847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f403838d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c929190614b73565b11611cea57600085815260066020526040902080546fffffffffffffffffffffffffffffffff8082168401167fffffffffffffffffffffffffffffffff00000000000000000000000000000000909116179055611e0d565b6040517f3ecf0ced0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301526fffffffffffffffffffffffffffffffff83166024830152600060448301527f00000000000000000000000000000000000000000000000000000000000000001690633ecf0ced9060640160408051808303816000875af1158015611d89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dad9190614c17565b5050611dba846000610d75565b6040516fffffffffffffffffffffffffffffffff821681526001600160a01b0385169086907fd537f9e63e8da05cdb52f795e1c79d7b163e2517d5229375474dbe60b48cfa149060200160405180910390a35b5050505050565b600154600090611e349063ffffffff640100000000820481169116614c46565b905090565b60006040518060e00160405280846001600160a01b03168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600115158152602001836effffffffffffffffffffffffffffff168152602001836effffffffffffffffffffffffffffff16815250905083600001600081819054906101000a900463ffffffff168092919060010191906101000a81548163ffffffff021916908363ffffffff1602179055505060008460000160009054906101000a900463ffffffff169050818560010160008363ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601c6101000a81548163ffffffff021916908363ffffffff16021790555060808201518160010160006101000a81548160ff02191690831515021790555060a08201518160010160016101000a8154816effffffffffffffffffffffffffffff02191690836effffffffffffffffffffffffffffff16021790555060c08201518160010160106101000a8154816effffffffffffffffffffffffffffff02191690836effffffffffffffffffffffffffffff16021790555090505080856002016000866001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055508460000160089054906101000a900463ffffffff1663ffffffff1660000361211457845463ffffffff90911668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff90911617909355505050565b845468010000000000000000900463ffffffff165b63ffffffff808216600090815260018089016020526040822090810180546effffffffffffffffffffffffffffff70010000000000000000000000000000000080830482168b01909116027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff90911617905580549092600160c01b9091041690036122505763ffffffff838116600081815260018a016020526040902080547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000938616939093029290921790915581547fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b9091021781556122478784613455565b50505050505050565b8054600160e01b900463ffffffff166000036123265763ffffffff838116600081815260018a8101602052604090912080547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000948716949094029390931783559190910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905581547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e01b9091021781556122478784613455565b805463ffffffff600160e01b8204811660009081526001808b016020526040808320820154600160c01b909504909316825291902001546effffffffffffffffffffffffffffff700100000000000000000000000000000000928390048116929091041611156123a6578054600160e01b900463ffffffff1691506123b8565b8054600160c01b900463ffffffff1691505b50612129565b6001600160a01b038116600090815260028301602052604081205463ffffffff168082036123f057600091505061255b565b6001600160a01b03831660009081526002850160209081526040808320805463ffffffff1916905563ffffffff8481168452600180890190935292208054910154740100000000000000000000000000000000000000009091049091169061010090046effffffffffffffffffffffffffffff165b63ffffffff8216156125075763ffffffff91821660009081526001808801602052604090912090810180546effffffffffffffffffffffffffffff7001000000000000000000000000000000008083048216869003909116027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9091161790555474010000000000000000000000000000000000000000900490911690612465565b6125118684613661565b50508354600163ffffffff64010000000080840482168301909116027fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff9092169190911785559150505b92915050565b6001600160a01b038216600090815260028401602052604081205463ffffffff1680820361259357600091505061286f565b63ffffffff80821660009081526001808801602052604090912090810180546effffffffffffffffffffffffffffff8781166101008181027fffffffffffffffffffffffffffffffff000000000000000000000000000000ff85161790945593549290910416927401000000000000000000000000000000000000000090910416908210156127435763ffffffff83166000908152600188810160205260409091200180547fff000000000000000000000000000000ffffffffffffffffffffffffffffffff8116848803700100000000000000000000000000000000928390046effffffffffffffffffffffffffffff908116820116909202179091555b63ffffffff8216156127335763ffffffff91821660009081526001808a01602052604090912090810180546effffffffffffffffffffffffffffff70010000000000000000000000000000000080830482168601909116027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9091161790555474010000000000000000000000000000000000000000900490911690612692565b5061273e8784613455565b612867565b63ffffffff83166000908152600188810160205260409091200180547fff000000000000000000000000000000ffffffffffffffffffffffffffffffff8116878503700100000000000000000000000000000000928390046effffffffffffffffffffffffffffff90811682900316909202179091555b63ffffffff82161561285c5763ffffffff91821660009081526001808a01602052604090912090810180546effffffffffffffffffffffffffffff7001000000000000000000000000000000008083048216869003909116027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff90911617905554740100000000000000000000000000000000000000009004909116906127ba565b506128678784613ded565b600193505050505b9392505050565b6001600160a01b038116600090815260046020526040902054610100900460ff16156107d3576001600160a01b0316600090815260046020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f403838d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561293c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129609190614b73565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166369f16eec6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e69190614b73565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b98debbf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6a9190614bfa565b6001600160a01b031663ad36d6cc836040518263ffffffff1660e01b8152600401612a9791815260200190565b602060405180830381865afa158015612ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad89190614c63565b612ae55760009250505090565b6000805b7f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff16108015612b3c5750828411155b15612f54576040517f33727c4d000000000000000000000000000000000000000000000000000000008152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906333727c4d90602401602060405180830381865afa158015612bbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612be39190614c63565b15612f54576040517fb0ea09a8000000000000000000000000000000000000000000000000000000008152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b0ea09a890602401602060405180830381865afa158015612c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c8a9190614bfa565b90506000806000612c9a84614218565b6040517fad4294510000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301526fffffffffffffffffffffffffffffffff858116602484015284811660448401528316606483015293965091945092507f00000000000000000000000000000000000000000000000000000000000000009091169063ad42945190608401600060405180830381600087803b158015612d4857600080fd5b505af1158015612d5c573d6000803e3d6000fd5b5050604080516fffffffffffffffffffffffffffffffff8581168252878116602083015286168183015290516001600160a01b03881693507f36f11936e926f4c5f13247a0f85bfd1361293f182bc6a64bfff082b39aec64d992509081900360600190a26000878152600660205260409020546fffffffffffffffffffffffffffffffff168015612f34576040517f3ecf0ced0000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301526fffffffffffffffffffffffffffffffff83166024830152600060448301527f00000000000000000000000000000000000000000000000000000000000000001690633ecf0ced9060640160408051808303816000875af1158015612e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eaa9190614c17565b505060008881526006602090815260409182902080547fffffffffffffffffffffffffffffffff0000000000000000000000000000000016905590516fffffffffffffffffffffffffffffffff831681526001600160a01b038716918a917fd537f9e63e8da05cdb52f795e1c79d7b163e2517d5229375474dbe60b48cfa14910160405180910390a35b612f3f856000610d75565b87600101975085600101955050505050612ae9565b6fffffffffffffffffffffffffffffffff82161561300a576040517f9902cdc0000000000000000000000000000000000000000000000000000000008152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639902cdc090602401600060405180830381600087803b158015612fe757600080fd5b505af1158015612ffb573d6000803e3d6000fd5b50505050600194505050505090565b600094505050505090565b6000546001600160a01b03161561309557600080546001600160a01b03168152600460205260409020547f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff1661010090910460ff161061309757600054613095906001600160a01b0316613385565b565b600080546001600160a01b03168152600460205260409020805460ff6101008083048216600101909116027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116179055565b6001805468010000000000000000900463ffffffff1660009081526002602052604081209091015470010000000000000000000000000000000090046effffffffffffffffffffffffffffff16905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f403838d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561319a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131be9190614b73565b90506000826effffffffffffffffffffffffffffff161180156131e15750600081115b156133595760006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a25ae557613222600185614b8c565b6040518263ffffffff1660e01b815260040161324091815260200190565b608060405180830381865afa15801561325d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132819190614c80565b9050600083826020015143414460014361329b9190614b8c565b6040805160208101969096528501939093527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606092831b1691840191909152607483015240609482015260b4016040516020818303038152906040528051906020012060001c61330c9190614d52565b9050613319600182614301565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055506112969050565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555050565b60006133c36fffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001642614da7565b6001600160a01b03831660008181526005602090815260409182902080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff8616908117909155915191825292935090917f95a398f2b6b2ad94f281708c97fe502386fc16adca43daed577a1e992a4cc814910160405180910390a25050565b63ffffffff80821660009081526001840160205260408082208054740100000000000000000000000000000000000000009004909316825290205b815474010000000000000000000000000000000000000000900463ffffffff16158015906134e35750600180820154908301546effffffffffffffffffffffffffffff6101009283900481169290910416115b15610ee457815481547fffffffffffffffffffffffff00000000000000000000000000000000000000008083166001600160a01b03928316178555835416918116919091178255600180840180548483018054610100908190046effffffffffffffffffffffffffffff9081168083027fffffffffffffffffffffffffffffffff000000000000000000000000000000ff80871691909117875584549584900483169384029516949094179092558354929003700100000000000000000000000000000000808404831691909103909116027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9091161790558354821660009081526002870160209081526040808320805463ffffffff998a1663ffffffff199182161790915587549654909516835280832080549095167401000000000000000000000000000000000000000096879004891617909455945484900486168082529187019094528184208054939093049094168352909120613490565b63ffffffff8082166000908152600184016020526040812080549092600160c01b909104169003613944578054600160e01b900463ffffffff166000036137f357805474010000000000000000000000000000000000000000900463ffffffff166000036136f45782547fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff1683556137af565b600181015460ff161561375c57805474010000000000000000000000000000000000000000900463ffffffff166000908152600184016020526040902080547fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff1690556137af565b805474010000000000000000000000000000000000000000900463ffffffff166000908152600184016020526040902080547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690555b5063ffffffff1660009081526001918201602052604081209081550180547fff00000000000000000000000000000000000000000000000000000000000000169055565b805463ffffffff600160e01b80830482166000908152600180880160209081526040808420547fffffffffffffffffffffffff00000000000000000000000000000000000000009097166001600160a01b0397881617808955859004861684528084208084018054948a0180546effffffffffffffffffffffffffffff6101009788900481169097027fffffffffffffffffffffffffffffffff000000000000000000000000000000ff8216811783559254700100000000000000000000000000000000908190049097169096027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9092167fff000000000000000000000000000000000000000000000000000000000000ff9096169590951717909355915490951682526002880190945292909220805494821663ffffffff199095169490941790935581540490911690613de7565b8054600160e01b900463ffffffff16600003613aab57805463ffffffff600160c01b80830482166000908152600180880160209081526040808420547fffffffffffffffffffffffff00000000000000000000000000000000000000009097166001600160a01b0397881617808955859004861684528084208084018054948a0180546effffffffffffffffffffffffffffff6101009788900481169097027fffffffffffffffffffffffffffffffff000000000000000000000000000000ff8216811783559254700100000000000000000000000000000000908190049097169096027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9092167fff000000000000000000000000000000000000000000000000000000000000ff9096169590951717909355915490951682526002880190945292909220805494821663ffffffff199095169490941790935581540490911690613de7565b805463ffffffff600160e01b82048116600090815260018087016020526040808320820154600160c01b909504909316825291902001546effffffffffffffffffffffffffffff61010092839004811692909104161115613c7957805463ffffffff600160c01b80830482166000908152600180880160209081526040808420547fffffffffffffffffffffffff00000000000000000000000000000000000000009097166001600160a01b03978816178089558581048716855281852080850180548b870180546effffffffffffffffffffffffffffff6101009384900481169093027fffffffffffffffffffffffffffffffff000000000000000000000000000000ff821681178355600160e01b9096048c168a52868a20909801549254700100000000000000000000000000000000908190048316938190048316939093019091169091027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9093167fff000000000000000000000000000000000000000000000000000000000000ff9096169590951791909117909355915490951682526002880190945292909220805494821663ffffffff199095169490941790935581540490911690613de7565b805463ffffffff600160e01b80830482166000908152600180880160209081526040808420547fffffffffffffffffffffffff00000000000000000000000000000000000000009097166001600160a01b03978816178089558581048716855281852080850180548b870180546effffffffffffffffffffffffffffff6101009384900481169093027fffffffffffffffffffffffffffffffff000000000000000000000000000000ff8216811783559354600160c01b9096048c168a52868a2090980154700100000000000000000000000000000000908190048316958190048316959095019091169093027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9091167fff000000000000000000000000000000000000000000000000000000000000ff90961695909517949094179055915490951682526002880190945292909220805494821663ffffffff1990951694909417909355815404909116905b50613661565b5b63ffffffff8082166000908152600180850160205260408083208054600160e01b810486168552828520840154600160c01b90910490951684529220015490916effffffffffffffffffffffffffffff61010091829004811691909204909116111561403657600180820154825463ffffffff600160c01b90910416600090815285830160205260409020909101546effffffffffffffffffffffffffffff61010092839004811692909104161115610e1457805463ffffffff600160c01b80830482166000908152600187810160208181526040808520547fffffffffffffffffffffffff0000000000000000000000000000000000000000808a166001600160a01b0392831617808c558890048916875282872080549091169982169990991790985583890180548a548890048916875282872086018054610100908190046effffffffffffffffffffffffffffff9081168083027fffffffffffffffffffffffffffffffff000000000000000000000000000000ff80871691909117909655835494839004821692830294909516939093179091558b548990048a168852838820909601805496909203700100000000000000000000000000000000808804831691909103909116027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9095169490941790935587548716845260028a0180825283852080549a881663ffffffff199b8c1617905588548690048716808652928252838520549097168452959095529020805490951690921790935590540416613dee565b600180820154825463ffffffff600160e01b90910416600090815285830160205260409020909101546effffffffffffffffffffffffffffff61010092839004811692909104161115610e1457805463ffffffff600160e01b80830482166000908152600187810160208181526040808520547fffffffffffffffffffffffff0000000000000000000000000000000000000000808a166001600160a01b0392831617808c558890048916875282872080549091169982169990991790985583890180548a548890048916875282872086018054610100908190046effffffffffffffffffffffffffffff9081168083027fffffffffffffffffffffffffffffffff000000000000000000000000000000ff80871691909117909655835494839004821692830294909516939093179091558b548990048a168852838820909601805496909203700100000000000000000000000000000000808804831691909103909116027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9095169490941790935587548716845260028a0180825283852080549a881663ffffffff199b8c1617905588548690048716808652928252838520549097168452959095529020805490951690921790935590540416613dee565b6001600160a01b0381166000908152600460205260408120548190819062010000900460ff1681614248866144d0565b905060008061428d6fffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000850116856064614606565b90506142d06fffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016606486810390614606565b91506142f36fffffffffffffffffffffffffffffffff8416606486810390614606565b919891975095509350505050565b815460009068010000000000000000900463ffffffff165b63ffffffff80821660009081526001808701602052604080832054600160c01b9004909316825291902001546effffffffffffffffffffffffffffff80851670010000000000000000000000000000000090920416111561439a5763ffffffff9081166000908152600185016020526040902054600160c01b900416614319565b63ffffffff8181166000818152600187810160205260408083208054600160c01b9004909516835282208101549290915291909101547001000000000000000000000000000000009091046effffffffffffffffffffffffffffff908116909403938481166101009092041611156144335763ffffffff1660009081526001840160205260409020546001600160a01b0316905061255b565b63ffffffff818116600090815260018681016020526040808320808301549054600160e01b9004909416835290912001546101009091046effffffffffffffffffffffffffffff908116909403938481167001000000000000000000000000000000009092041611156144c65763ffffffff9081166000908152600185016020526040902054600160e01b900416614319565b600091505061255b565b6040517f913f1a9f0000000000000000000000000000000000000000000000000000000081526001600160a01b03828116600483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063913f1a9f90602401602060405180830381865afa158015614554573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145789190614af6565b905060006145bb6fffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660286064614606565b90506145fe816fffffffffffffffffffffffffffffffff16650100000000006145f7856fffffffffffffffffffffffffffffffff1660646146ba565b9190614781565b949350505050565b6000838302608081901c6fffffffffffffffffffffffffffffffff84161161468f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f55696e743132384d6174683a206d756c446976206f766572666c6f770000000060448201526064015b60405180910390fd5b826fffffffffffffffffffffffffffffffff1681816146b0576146b0614d23565b0495945050505050565b60008083831080156146d357600181146146e6576146f5565b65010000000000850284900491506146f5565b65010000000000840285900491505b506402ef6c3406818002602890811c808402821c808202831c808302841c808402851c938402851c95909502841c641da06a6e33909502841c6455232d2bb2909202841c640d4ca0c283909302841c643177d95571909102841c64fffe4bcada90960290931c949094019190910103919091030390508183111561255b576501921fb544430392915050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff858709858702925082811083820303915050806000036147d9578382816147cf576147cf614d23565b049250505061286f565b808411614842576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4d6174683a206d756c446976206f766572666c6f7700000000000000000000006044820152606401614686565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6001600160a01b03811681146107d357600080fd5b6000602082840312156148d257600080fd5b813561286f816148ab565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6020810160068310614947577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b600060208083528351808285015260005b8181101561497a5785810183015185820160400152820161495e565b8181111561498c576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b80151581146107d357600080fd5b600080604083850312156149e157600080fd5b82356149ec816148ab565b915060208301356149fc816149c0565b809150509250929050565b803560ff81168114614a1857600080fd5b919050565b600060208284031215614a2f57600080fd5b61286f82614a07565b6fffffffffffffffffffffffffffffffff811681146107d357600080fd5b600080600060608486031215614a6b57600080fd5b8335614a7681614a38565b9250614a8460208501614a07565b9150614a9260408501614a07565b90509250925092565b600060208284031215614aad57600080fd5b5035919050565b600080600060608486031215614ac957600080fd5b833592506020840135614adb816148ab565b91506040840135614aeb816148ab565b809150509250925092565b600060208284031215614b0857600080fd5b815161286f81614a38565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006fffffffffffffffffffffffffffffffff83811690831681811015614b6b57614b6b614b13565b039392505050565b600060208284031215614b8557600080fd5b5051919050565b600082821015614b9e57614b9e614b13565b500390565b60006fffffffffffffffffffffffffffffffff808316818516808303821115614bce57614bce614b13565b01949350505050565b600060ff821660ff841680821015614bf157614bf1614b13565b90039392505050565b600060208284031215614c0c57600080fd5b815161286f816148ab565b60008060408385031215614c2a57600080fd5b8251614c3581614a38565b60208401519092506149fc81614a38565b600063ffffffff83811690831681811015614b6b57614b6b614b13565b600060208284031215614c7557600080fd5b815161286f816149c0565b600060808284031215614c9257600080fd5b6040516080810181811067ffffffffffffffff82111715614cdc577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040528251614cea816148ab565b8152602083810151908201526040830151614d0481614a38565b60408201526060830151614d1781614a38565b60608201529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006effffffffffffffffffffffffffffff80841680614d9b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b92169190910692915050565b60008219821115614dba57614dba614b13565b50019056fea164736f6c634300080f000a",
}

// ValidatorManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorManagerMetaData.ABI instead.
var ValidatorManagerABI = ValidatorManagerMetaData.ABI

// ValidatorManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorManagerMetaData.Bin instead.
var ValidatorManagerBin = ValidatorManagerMetaData.Bin

// DeployValidatorManager deploys a new Ethereum contract, binding an instance of ValidatorManager to it.
func DeployValidatorManager(auth *bind.TransactOpts, backend bind.ContractBackend, _constructorParams IValidatorManagerConstructorParams) (common.Address, *types.Transaction, *ValidatorManager, error) {
	parsed, err := ValidatorManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorManagerBin), backend, _constructorParams)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorManager{ValidatorManagerCaller: ValidatorManagerCaller{contract: contract}, ValidatorManagerTransactor: ValidatorManagerTransactor{contract: contract}, ValidatorManagerFilterer: ValidatorManagerFilterer{contract: contract}}, nil
}

// ValidatorManager is an auto generated Go binding around an Ethereum contract.
type ValidatorManager struct {
	ValidatorManagerCaller     // Read-only binding to the contract
	ValidatorManagerTransactor // Write-only binding to the contract
	ValidatorManagerFilterer   // Log filterer for contract events
}

// ValidatorManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorManagerSession struct {
	Contract     *ValidatorManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorManagerCallerSession struct {
	Contract *ValidatorManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// ValidatorManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorManagerTransactorSession struct {
	Contract     *ValidatorManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// ValidatorManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorManagerRaw struct {
	Contract *ValidatorManager // Generic contract binding to access the raw methods on
}

// ValidatorManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorManagerCallerRaw struct {
	Contract *ValidatorManagerCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorManagerTransactorRaw struct {
	Contract *ValidatorManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorManager creates a new instance of ValidatorManager, bound to a specific deployed contract.
func NewValidatorManager(address common.Address, backend bind.ContractBackend) (*ValidatorManager, error) {
	contract, err := bindValidatorManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorManager{ValidatorManagerCaller: ValidatorManagerCaller{contract: contract}, ValidatorManagerTransactor: ValidatorManagerTransactor{contract: contract}, ValidatorManagerFilterer: ValidatorManagerFilterer{contract: contract}}, nil
}

// NewValidatorManagerCaller creates a new read-only instance of ValidatorManager, bound to a specific deployed contract.
func NewValidatorManagerCaller(address common.Address, caller bind.ContractCaller) (*ValidatorManagerCaller, error) {
	contract, err := bindValidatorManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerCaller{contract: contract}, nil
}

// NewValidatorManagerTransactor creates a new write-only instance of ValidatorManager, bound to a specific deployed contract.
func NewValidatorManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorManagerTransactor, error) {
	contract, err := bindValidatorManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerTransactor{contract: contract}, nil
}

// NewValidatorManagerFilterer creates a new log filterer instance of ValidatorManager, bound to a specific deployed contract.
func NewValidatorManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorManagerFilterer, error) {
	contract, err := bindValidatorManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerFilterer{contract: contract}, nil
}

// bindValidatorManager binds a generic wrapper to an already deployed contract.
func bindValidatorManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ValidatorManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorManager *ValidatorManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorManager.Contract.ValidatorManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorManager *ValidatorManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorManager.Contract.ValidatorManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorManager *ValidatorManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorManager.Contract.ValidatorManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorManager *ValidatorManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorManager *ValidatorManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorManager *ValidatorManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorManager.Contract.contract.Transact(opts, method, params...)
}

// ASSETMANAGER is a free data retrieval call binding the contract method 0x6874e042.
//
// Solidity: function ASSET_MANAGER() view returns(address)
func (_ValidatorManager *ValidatorManagerCaller) ASSETMANAGER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "ASSET_MANAGER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ASSETMANAGER is a free data retrieval call binding the contract method 0x6874e042.
//
// Solidity: function ASSET_MANAGER() view returns(address)
func (_ValidatorManager *ValidatorManagerSession) ASSETMANAGER() (common.Address, error) {
	return _ValidatorManager.Contract.ASSETMANAGER(&_ValidatorManager.CallOpts)
}

// ASSETMANAGER is a free data retrieval call binding the contract method 0x6874e042.
//
// Solidity: function ASSET_MANAGER() view returns(address)
func (_ValidatorManager *ValidatorManagerCallerSession) ASSETMANAGER() (common.Address, error) {
	return _ValidatorManager.Contract.ASSETMANAGER(&_ValidatorManager.CallOpts)
}

// BASEREWARD is a free data retrieval call binding the contract method 0x22009af6.
//
// Solidity: function BASE_REWARD() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) BASEREWARD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "BASE_REWARD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BASEREWARD is a free data retrieval call binding the contract method 0x22009af6.
//
// Solidity: function BASE_REWARD() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) BASEREWARD() (*big.Int, error) {
	return _ValidatorManager.Contract.BASEREWARD(&_ValidatorManager.CallOpts)
}

// BASEREWARD is a free data retrieval call binding the contract method 0x22009af6.
//
// Solidity: function BASE_REWARD() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) BASEREWARD() (*big.Int, error) {
	return _ValidatorManager.Contract.BASEREWARD(&_ValidatorManager.CallOpts)
}

// BOOSTEDREWARDDENOM is a free data retrieval call binding the contract method 0x110d6069.
//
// Solidity: function BOOSTED_REWARD_DENOM() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) BOOSTEDREWARDDENOM(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "BOOSTED_REWARD_DENOM")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BOOSTEDREWARDDENOM is a free data retrieval call binding the contract method 0x110d6069.
//
// Solidity: function BOOSTED_REWARD_DENOM() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) BOOSTEDREWARDDENOM() (*big.Int, error) {
	return _ValidatorManager.Contract.BOOSTEDREWARDDENOM(&_ValidatorManager.CallOpts)
}

// BOOSTEDREWARDDENOM is a free data retrieval call binding the contract method 0x110d6069.
//
// Solidity: function BOOSTED_REWARD_DENOM() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) BOOSTEDREWARDDENOM() (*big.Int, error) {
	return _ValidatorManager.Contract.BOOSTEDREWARDDENOM(&_ValidatorManager.CallOpts)
}

// BOOSTEDREWARDNUMERATOR is a free data retrieval call binding the contract method 0x0763fa7e.
//
// Solidity: function BOOSTED_REWARD_NUMERATOR() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) BOOSTEDREWARDNUMERATOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "BOOSTED_REWARD_NUMERATOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BOOSTEDREWARDNUMERATOR is a free data retrieval call binding the contract method 0x0763fa7e.
//
// Solidity: function BOOSTED_REWARD_NUMERATOR() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) BOOSTEDREWARDNUMERATOR() (*big.Int, error) {
	return _ValidatorManager.Contract.BOOSTEDREWARDNUMERATOR(&_ValidatorManager.CallOpts)
}

// BOOSTEDREWARDNUMERATOR is a free data retrieval call binding the contract method 0x0763fa7e.
//
// Solidity: function BOOSTED_REWARD_NUMERATOR() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) BOOSTEDREWARDNUMERATOR() (*big.Int, error) {
	return _ValidatorManager.Contract.BOOSTEDREWARDNUMERATOR(&_ValidatorManager.CallOpts)
}

// COMMISSIONRATEDENOM is a free data retrieval call binding the contract method 0xb91b2723.
//
// Solidity: function COMMISSION_RATE_DENOM() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) COMMISSIONRATEDENOM(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "COMMISSION_RATE_DENOM")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// COMMISSIONRATEDENOM is a free data retrieval call binding the contract method 0xb91b2723.
//
// Solidity: function COMMISSION_RATE_DENOM() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) COMMISSIONRATEDENOM() (*big.Int, error) {
	return _ValidatorManager.Contract.COMMISSIONRATEDENOM(&_ValidatorManager.CallOpts)
}

// COMMISSIONRATEDENOM is a free data retrieval call binding the contract method 0xb91b2723.
//
// Solidity: function COMMISSION_RATE_DENOM() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) COMMISSIONRATEDENOM() (*big.Int, error) {
	return _ValidatorManager.Contract.COMMISSIONRATEDENOM(&_ValidatorManager.CallOpts)
}

// COMMISSIONRATEMINCHANGESECONDS is a free data retrieval call binding the contract method 0xdea15254.
//
// Solidity: function COMMISSION_RATE_MIN_CHANGE_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) COMMISSIONRATEMINCHANGESECONDS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "COMMISSION_RATE_MIN_CHANGE_SECONDS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// COMMISSIONRATEMINCHANGESECONDS is a free data retrieval call binding the contract method 0xdea15254.
//
// Solidity: function COMMISSION_RATE_MIN_CHANGE_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) COMMISSIONRATEMINCHANGESECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.COMMISSIONRATEMINCHANGESECONDS(&_ValidatorManager.CallOpts)
}

// COMMISSIONRATEMINCHANGESECONDS is a free data retrieval call binding the contract method 0xdea15254.
//
// Solidity: function COMMISSION_RATE_MIN_CHANGE_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) COMMISSIONRATEMINCHANGESECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.COMMISSIONRATEMINCHANGESECONDS(&_ValidatorManager.CallOpts)
}

// JAILPERIODSECONDS is a free data retrieval call binding the contract method 0xabeba449.
//
// Solidity: function JAIL_PERIOD_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) JAILPERIODSECONDS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "JAIL_PERIOD_SECONDS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// JAILPERIODSECONDS is a free data retrieval call binding the contract method 0xabeba449.
//
// Solidity: function JAIL_PERIOD_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) JAILPERIODSECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.JAILPERIODSECONDS(&_ValidatorManager.CallOpts)
}

// JAILPERIODSECONDS is a free data retrieval call binding the contract method 0xabeba449.
//
// Solidity: function JAIL_PERIOD_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) JAILPERIODSECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.JAILPERIODSECONDS(&_ValidatorManager.CallOpts)
}

// JAILTHRESHOLD is a free data retrieval call binding the contract method 0x42223ae9.
//
// Solidity: function JAIL_THRESHOLD() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) JAILTHRESHOLD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "JAIL_THRESHOLD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// JAILTHRESHOLD is a free data retrieval call binding the contract method 0x42223ae9.
//
// Solidity: function JAIL_THRESHOLD() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) JAILTHRESHOLD() (*big.Int, error) {
	return _ValidatorManager.Contract.JAILTHRESHOLD(&_ValidatorManager.CallOpts)
}

// JAILTHRESHOLD is a free data retrieval call binding the contract method 0x42223ae9.
//
// Solidity: function JAIL_THRESHOLD() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) JAILTHRESHOLD() (*big.Int, error) {
	return _ValidatorManager.Contract.JAILTHRESHOLD(&_ValidatorManager.CallOpts)
}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_ValidatorManager *ValidatorManagerCaller) L2ORACLE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "L2_ORACLE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_ValidatorManager *ValidatorManagerSession) L2ORACLE() (common.Address, error) {
	return _ValidatorManager.Contract.L2ORACLE(&_ValidatorManager.CallOpts)
}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_ValidatorManager *ValidatorManagerCallerSession) L2ORACLE() (common.Address, error) {
	return _ValidatorManager.Contract.L2ORACLE(&_ValidatorManager.CallOpts)
}

// MAXOUTPUTFINALIZATIONS is a free data retrieval call binding the contract method 0xe7816b7f.
//
// Solidity: function MAX_OUTPUT_FINALIZATIONS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) MAXOUTPUTFINALIZATIONS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "MAX_OUTPUT_FINALIZATIONS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXOUTPUTFINALIZATIONS is a free data retrieval call binding the contract method 0xe7816b7f.
//
// Solidity: function MAX_OUTPUT_FINALIZATIONS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) MAXOUTPUTFINALIZATIONS() (*big.Int, error) {
	return _ValidatorManager.Contract.MAXOUTPUTFINALIZATIONS(&_ValidatorManager.CallOpts)
}

// MAXOUTPUTFINALIZATIONS is a free data retrieval call binding the contract method 0xe7816b7f.
//
// Solidity: function MAX_OUTPUT_FINALIZATIONS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) MAXOUTPUTFINALIZATIONS() (*big.Int, error) {
	return _ValidatorManager.Contract.MAXOUTPUTFINALIZATIONS(&_ValidatorManager.CallOpts)
}

// MINACTIVATEAMOUNT is a free data retrieval call binding the contract method 0xb2653fe3.
//
// Solidity: function MIN_ACTIVATE_AMOUNT() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) MINACTIVATEAMOUNT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "MIN_ACTIVATE_AMOUNT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINACTIVATEAMOUNT is a free data retrieval call binding the contract method 0xb2653fe3.
//
// Solidity: function MIN_ACTIVATE_AMOUNT() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) MINACTIVATEAMOUNT() (*big.Int, error) {
	return _ValidatorManager.Contract.MINACTIVATEAMOUNT(&_ValidatorManager.CallOpts)
}

// MINACTIVATEAMOUNT is a free data retrieval call binding the contract method 0xb2653fe3.
//
// Solidity: function MIN_ACTIVATE_AMOUNT() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) MINACTIVATEAMOUNT() (*big.Int, error) {
	return _ValidatorManager.Contract.MINACTIVATEAMOUNT(&_ValidatorManager.CallOpts)
}

// MINREGISTERAMOUNT is a free data retrieval call binding the contract method 0x1796e52e.
//
// Solidity: function MIN_REGISTER_AMOUNT() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) MINREGISTERAMOUNT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "MIN_REGISTER_AMOUNT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINREGISTERAMOUNT is a free data retrieval call binding the contract method 0x1796e52e.
//
// Solidity: function MIN_REGISTER_AMOUNT() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) MINREGISTERAMOUNT() (*big.Int, error) {
	return _ValidatorManager.Contract.MINREGISTERAMOUNT(&_ValidatorManager.CallOpts)
}

// MINREGISTERAMOUNT is a free data retrieval call binding the contract method 0x1796e52e.
//
// Solidity: function MIN_REGISTER_AMOUNT() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) MINREGISTERAMOUNT() (*big.Int, error) {
	return _ValidatorManager.Contract.MINREGISTERAMOUNT(&_ValidatorManager.CallOpts)
}

// ROUNDDURATIONSECONDS is a free data retrieval call binding the contract method 0x4cca5e6c.
//
// Solidity: function ROUND_DURATION_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) ROUNDDURATIONSECONDS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "ROUND_DURATION_SECONDS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ROUNDDURATIONSECONDS is a free data retrieval call binding the contract method 0x4cca5e6c.
//
// Solidity: function ROUND_DURATION_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) ROUNDDURATIONSECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.ROUNDDURATIONSECONDS(&_ValidatorManager.CallOpts)
}

// ROUNDDURATIONSECONDS is a free data retrieval call binding the contract method 0x4cca5e6c.
//
// Solidity: function ROUND_DURATION_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) ROUNDDURATIONSECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.ROUNDDURATIONSECONDS(&_ValidatorManager.CallOpts)
}

// TRUSTEDVALIDATOR is a free data retrieval call binding the contract method 0x3ee4d4a3.
//
// Solidity: function TRUSTED_VALIDATOR() view returns(address)
func (_ValidatorManager *ValidatorManagerCaller) TRUSTEDVALIDATOR(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "TRUSTED_VALIDATOR")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TRUSTEDVALIDATOR is a free data retrieval call binding the contract method 0x3ee4d4a3.
//
// Solidity: function TRUSTED_VALIDATOR() view returns(address)
func (_ValidatorManager *ValidatorManagerSession) TRUSTEDVALIDATOR() (common.Address, error) {
	return _ValidatorManager.Contract.TRUSTEDVALIDATOR(&_ValidatorManager.CallOpts)
}

// TRUSTEDVALIDATOR is a free data retrieval call binding the contract method 0x3ee4d4a3.
//
// Solidity: function TRUSTED_VALIDATOR() view returns(address)
func (_ValidatorManager *ValidatorManagerCallerSession) TRUSTEDVALIDATOR() (common.Address, error) {
	return _ValidatorManager.Contract.TRUSTEDVALIDATOR(&_ValidatorManager.CallOpts)
}

// ActivatedValidatorCount is a free data retrieval call binding the contract method 0xcdff5e19.
//
// Solidity: function activatedValidatorCount() view returns(uint32)
func (_ValidatorManager *ValidatorManagerCaller) ActivatedValidatorCount(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "activatedValidatorCount")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// ActivatedValidatorCount is a free data retrieval call binding the contract method 0xcdff5e19.
//
// Solidity: function activatedValidatorCount() view returns(uint32)
func (_ValidatorManager *ValidatorManagerSession) ActivatedValidatorCount() (uint32, error) {
	return _ValidatorManager.Contract.ActivatedValidatorCount(&_ValidatorManager.CallOpts)
}

// ActivatedValidatorCount is a free data retrieval call binding the contract method 0xcdff5e19.
//
// Solidity: function activatedValidatorCount() view returns(uint32)
func (_ValidatorManager *ValidatorManagerCallerSession) ActivatedValidatorCount() (uint32, error) {
	return _ValidatorManager.Contract.ActivatedValidatorCount(&_ValidatorManager.CallOpts)
}

// ActivatedValidatorTotalWeight is a free data retrieval call binding the contract method 0xaf6ca762.
//
// Solidity: function activatedValidatorTotalWeight() view returns(uint120)
func (_ValidatorManager *ValidatorManagerCaller) ActivatedValidatorTotalWeight(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "activatedValidatorTotalWeight")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ActivatedValidatorTotalWeight is a free data retrieval call binding the contract method 0xaf6ca762.
//
// Solidity: function activatedValidatorTotalWeight() view returns(uint120)
func (_ValidatorManager *ValidatorManagerSession) ActivatedValidatorTotalWeight() (*big.Int, error) {
	return _ValidatorManager.Contract.ActivatedValidatorTotalWeight(&_ValidatorManager.CallOpts)
}

// ActivatedValidatorTotalWeight is a free data retrieval call binding the contract method 0xaf6ca762.
//
// Solidity: function activatedValidatorTotalWeight() view returns(uint120)
func (_ValidatorManager *ValidatorManagerCallerSession) ActivatedValidatorTotalWeight() (*big.Int, error) {
	return _ValidatorManager.Contract.ActivatedValidatorTotalWeight(&_ValidatorManager.CallOpts)
}

// AssertCanSubmitOutput is a free data retrieval call binding the contract method 0x020810c3.
//
// Solidity: function assertCanSubmitOutput(address validator) view returns()
func (_ValidatorManager *ValidatorManagerCaller) AssertCanSubmitOutput(opts *bind.CallOpts, validator common.Address) error {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "assertCanSubmitOutput", validator)

	if err != nil {
		return err
	}

	return err

}

// AssertCanSubmitOutput is a free data retrieval call binding the contract method 0x020810c3.
//
// Solidity: function assertCanSubmitOutput(address validator) view returns()
func (_ValidatorManager *ValidatorManagerSession) AssertCanSubmitOutput(validator common.Address) error {
	return _ValidatorManager.Contract.AssertCanSubmitOutput(&_ValidatorManager.CallOpts, validator)
}

// AssertCanSubmitOutput is a free data retrieval call binding the contract method 0x020810c3.
//
// Solidity: function assertCanSubmitOutput(address validator) view returns()
func (_ValidatorManager *ValidatorManagerCallerSession) AssertCanSubmitOutput(validator common.Address) error {
	return _ValidatorManager.Contract.AssertCanSubmitOutput(&_ValidatorManager.CallOpts, validator)
}

// CheckSubmissionEligibility is a free data retrieval call binding the contract method 0x891aab74.
//
// Solidity: function checkSubmissionEligibility(address validator) view returns()
func (_ValidatorManager *ValidatorManagerCaller) CheckSubmissionEligibility(opts *bind.CallOpts, validator common.Address) error {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "checkSubmissionEligibility", validator)

	if err != nil {
		return err
	}

	return err

}

// CheckSubmissionEligibility is a free data retrieval call binding the contract method 0x891aab74.
//
// Solidity: function checkSubmissionEligibility(address validator) view returns()
func (_ValidatorManager *ValidatorManagerSession) CheckSubmissionEligibility(validator common.Address) error {
	return _ValidatorManager.Contract.CheckSubmissionEligibility(&_ValidatorManager.CallOpts, validator)
}

// CheckSubmissionEligibility is a free data retrieval call binding the contract method 0x891aab74.
//
// Solidity: function checkSubmissionEligibility(address validator) view returns()
func (_ValidatorManager *ValidatorManagerCallerSession) CheckSubmissionEligibility(validator common.Address) error {
	return _ValidatorManager.Contract.CheckSubmissionEligibility(&_ValidatorManager.CallOpts, validator)
}

// GetCommissionMaxChangeRate is a free data retrieval call binding the contract method 0xb9551f82.
//
// Solidity: function getCommissionMaxChangeRate(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCaller) GetCommissionMaxChangeRate(opts *bind.CallOpts, validator common.Address) (uint8, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "getCommissionMaxChangeRate", validator)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetCommissionMaxChangeRate is a free data retrieval call binding the contract method 0xb9551f82.
//
// Solidity: function getCommissionMaxChangeRate(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerSession) GetCommissionMaxChangeRate(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.GetCommissionMaxChangeRate(&_ValidatorManager.CallOpts, validator)
}

// GetCommissionMaxChangeRate is a free data retrieval call binding the contract method 0xb9551f82.
//
// Solidity: function getCommissionMaxChangeRate(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCallerSession) GetCommissionMaxChangeRate(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.GetCommissionMaxChangeRate(&_ValidatorManager.CallOpts, validator)
}

// GetCommissionRate is a free data retrieval call binding the contract method 0xe0cc26a2.
//
// Solidity: function getCommissionRate(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCaller) GetCommissionRate(opts *bind.CallOpts, validator common.Address) (uint8, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "getCommissionRate", validator)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetCommissionRate is a free data retrieval call binding the contract method 0xe0cc26a2.
//
// Solidity: function getCommissionRate(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerSession) GetCommissionRate(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.GetCommissionRate(&_ValidatorManager.CallOpts, validator)
}

// GetCommissionRate is a free data retrieval call binding the contract method 0xe0cc26a2.
//
// Solidity: function getCommissionRate(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCallerSession) GetCommissionRate(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.GetCommissionRate(&_ValidatorManager.CallOpts, validator)
}

// GetStatus is a free data retrieval call binding the contract method 0x30ccebb5.
//
// Solidity: function getStatus(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCaller) GetStatus(opts *bind.CallOpts, validator common.Address) (uint8, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "getStatus", validator)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetStatus is a free data retrieval call binding the contract method 0x30ccebb5.
//
// Solidity: function getStatus(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerSession) GetStatus(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.GetStatus(&_ValidatorManager.CallOpts, validator)
}

// GetStatus is a free data retrieval call binding the contract method 0x30ccebb5.
//
// Solidity: function getStatus(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCallerSession) GetStatus(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.GetStatus(&_ValidatorManager.CallOpts, validator)
}

// GetWeight is a free data retrieval call binding the contract method 0xac6c5251.
//
// Solidity: function getWeight(address validator) view returns(uint120)
func (_ValidatorManager *ValidatorManagerCaller) GetWeight(opts *bind.CallOpts, validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "getWeight", validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetWeight is a free data retrieval call binding the contract method 0xac6c5251.
//
// Solidity: function getWeight(address validator) view returns(uint120)
func (_ValidatorManager *ValidatorManagerSession) GetWeight(validator common.Address) (*big.Int, error) {
	return _ValidatorManager.Contract.GetWeight(&_ValidatorManager.CallOpts, validator)
}

// GetWeight is a free data retrieval call binding the contract method 0xac6c5251.
//
// Solidity: function getWeight(address validator) view returns(uint120)
func (_ValidatorManager *ValidatorManagerCallerSession) GetWeight(validator common.Address) (*big.Int, error) {
	return _ValidatorManager.Contract.GetWeight(&_ValidatorManager.CallOpts, validator)
}

// InJail is a free data retrieval call binding the contract method 0x56b65e97.
//
// Solidity: function inJail(address validator) view returns(bool)
func (_ValidatorManager *ValidatorManagerCaller) InJail(opts *bind.CallOpts, validator common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "inJail", validator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// InJail is a free data retrieval call binding the contract method 0x56b65e97.
//
// Solidity: function inJail(address validator) view returns(bool)
func (_ValidatorManager *ValidatorManagerSession) InJail(validator common.Address) (bool, error) {
	return _ValidatorManager.Contract.InJail(&_ValidatorManager.CallOpts, validator)
}

// InJail is a free data retrieval call binding the contract method 0x56b65e97.
//
// Solidity: function inJail(address validator) view returns(bool)
func (_ValidatorManager *ValidatorManagerCallerSession) InJail(validator common.Address) (bool, error) {
	return _ValidatorManager.Contract.InJail(&_ValidatorManager.CallOpts, validator)
}

// JailExpiresAt is a free data retrieval call binding the contract method 0x970531c1.
//
// Solidity: function jailExpiresAt(address validator) view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) JailExpiresAt(opts *bind.CallOpts, validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "jailExpiresAt", validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// JailExpiresAt is a free data retrieval call binding the contract method 0x970531c1.
//
// Solidity: function jailExpiresAt(address validator) view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) JailExpiresAt(validator common.Address) (*big.Int, error) {
	return _ValidatorManager.Contract.JailExpiresAt(&_ValidatorManager.CallOpts, validator)
}

// JailExpiresAt is a free data retrieval call binding the contract method 0x970531c1.
//
// Solidity: function jailExpiresAt(address validator) view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) JailExpiresAt(validator common.Address) (*big.Int, error) {
	return _ValidatorManager.Contract.JailExpiresAt(&_ValidatorManager.CallOpts, validator)
}

// NextValidator is a free data retrieval call binding the contract method 0x3a549046.
//
// Solidity: function nextValidator() view returns(address)
func (_ValidatorManager *ValidatorManagerCaller) NextValidator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "nextValidator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NextValidator is a free data retrieval call binding the contract method 0x3a549046.
//
// Solidity: function nextValidator() view returns(address)
func (_ValidatorManager *ValidatorManagerSession) NextValidator() (common.Address, error) {
	return _ValidatorManager.Contract.NextValidator(&_ValidatorManager.CallOpts)
}

// NextValidator is a free data retrieval call binding the contract method 0x3a549046.
//
// Solidity: function nextValidator() view returns(address)
func (_ValidatorManager *ValidatorManagerCallerSession) NextValidator() (common.Address, error) {
	return _ValidatorManager.Contract.NextValidator(&_ValidatorManager.CallOpts)
}

// NoSubmissionCount is a free data retrieval call binding the contract method 0xdff221b5.
//
// Solidity: function noSubmissionCount(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCaller) NoSubmissionCount(opts *bind.CallOpts, validator common.Address) (uint8, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "noSubmissionCount", validator)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// NoSubmissionCount is a free data retrieval call binding the contract method 0xdff221b5.
//
// Solidity: function noSubmissionCount(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerSession) NoSubmissionCount(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.NoSubmissionCount(&_ValidatorManager.CallOpts, validator)
}

// NoSubmissionCount is a free data retrieval call binding the contract method 0xdff221b5.
//
// Solidity: function noSubmissionCount(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCallerSession) NoSubmissionCount(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.NoSubmissionCount(&_ValidatorManager.CallOpts, validator)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_ValidatorManager *ValidatorManagerCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_ValidatorManager *ValidatorManagerSession) Version() (string, error) {
	return _ValidatorManager.Contract.Version(&_ValidatorManager.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_ValidatorManager *ValidatorManagerCallerSession) Version() (string, error) {
	return _ValidatorManager.Contract.Version(&_ValidatorManager.CallOpts)
}

// ActivateValidator is a paid mutator transaction binding the contract method 0x263a3402.
//
// Solidity: function activateValidator() returns()
func (_ValidatorManager *ValidatorManagerTransactor) ActivateValidator(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "activateValidator")
}

// ActivateValidator is a paid mutator transaction binding the contract method 0x263a3402.
//
// Solidity: function activateValidator() returns()
func (_ValidatorManager *ValidatorManagerSession) ActivateValidator() (*types.Transaction, error) {
	return _ValidatorManager.Contract.ActivateValidator(&_ValidatorManager.TransactOpts)
}

// ActivateValidator is a paid mutator transaction binding the contract method 0x263a3402.
//
// Solidity: function activateValidator() returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) ActivateValidator() (*types.Transaction, error) {
	return _ValidatorManager.Contract.ActivateValidator(&_ValidatorManager.TransactOpts)
}

// AfterSubmitL2Output is a paid mutator transaction binding the contract method 0xbe119347.
//
// Solidity: function afterSubmitL2Output(uint256 outputIndex) returns()
func (_ValidatorManager *ValidatorManagerTransactor) AfterSubmitL2Output(opts *bind.TransactOpts, outputIndex *big.Int) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "afterSubmitL2Output", outputIndex)
}

// AfterSubmitL2Output is a paid mutator transaction binding the contract method 0xbe119347.
//
// Solidity: function afterSubmitL2Output(uint256 outputIndex) returns()
func (_ValidatorManager *ValidatorManagerSession) AfterSubmitL2Output(outputIndex *big.Int) (*types.Transaction, error) {
	return _ValidatorManager.Contract.AfterSubmitL2Output(&_ValidatorManager.TransactOpts, outputIndex)
}

// AfterSubmitL2Output is a paid mutator transaction binding the contract method 0xbe119347.
//
// Solidity: function afterSubmitL2Output(uint256 outputIndex) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) AfterSubmitL2Output(outputIndex *big.Int) (*types.Transaction, error) {
	return _ValidatorManager.Contract.AfterSubmitL2Output(&_ValidatorManager.TransactOpts, outputIndex)
}

// ChangeCommissionRate is a paid mutator transaction binding the contract method 0x88576dc9.
//
// Solidity: function changeCommissionRate(uint8 newCommissionRate) returns()
func (_ValidatorManager *ValidatorManagerTransactor) ChangeCommissionRate(opts *bind.TransactOpts, newCommissionRate uint8) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "changeCommissionRate", newCommissionRate)
}

// ChangeCommissionRate is a paid mutator transaction binding the contract method 0x88576dc9.
//
// Solidity: function changeCommissionRate(uint8 newCommissionRate) returns()
func (_ValidatorManager *ValidatorManagerSession) ChangeCommissionRate(newCommissionRate uint8) (*types.Transaction, error) {
	return _ValidatorManager.Contract.ChangeCommissionRate(&_ValidatorManager.TransactOpts, newCommissionRate)
}

// ChangeCommissionRate is a paid mutator transaction binding the contract method 0x88576dc9.
//
// Solidity: function changeCommissionRate(uint8 newCommissionRate) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) ChangeCommissionRate(newCommissionRate uint8) (*types.Transaction, error) {
	return _ValidatorManager.Contract.ChangeCommissionRate(&_ValidatorManager.TransactOpts, newCommissionRate)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x8ee4b602.
//
// Solidity: function registerValidator(uint128 assets, uint8 commissionRate, uint8 commissionMaxChangeRate) returns()
func (_ValidatorManager *ValidatorManagerTransactor) RegisterValidator(opts *bind.TransactOpts, assets *big.Int, commissionRate uint8, commissionMaxChangeRate uint8) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "registerValidator", assets, commissionRate, commissionMaxChangeRate)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x8ee4b602.
//
// Solidity: function registerValidator(uint128 assets, uint8 commissionRate, uint8 commissionMaxChangeRate) returns()
func (_ValidatorManager *ValidatorManagerSession) RegisterValidator(assets *big.Int, commissionRate uint8, commissionMaxChangeRate uint8) (*types.Transaction, error) {
	return _ValidatorManager.Contract.RegisterValidator(&_ValidatorManager.TransactOpts, assets, commissionRate, commissionMaxChangeRate)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x8ee4b602.
//
// Solidity: function registerValidator(uint128 assets, uint8 commissionRate, uint8 commissionMaxChangeRate) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) RegisterValidator(assets *big.Int, commissionRate uint8, commissionMaxChangeRate uint8) (*types.Transaction, error) {
	return _ValidatorManager.Contract.RegisterValidator(&_ValidatorManager.TransactOpts, assets, commissionRate, commissionMaxChangeRate)
}

// Slash is a paid mutator transaction binding the contract method 0xbe995dc2.
//
// Solidity: function slash(uint256 outputIndex, address winner, address loser) returns()
func (_ValidatorManager *ValidatorManagerTransactor) Slash(opts *bind.TransactOpts, outputIndex *big.Int, winner common.Address, loser common.Address) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "slash", outputIndex, winner, loser)
}

// Slash is a paid mutator transaction binding the contract method 0xbe995dc2.
//
// Solidity: function slash(uint256 outputIndex, address winner, address loser) returns()
func (_ValidatorManager *ValidatorManagerSession) Slash(outputIndex *big.Int, winner common.Address, loser common.Address) (*types.Transaction, error) {
	return _ValidatorManager.Contract.Slash(&_ValidatorManager.TransactOpts, outputIndex, winner, loser)
}

// Slash is a paid mutator transaction binding the contract method 0xbe995dc2.
//
// Solidity: function slash(uint256 outputIndex, address winner, address loser) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) Slash(outputIndex *big.Int, winner common.Address, loser common.Address) (*types.Transaction, error) {
	return _ValidatorManager.Contract.Slash(&_ValidatorManager.TransactOpts, outputIndex, winner, loser)
}

// TryUnjail is a paid mutator transaction binding the contract method 0x9d6b2e37.
//
// Solidity: function tryUnjail(address validator, bool force) returns()
func (_ValidatorManager *ValidatorManagerTransactor) TryUnjail(opts *bind.TransactOpts, validator common.Address, force bool) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "tryUnjail", validator, force)
}

// TryUnjail is a paid mutator transaction binding the contract method 0x9d6b2e37.
//
// Solidity: function tryUnjail(address validator, bool force) returns()
func (_ValidatorManager *ValidatorManagerSession) TryUnjail(validator common.Address, force bool) (*types.Transaction, error) {
	return _ValidatorManager.Contract.TryUnjail(&_ValidatorManager.TransactOpts, validator, force)
}

// TryUnjail is a paid mutator transaction binding the contract method 0x9d6b2e37.
//
// Solidity: function tryUnjail(address validator, bool force) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) TryUnjail(validator common.Address, force bool) (*types.Transaction, error) {
	return _ValidatorManager.Contract.TryUnjail(&_ValidatorManager.TransactOpts, validator, force)
}

// UpdateValidatorTree is a paid mutator transaction binding the contract method 0x5bab847f.
//
// Solidity: function updateValidatorTree(address validator, bool tryRemove) returns()
func (_ValidatorManager *ValidatorManagerTransactor) UpdateValidatorTree(opts *bind.TransactOpts, validator common.Address, tryRemove bool) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "updateValidatorTree", validator, tryRemove)
}

// UpdateValidatorTree is a paid mutator transaction binding the contract method 0x5bab847f.
//
// Solidity: function updateValidatorTree(address validator, bool tryRemove) returns()
func (_ValidatorManager *ValidatorManagerSession) UpdateValidatorTree(validator common.Address, tryRemove bool) (*types.Transaction, error) {
	return _ValidatorManager.Contract.UpdateValidatorTree(&_ValidatorManager.TransactOpts, validator, tryRemove)
}

// UpdateValidatorTree is a paid mutator transaction binding the contract method 0x5bab847f.
//
// Solidity: function updateValidatorTree(address validator, bool tryRemove) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) UpdateValidatorTree(validator common.Address, tryRemove bool) (*types.Transaction, error) {
	return _ValidatorManager.Contract.UpdateValidatorTree(&_ValidatorManager.TransactOpts, validator, tryRemove)
}

// ValidatorManagerChallengeRewardDistributedIterator is returned from FilterChallengeRewardDistributed and is used to iterate over the raw logs and unpacked data for ChallengeRewardDistributed events raised by the ValidatorManager contract.
type ValidatorManagerChallengeRewardDistributedIterator struct {
	Event *ValidatorManagerChallengeRewardDistributed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerChallengeRewardDistributedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerChallengeRewardDistributed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerChallengeRewardDistributed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerChallengeRewardDistributedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerChallengeRewardDistributedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerChallengeRewardDistributed represents a ChallengeRewardDistributed event raised by the ValidatorManager contract.
type ValidatorManagerChallengeRewardDistributed struct {
	OutputIndex *big.Int
	Recipient   common.Address
	Amount      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterChallengeRewardDistributed is a free log retrieval operation binding the contract event 0xd537f9e63e8da05cdb52f795e1c79d7b163e2517d5229375474dbe60b48cfa14.
//
// Solidity: event ChallengeRewardDistributed(uint256 indexed outputIndex, address indexed recipient, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) FilterChallengeRewardDistributed(opts *bind.FilterOpts, outputIndex []*big.Int, recipient []common.Address) (*ValidatorManagerChallengeRewardDistributedIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ChallengeRewardDistributed", outputIndexRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerChallengeRewardDistributedIterator{contract: _ValidatorManager.contract, event: "ChallengeRewardDistributed", logs: logs, sub: sub}, nil
}

// WatchChallengeRewardDistributed is a free log subscription operation binding the contract event 0xd537f9e63e8da05cdb52f795e1c79d7b163e2517d5229375474dbe60b48cfa14.
//
// Solidity: event ChallengeRewardDistributed(uint256 indexed outputIndex, address indexed recipient, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) WatchChallengeRewardDistributed(opts *bind.WatchOpts, sink chan<- *ValidatorManagerChallengeRewardDistributed, outputIndex []*big.Int, recipient []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ChallengeRewardDistributed", outputIndexRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerChallengeRewardDistributed)
				if err := _ValidatorManager.contract.UnpackLog(event, "ChallengeRewardDistributed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeRewardDistributed is a log parse operation binding the contract event 0xd537f9e63e8da05cdb52f795e1c79d7b163e2517d5229375474dbe60b48cfa14.
//
// Solidity: event ChallengeRewardDistributed(uint256 indexed outputIndex, address indexed recipient, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) ParseChallengeRewardDistributed(log types.Log) (*ValidatorManagerChallengeRewardDistributed, error) {
	event := new(ValidatorManagerChallengeRewardDistributed)
	if err := _ValidatorManager.contract.UnpackLog(event, "ChallengeRewardDistributed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerRewardDistributedIterator is returned from FilterRewardDistributed and is used to iterate over the raw logs and unpacked data for RewardDistributed events raised by the ValidatorManager contract.
type ValidatorManagerRewardDistributedIterator struct {
	Event *ValidatorManagerRewardDistributed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerRewardDistributedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerRewardDistributed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerRewardDistributed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerRewardDistributedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerRewardDistributedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerRewardDistributed represents a RewardDistributed event raised by the ValidatorManager contract.
type ValidatorManagerRewardDistributed struct {
	Validator       common.Address
	ValidatorReward *big.Int
	BaseReward      *big.Int
	BoostedReward   *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterRewardDistributed is a free log retrieval operation binding the contract event 0x36f11936e926f4c5f13247a0f85bfd1361293f182bc6a64bfff082b39aec64d9.
//
// Solidity: event RewardDistributed(address indexed validator, uint128 validatorReward, uint128 baseReward, uint128 boostedReward)
func (_ValidatorManager *ValidatorManagerFilterer) FilterRewardDistributed(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerRewardDistributedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "RewardDistributed", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerRewardDistributedIterator{contract: _ValidatorManager.contract, event: "RewardDistributed", logs: logs, sub: sub}, nil
}

// WatchRewardDistributed is a free log subscription operation binding the contract event 0x36f11936e926f4c5f13247a0f85bfd1361293f182bc6a64bfff082b39aec64d9.
//
// Solidity: event RewardDistributed(address indexed validator, uint128 validatorReward, uint128 baseReward, uint128 boostedReward)
func (_ValidatorManager *ValidatorManagerFilterer) WatchRewardDistributed(opts *bind.WatchOpts, sink chan<- *ValidatorManagerRewardDistributed, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "RewardDistributed", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerRewardDistributed)
				if err := _ValidatorManager.contract.UnpackLog(event, "RewardDistributed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardDistributed is a log parse operation binding the contract event 0x36f11936e926f4c5f13247a0f85bfd1361293f182bc6a64bfff082b39aec64d9.
//
// Solidity: event RewardDistributed(address indexed validator, uint128 validatorReward, uint128 baseReward, uint128 boostedReward)
func (_ValidatorManager *ValidatorManagerFilterer) ParseRewardDistributed(log types.Log) (*ValidatorManagerRewardDistributed, error) {
	event := new(ValidatorManagerRewardDistributed)
	if err := _ValidatorManager.contract.UnpackLog(event, "RewardDistributed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerSlashedIterator is returned from FilterSlashed and is used to iterate over the raw logs and unpacked data for Slashed events raised by the ValidatorManager contract.
type ValidatorManagerSlashedIterator struct {
	Event *ValidatorManagerSlashed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerSlashedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerSlashed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerSlashed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerSlashedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerSlashedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerSlashed represents a Slashed event raised by the ValidatorManager contract.
type ValidatorManagerSlashed struct {
	OutputIndex *big.Int
	Loser       common.Address
	Amount      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSlashed is a free log retrieval operation binding the contract event 0x1237821480ce4d75f917bc39d1641eb17a5e09a2d5bf982cdd8cb2561aa28e68.
//
// Solidity: event Slashed(uint256 indexed outputIndex, address indexed loser, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) FilterSlashed(opts *bind.FilterOpts, outputIndex []*big.Int, loser []common.Address) (*ValidatorManagerSlashedIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var loserRule []interface{}
	for _, loserItem := range loser {
		loserRule = append(loserRule, loserItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "Slashed", outputIndexRule, loserRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerSlashedIterator{contract: _ValidatorManager.contract, event: "Slashed", logs: logs, sub: sub}, nil
}

// WatchSlashed is a free log subscription operation binding the contract event 0x1237821480ce4d75f917bc39d1641eb17a5e09a2d5bf982cdd8cb2561aa28e68.
//
// Solidity: event Slashed(uint256 indexed outputIndex, address indexed loser, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) WatchSlashed(opts *bind.WatchOpts, sink chan<- *ValidatorManagerSlashed, outputIndex []*big.Int, loser []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var loserRule []interface{}
	for _, loserItem := range loser {
		loserRule = append(loserRule, loserItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "Slashed", outputIndexRule, loserRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerSlashed)
				if err := _ValidatorManager.contract.UnpackLog(event, "Slashed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashed is a log parse operation binding the contract event 0x1237821480ce4d75f917bc39d1641eb17a5e09a2d5bf982cdd8cb2561aa28e68.
//
// Solidity: event Slashed(uint256 indexed outputIndex, address indexed loser, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) ParseSlashed(log types.Log) (*ValidatorManagerSlashed, error) {
	event := new(ValidatorManagerSlashed)
	if err := _ValidatorManager.contract.UnpackLog(event, "Slashed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerValidatorActivatedIterator is returned from FilterValidatorActivated and is used to iterate over the raw logs and unpacked data for ValidatorActivated events raised by the ValidatorManager contract.
type ValidatorManagerValidatorActivatedIterator struct {
	Event *ValidatorManagerValidatorActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerValidatorActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerValidatorActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerValidatorActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerValidatorActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerValidatorActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerValidatorActivated represents a ValidatorActivated event raised by the ValidatorManager contract.
type ValidatorManagerValidatorActivated struct {
	Validator   common.Address
	ActivatedAt *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterValidatorActivated is a free log retrieval operation binding the contract event 0xf33a24861b76047debce215c7ae4915a9befc5d870e97efbd4152df23c72112a.
//
// Solidity: event ValidatorActivated(address indexed validator, uint256 activatedAt)
func (_ValidatorManager *ValidatorManagerFilterer) FilterValidatorActivated(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerValidatorActivatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ValidatorActivated", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerValidatorActivatedIterator{contract: _ValidatorManager.contract, event: "ValidatorActivated", logs: logs, sub: sub}, nil
}

// WatchValidatorActivated is a free log subscription operation binding the contract event 0xf33a24861b76047debce215c7ae4915a9befc5d870e97efbd4152df23c72112a.
//
// Solidity: event ValidatorActivated(address indexed validator, uint256 activatedAt)
func (_ValidatorManager *ValidatorManagerFilterer) WatchValidatorActivated(opts *bind.WatchOpts, sink chan<- *ValidatorManagerValidatorActivated, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ValidatorActivated", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerValidatorActivated)
				if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorActivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorActivated is a log parse operation binding the contract event 0xf33a24861b76047debce215c7ae4915a9befc5d870e97efbd4152df23c72112a.
//
// Solidity: event ValidatorActivated(address indexed validator, uint256 activatedAt)
func (_ValidatorManager *ValidatorManagerFilterer) ParseValidatorActivated(log types.Log) (*ValidatorManagerValidatorActivated, error) {
	event := new(ValidatorManagerValidatorActivated)
	if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorActivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerValidatorCommissionRateChangedIterator is returned from FilterValidatorCommissionRateChanged and is used to iterate over the raw logs and unpacked data for ValidatorCommissionRateChanged events raised by the ValidatorManager contract.
type ValidatorManagerValidatorCommissionRateChangedIterator struct {
	Event *ValidatorManagerValidatorCommissionRateChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerValidatorCommissionRateChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerValidatorCommissionRateChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerValidatorCommissionRateChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerValidatorCommissionRateChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerValidatorCommissionRateChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerValidatorCommissionRateChanged represents a ValidatorCommissionRateChanged event raised by the ValidatorManager contract.
type ValidatorManagerValidatorCommissionRateChanged struct {
	Validator         common.Address
	OldCommissionRate uint8
	NewCommissionRate uint8
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterValidatorCommissionRateChanged is a free log retrieval operation binding the contract event 0xc0b29b9b824f7a62d93fde5832bb8307fd62594d0a08d96d533407a0a147ec48.
//
// Solidity: event ValidatorCommissionRateChanged(address indexed validator, uint8 oldCommissionRate, uint8 newCommissionRate)
func (_ValidatorManager *ValidatorManagerFilterer) FilterValidatorCommissionRateChanged(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerValidatorCommissionRateChangedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ValidatorCommissionRateChanged", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerValidatorCommissionRateChangedIterator{contract: _ValidatorManager.contract, event: "ValidatorCommissionRateChanged", logs: logs, sub: sub}, nil
}

// WatchValidatorCommissionRateChanged is a free log subscription operation binding the contract event 0xc0b29b9b824f7a62d93fde5832bb8307fd62594d0a08d96d533407a0a147ec48.
//
// Solidity: event ValidatorCommissionRateChanged(address indexed validator, uint8 oldCommissionRate, uint8 newCommissionRate)
func (_ValidatorManager *ValidatorManagerFilterer) WatchValidatorCommissionRateChanged(opts *bind.WatchOpts, sink chan<- *ValidatorManagerValidatorCommissionRateChanged, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ValidatorCommissionRateChanged", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerValidatorCommissionRateChanged)
				if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorCommissionRateChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCommissionRateChanged is a log parse operation binding the contract event 0xc0b29b9b824f7a62d93fde5832bb8307fd62594d0a08d96d533407a0a147ec48.
//
// Solidity: event ValidatorCommissionRateChanged(address indexed validator, uint8 oldCommissionRate, uint8 newCommissionRate)
func (_ValidatorManager *ValidatorManagerFilterer) ParseValidatorCommissionRateChanged(log types.Log) (*ValidatorManagerValidatorCommissionRateChanged, error) {
	event := new(ValidatorManagerValidatorCommissionRateChanged)
	if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorCommissionRateChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerValidatorJailedIterator is returned from FilterValidatorJailed and is used to iterate over the raw logs and unpacked data for ValidatorJailed events raised by the ValidatorManager contract.
type ValidatorManagerValidatorJailedIterator struct {
	Event *ValidatorManagerValidatorJailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerValidatorJailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerValidatorJailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerValidatorJailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerValidatorJailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerValidatorJailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerValidatorJailed represents a ValidatorJailed event raised by the ValidatorManager contract.
type ValidatorManagerValidatorJailed struct {
	Validator common.Address
	ExpiresAt *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorJailed is a free log retrieval operation binding the contract event 0x95a398f2b6b2ad94f281708c97fe502386fc16adca43daed577a1e992a4cc814.
//
// Solidity: event ValidatorJailed(address indexed validator, uint128 expiresAt)
func (_ValidatorManager *ValidatorManagerFilterer) FilterValidatorJailed(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerValidatorJailedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ValidatorJailed", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerValidatorJailedIterator{contract: _ValidatorManager.contract, event: "ValidatorJailed", logs: logs, sub: sub}, nil
}

// WatchValidatorJailed is a free log subscription operation binding the contract event 0x95a398f2b6b2ad94f281708c97fe502386fc16adca43daed577a1e992a4cc814.
//
// Solidity: event ValidatorJailed(address indexed validator, uint128 expiresAt)
func (_ValidatorManager *ValidatorManagerFilterer) WatchValidatorJailed(opts *bind.WatchOpts, sink chan<- *ValidatorManagerValidatorJailed, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ValidatorJailed", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerValidatorJailed)
				if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorJailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJailed is a log parse operation binding the contract event 0x95a398f2b6b2ad94f281708c97fe502386fc16adca43daed577a1e992a4cc814.
//
// Solidity: event ValidatorJailed(address indexed validator, uint128 expiresAt)
func (_ValidatorManager *ValidatorManagerFilterer) ParseValidatorJailed(log types.Log) (*ValidatorManagerValidatorJailed, error) {
	event := new(ValidatorManagerValidatorJailed)
	if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorJailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerValidatorRegisteredIterator is returned from FilterValidatorRegistered and is used to iterate over the raw logs and unpacked data for ValidatorRegistered events raised by the ValidatorManager contract.
type ValidatorManagerValidatorRegisteredIterator struct {
	Event *ValidatorManagerValidatorRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerValidatorRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerValidatorRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerValidatorRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerValidatorRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerValidatorRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerValidatorRegistered represents a ValidatorRegistered event raised by the ValidatorManager contract.
type ValidatorManagerValidatorRegistered struct {
	Validator               common.Address
	Activated               bool
	CommissionRate          uint8
	CommissionMaxChangeRate uint8
	Assets                  *big.Int
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterValidatorRegistered is a free log retrieval operation binding the contract event 0x04ba0c4d7cbac9138f7b73ec9fef796e4ad320bf5fb204f080f81fd59c2d48b9.
//
// Solidity: event ValidatorRegistered(address indexed validator, bool activated, uint8 commissionRate, uint8 commissionMaxChangeRate, uint128 assets)
func (_ValidatorManager *ValidatorManagerFilterer) FilterValidatorRegistered(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerValidatorRegisteredIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ValidatorRegistered", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerValidatorRegisteredIterator{contract: _ValidatorManager.contract, event: "ValidatorRegistered", logs: logs, sub: sub}, nil
}

// WatchValidatorRegistered is a free log subscription operation binding the contract event 0x04ba0c4d7cbac9138f7b73ec9fef796e4ad320bf5fb204f080f81fd59c2d48b9.
//
// Solidity: event ValidatorRegistered(address indexed validator, bool activated, uint8 commissionRate, uint8 commissionMaxChangeRate, uint128 assets)
func (_ValidatorManager *ValidatorManagerFilterer) WatchValidatorRegistered(opts *bind.WatchOpts, sink chan<- *ValidatorManagerValidatorRegistered, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ValidatorRegistered", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerValidatorRegistered)
				if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorRegistered is a log parse operation binding the contract event 0x04ba0c4d7cbac9138f7b73ec9fef796e4ad320bf5fb204f080f81fd59c2d48b9.
//
// Solidity: event ValidatorRegistered(address indexed validator, bool activated, uint8 commissionRate, uint8 commissionMaxChangeRate, uint128 assets)
func (_ValidatorManager *ValidatorManagerFilterer) ParseValidatorRegistered(log types.Log) (*ValidatorManagerValidatorRegistered, error) {
	event := new(ValidatorManagerValidatorRegistered)
	if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerValidatorStoppedIterator is returned from FilterValidatorStopped and is used to iterate over the raw logs and unpacked data for ValidatorStopped events raised by the ValidatorManager contract.
type ValidatorManagerValidatorStoppedIterator struct {
	Event *ValidatorManagerValidatorStopped // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerValidatorStoppedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerValidatorStopped)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerValidatorStopped)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerValidatorStoppedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerValidatorStoppedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerValidatorStopped represents a ValidatorStopped event raised by the ValidatorManager contract.
type ValidatorManagerValidatorStopped struct {
	Validator common.Address
	StopsAt   *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorStopped is a free log retrieval operation binding the contract event 0xdee7e7274fb1911def379ceda542a2723358c99d6d1f89fcbdbe9e9d638d9961.
//
// Solidity: event ValidatorStopped(address indexed validator, uint256 stopsAt)
func (_ValidatorManager *ValidatorManagerFilterer) FilterValidatorStopped(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerValidatorStoppedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ValidatorStopped", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerValidatorStoppedIterator{contract: _ValidatorManager.contract, event: "ValidatorStopped", logs: logs, sub: sub}, nil
}

// WatchValidatorStopped is a free log subscription operation binding the contract event 0xdee7e7274fb1911def379ceda542a2723358c99d6d1f89fcbdbe9e9d638d9961.
//
// Solidity: event ValidatorStopped(address indexed validator, uint256 stopsAt)
func (_ValidatorManager *ValidatorManagerFilterer) WatchValidatorStopped(opts *bind.WatchOpts, sink chan<- *ValidatorManagerValidatorStopped, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ValidatorStopped", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerValidatorStopped)
				if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorStopped", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorStopped is a log parse operation binding the contract event 0xdee7e7274fb1911def379ceda542a2723358c99d6d1f89fcbdbe9e9d638d9961.
//
// Solidity: event ValidatorStopped(address indexed validator, uint256 stopsAt)
func (_ValidatorManager *ValidatorManagerFilterer) ParseValidatorStopped(log types.Log) (*ValidatorManagerValidatorStopped, error) {
	event := new(ValidatorManagerValidatorStopped)
	if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorStopped", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerValidatorUnjailedIterator is returned from FilterValidatorUnjailed and is used to iterate over the raw logs and unpacked data for ValidatorUnjailed events raised by the ValidatorManager contract.
type ValidatorManagerValidatorUnjailedIterator struct {
	Event *ValidatorManagerValidatorUnjailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerValidatorUnjailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerValidatorUnjailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerValidatorUnjailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerValidatorUnjailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerValidatorUnjailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerValidatorUnjailed represents a ValidatorUnjailed event raised by the ValidatorManager contract.
type ValidatorManagerValidatorUnjailed struct {
	Validator common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorUnjailed is a free log retrieval operation binding the contract event 0x9390b453426557da5ebdc31f19a37753ca04addf656d32f35232211bb2af3f19.
//
// Solidity: event ValidatorUnjailed(address indexed validator)
func (_ValidatorManager *ValidatorManagerFilterer) FilterValidatorUnjailed(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerValidatorUnjailedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ValidatorUnjailed", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerValidatorUnjailedIterator{contract: _ValidatorManager.contract, event: "ValidatorUnjailed", logs: logs, sub: sub}, nil
}

// WatchValidatorUnjailed is a free log subscription operation binding the contract event 0x9390b453426557da5ebdc31f19a37753ca04addf656d32f35232211bb2af3f19.
//
// Solidity: event ValidatorUnjailed(address indexed validator)
func (_ValidatorManager *ValidatorManagerFilterer) WatchValidatorUnjailed(opts *bind.WatchOpts, sink chan<- *ValidatorManagerValidatorUnjailed, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ValidatorUnjailed", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerValidatorUnjailed)
				if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorUnjailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorUnjailed is a log parse operation binding the contract event 0x9390b453426557da5ebdc31f19a37753ca04addf656d32f35232211bb2af3f19.
//
// Solidity: event ValidatorUnjailed(address indexed validator)
func (_ValidatorManager *ValidatorManagerFilterer) ParseValidatorUnjailed(log types.Log) (*ValidatorManagerValidatorUnjailed, error) {
	event := new(ValidatorManagerValidatorUnjailed)
	if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorUnjailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
