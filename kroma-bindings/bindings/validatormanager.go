// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IValidatorManagerConstructorParams is an auto generated low-level Go binding around an user-defined struct.
type IValidatorManagerConstructorParams struct {
	L2Oracle                     common.Address
	AssetManager                 common.Address
	TrustedValidator             common.Address
	CommissionChangeDelaySeconds *big.Int
	RoundDurationSeconds         *big.Int
	SoftJailPeriodSeconds        *big.Int
	HardJailPeriodSeconds        *big.Int
	JailThreshold                *big.Int
	MaxOutputFinalizations       *big.Int
	BaseReward                   *big.Int
	MinRegisterAmount            *big.Int
	MinActivateAmount            *big.Int
}

// ValidatorManagerMetaData contains all meta data concerning the ValidatorManager contract.
var ValidatorManagerMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_constructorParams\",\"type\":\"tuple\",\"internalType\":\"structIValidatorManager.ConstructorParams\",\"components\":[{\"name\":\"_l2Oracle\",\"type\":\"address\",\"internalType\":\"contractL2OutputOracle\"},{\"name\":\"_assetManager\",\"type\":\"address\",\"internalType\":\"contractAssetManager\"},{\"name\":\"_trustedValidator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_commissionChangeDelaySeconds\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_roundDurationSeconds\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_softJailPeriodSeconds\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_hardJailPeriodSeconds\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_jailThreshold\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_maxOutputFinalizations\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_baseReward\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_minRegisterAmount\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_minActivateAmount\",\"type\":\"uint128\",\"internalType\":\"uint128\"}]}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"ASSET_MANAGER\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractAssetManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"BASE_REWARD\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"BOOSTED_REWARD_DENOM\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"BOOSTED_REWARD_NUMERATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"COMMISSION_CHANGE_DELAY_SECONDS\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"COMMISSION_RATE_DENOM\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"HARD_JAIL_PERIOD_SECONDS\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"JAIL_THRESHOLD\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"L2_ORACLE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractL2OutputOracle\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MAX_OUTPUT_FINALIZATIONS\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MIN_ACTIVATE_AMOUNT\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MIN_REGISTER_AMOUNT\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROUND_DURATION_SECONDS\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"SOFT_JAIL_PERIOD_SECONDS\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"TRUSTED_VALIDATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"activateValidator\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"activatedValidatorCount\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"activatedValidatorTotalWeight\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint120\",\"internalType\":\"uint120\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"afterSubmitL2Output\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"bondValidatorKro\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"canFinalizeCommissionChangeAt\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"checkSubmissionEligibility\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"finalizeCommissionChange\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getCommissionRate\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPendingCommissionRate\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStatus\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"enumIValidatorManager.ValidatorStatus\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getWeight\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint120\",\"internalType\":\"uint120\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"inJail\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initCommissionChange\",\"inputs\":[{\"name\":\"newCommissionRate\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"isActive\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"jailExpiresAt\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"nextValidator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"noSubmissionCount\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerValidator\",\"inputs\":[{\"name\":\"assets\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"commissionRate\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"withdrawAccount\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"revertSlash\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"loser\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"slash\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"winner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"loser\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"tryActivateValidator\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"tryUnjail\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unbondValidatorKro\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateValidatorTree\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tryRemove\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"version\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"ChallengeRewardDistributed\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RewardDistributed\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"validatorReward\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"},{\"name\":\"baseReward\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"},{\"name\":\"boostedReward\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SlashReverted\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"loser\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Slashed\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"loser\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorActivated\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"activatedAt\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorCommissionChangeFinalized\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"oldCommissionRate\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"},{\"name\":\"newCommissionRate\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorCommissionChangeInitiated\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"oldCommissionRate\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"},{\"name\":\"newCommissionRate\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorJailed\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"expiresAt\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorRegistered\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"activated\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"},{\"name\":\"commissionRate\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"},{\"name\":\"assets\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorStopped\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"stopsAt\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorUnjailed\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"ImproperValidatorStatus\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InsufficientAsset\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidConstructorParams\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"MaxCommissionRateExceeded\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotAllowedCaller\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotElapsedCommissionChangeDelay\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotElapsedJailPeriod\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotInitiatedCommissionChange\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotSelectedPriorityValidator\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"SameCommissionRate\",\"inputs\":[]}]",
	Bin: "0x6102006040523480156200001257600080fd5b5060405162005aeb38038062005aeb83398101604081905262000035916200017d565b8061016001516001600160801b03168161014001516001600160801b031611156200007357604051631510b77f60e01b815260040160405180910390fd5b80516001600160a01b0390811660809081526020830151821660a0908152604084015190921660c0908152610140808501516001600160801b0390811660e090815261016080880151831661010090815260608901518416610120908152968901518416909452958701518216909552918501518216610180529284015181166101a0529183015182166101c05290910151166101e05262000284565b60405161018081016001600160401b03811182821017156200014257634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200016057600080fd5b919050565b80516001600160801b03811681146200016057600080fd5b600061018082840312156200019157600080fd5b6200019b62000110565b620001a68362000148565b8152620001b66020840162000148565b6020820152620001c96040840162000148565b6040820152620001dc6060840162000165565b6060820152620001ef6080840162000165565b60808201526200020260a0840162000165565b60a08201526200021560c0840162000165565b60c08201526200022860e0840162000165565b60e08201526101006200023d81850162000165565b908201526101206200025184820162000165565b908201526101406200026584820162000165565b908201526101606200027984820162000165565b908201529392505050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e0516156706200047b6000396000818161038d015281816149a201528181614a0d01528181614a4f0152614ebb0152600081816108580152612b7201526000818161043201526130c50152600081816103e401526134120152600081816107bb01526134380152600081816104590152610ec40152600081816105c1015281816115000152611c6e0152600081816106f901528181610a9a0152610d2e015260008181610366015281816108cf0152610c1901526000818161040b0152610f2101526000818161052901528181610a2901528181610c4d01528181610d620152818161103e015281816114120152818161198601528181611abc01528181611dfe01528181611f9901528181612193015281816122950152818161238c01528181612d8901528181612ebf0152818161490001528181614adb01528181614b840152614e360152600081816102dc01528181610e2b015281816112060152818161131001528181611884015281816119b701528181611cbe01528181611d5001528181611e940152818161206b01528181612967015281816129ed01528181612a7101528181612bf701528181612c9e0152818161301e015281816131c2015261327601526156706000f3fe608060405234801561001057600080fd5b50600436106102d25760003560e01c8063943e400511610186578063b91b2723116100e3578063cdff5e1911610097578063e0cc26a211610071578063e0cc26a21461080e578063e428c2f414610840578063e7816b7f1461085357600080fd5b8063cdff5e1914610799578063daec6770146107b6578063dff221b5146107dd57600080fd5b8063be119347116100c8578063be1193471461072e578063be995dc214610741578063c26148fe1461075457600080fd5b8063b91b272314610359578063bde022bb1461071b57600080fd5b8063a83871721161013a578063ac6c52511161011f578063ac6c52511461062f578063af6ca762146106a4578063b2653fe3146106f457600080fd5b8063a838717214610609578063ab04b8aa1461061c57600080fd5b80639e449b021161016b5780639e449b02146105bc5780639f8a13d7146105e3578063a3433d07146105f657600080fd5b8063943e400514610579578063970531c11461058157600080fd5b80633ee4d4a3116102345780635bab847f116101e85780637d2243b4116101cd5780637d2243b41461054b578063891aab74146105535780638c1516c71461056657600080fd5b80635bab847f146105115780636874e0421461052457600080fd5b80634cca5e6c116102195780634cca5e6c1461045457806354fd4d501461047b57806356b65e97146104c457600080fd5b80633ee4d4a31461040657806342223ae91461042d57600080fd5b806322009af61161028b57806330ccebb51161027057806330ccebb5146103b75780633a549046146103d75780633ca83045146103df57600080fd5b806322009af614610388578063263a3402146103af57600080fd5b80630763fa7e116102bc5780630763fa7e14610330578063110d6069146103595780631796e52e1461036157600080fd5b80621c2ff6146102d7578063065643ea1461031b575b600080fd5b6102fe7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61032e61032936600461521d565b61087a565b005b610338602881565b6040516fffffffffffffffffffffffffffffffff9091168152602001610312565b610338606481565b6103387f000000000000000000000000000000000000000000000000000000000000000081565b6103387f000000000000000000000000000000000000000000000000000000000000000081565b61032e610b2e565b6103ca6103c5366004615266565b610bb9565b60405161031291906152b2565b6102fe610e15565b6103387f000000000000000000000000000000000000000000000000000000000000000081565b6102fe7f000000000000000000000000000000000000000000000000000000000000000081565b6103387f000000000000000000000000000000000000000000000000000000000000000081565b6103387f000000000000000000000000000000000000000000000000000000000000000081565b6104b76040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b60405161031291906152f3565b6105016104d2366004615266565b6001600160a01b03166000908152600560205260409020546fffffffffffffffffffffffffffffffff16151590565b6040519015158152602001610312565b61032e61051f366004615374565b610f43565b6102fe7f000000000000000000000000000000000000000000000000000000000000000081565b61032e6110b8565b61032e610561366004615266565b6111fb565b61032e610574366004615266565b61130e565b61032e611472565b61033861058f366004615266565b6001600160a01b03166000908152600560205260409020546fffffffffffffffffffffffffffffffff1690565b6103387f000000000000000000000000000000000000000000000000000000000000000081565b6105016105f1366004615266565b611683565b61032e6106043660046153ad565b6116b6565b61032e610617366004615266565b611882565b61032e61062a3660046153c8565b6119b5565b61068461063d366004615266565b6001600160a01b031660009081526003602090815260408083205463ffffffff168352600290915290206001015461010090046effffffffffffffffffffffffffffff1690565b6040516effffffffffffffffffffffffffffff9091168152602001610312565b6001805468010000000000000000900463ffffffff166000908152600260205260409020015470010000000000000000000000000000000090046effffffffffffffffffffffffffffff16610684565b6103387f000000000000000000000000000000000000000000000000000000000000000081565b610338610729366004615266565b611c4f565b61032e61073c3660046153ed565b611cb3565b61032e61074f366004615406565b611e92565b610787610762366004615266565b6001600160a01b03166000908152600460205260409020546301000000900460ff1690565b60405160ff9091168152602001610312565b6107a1612265565b60405163ffffffff9091168152602001610312565b6103387f000000000000000000000000000000000000000000000000000000000000000081565b6107876107eb366004615266565b6001600160a01b0316600090815260046020526040902054610100900460ff1690565b61078761081c366004615266565b6001600160a01b031660009081526004602052604090205462010000900460ff1690565b61032e61084e366004615266565b61228a565b6103387f000000000000000000000000000000000000000000000000000000000000000081565b600061088533610bb9565b600581111561089657610896615283565b146108cd576040517f197299a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff16836fffffffffffffffffffffffffffffffff16101561094b576040517f24f21b1500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606460ff83161115610989576040517f406b265300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600081815260046020819052604091829020805460ff871662010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff0090911617600117815591517f19412a20000000000000000000000000000000000000000000000000000000008152908101929092526fffffffffffffffffffffffffffffffff851660248301526001600160a01b03838116604484015290917f0000000000000000000000000000000000000000000000000000000000000000909116906319412a2090606401600060405180830381600087803b158015610a6f57600080fd5b505af1158015610a83573d6000803e3d6000fd5b505050506fffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811690851610801590610acf57610acf3361234e565b60408051821515815260ff861660208201526fffffffffffffffffffffffffffffffff871681830152905133917f36f43e5c63d19ec0a34168ec0838b5bfae77656b9f5b94b896e9d2172a41f4fe919081900360600190a25050505050565b6003610b3933610bb9565b6005811115610b4a57610b4a615283565b141580610b775750336000908152600560205260409020546fffffffffffffffffffffffffffffffff1615155b15610bae576040517f197299a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bb73361234e565b565b6001600160a01b03811660009081526004602052604081205460ff16610be157506000919050565b6040517f981cee530000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301527f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff16917f00000000000000000000000000000000000000000000000000000000000000009091169063981cee5390602401602060405180830381865afa158015610c96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cba919061542d565b6fffffffffffffffffffffffffffffffff161015610cda57506001919050565b6001600160a01b03828116600081815260036020526040908190205490517f8abf0af0000000000000000000000000000000000000000000000000000000008152600481019290925263ffffffff161515917f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff16917f000000000000000000000000000000000000000000000000000000000000000090911690638abf0af090602401602060405180830381865afa158015610dab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcf919061542d565b6fffffffffffffffffffffffffffffffff161015610dfe5780610df55750600292915050565b50600492915050565b80610e0c5750600392915050565b50600592915050565b600080546001600160a01b031615610f1e5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380446bd26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eab919061544a565b9050804210610f0d576000610ec08242615492565b90507f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff16811115610f0b576001600160a01b039250505090565b505b50506000546001600160a01b031690565b507f000000000000000000000000000000000000000000000000000000000000000090565b6000610f4e83610bb9565b9050818015610f8957506001816005811115610f6c57610f6c615283565b1480610f8957506004816005811115610f8757610f87615283565b145b15610fe757610f99600184612446565b15610fe257826001600160a01b03167fdee7e7274fb1911def379ceda542a2723358c99d6d1f89fcbdbe9e9d638d996142604051610fd991815260200190565b60405180910390a25b505050565b6004816005811115610ffb57610ffb615283565b10610fe2576040517f8abf0af00000000000000000000000000000000000000000000000000000000081526001600160a01b0380851660048301526110b29185917f00000000000000000000000000000000000000000000000000000000000000001690638abf0af090602401602060405180830381865afa158015611085573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a9919061542d565b600191906125e8565b50505050565b336000908152600560205260409020546fffffffffffffffffffffffffffffffff16611110576040517f197299a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260056020526040902054426fffffffffffffffffffffffffffffffff909116111561116d576040517f1dfc20f100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611176336128fd565b3360008181526005602052604080822080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000169055517f9390b453426557da5ebdc31f19a37753ca04addf656d32f35232211bb2af3f199190a260036111dc33610bb9565b60058111156111ed576111ed615283565b03610bb757610bb73361234e565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461125d576040517f9d02a7c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611267610e15565b90506001600160a01b03808216148015906112945750806001600160a01b0316826001600160a01b031614155b156112cb576040517fc625317600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112d482611683565b61130a576040517f197299a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639e45e8f46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561136c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139091906154a9565b6001600160a01b0316336001600160a01b0316146113da576040517f9d02a7c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f8c1516c70000000000000000000000000000000000000000000000000000000081526001600160a01b0382811660048301527f00000000000000000000000000000000000000000000000000000000000000001690638c1516c7906024015b600060405180830381600087803b15801561145757600080fd5b505af115801561146b573d6000803e3d6000fd5b5050505050565b600261147d33610bb9565b600581111561148e5761148e615283565b10806114ba5750336000908152600560205260409020546fffffffffffffffffffffffffffffffff1615155b156114f1576040517f197299a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006114fc33611c4f565b90507f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff160361157b576040517fdf80df2100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806fffffffffffffffffffffffffffffffff164210156115c7576040517f82225faf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360008181526004602090815260409182902080547fffffffffffffffffffffffff0000000000000000000000000000000000ffffff6301000000820460ff90811662010000818102939093167fffffffffffffffffffffffff000000000000000000000000000000000000ffff851617855586519290930416808252938101829052919492939092917fa40865ec905b139b9cdbd0566756b576b074c47d9dde9f62388b1d66d3e72a6491015b60405180910390a250505050565b6000600561169083610bb9565b60058111156116a1576116a1615283565b036116ae57506001919050565b506000919050565b60026116c133610bb9565b60058111156116d2576116d2615283565b10806116fe5750336000908152600560205260409020546fffffffffffffffffffffffffffffffff1615155b15611735576040517f197299a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152600460205260409020606460ff83161115611782576040517f406b265300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805460ff6201000090910481169083168190036117cb576040517f150393f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81547fffffffffffffffffffffffff0000000000000000000000000000000000ffffff16630100000060ff8581169182027fffffffffffffffffffffffff00000000000000000000000000000000ffffffff1692909217640100000000426fffffffffffffffffffffffffffffffff1602178455604080519284168352602083019190915233917f9d9fe61047777339f4f4cb36a1f75ee90e3c6aa90c13abd3ffa07f6f86e0a307910160405180910390a2505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639e45e8f46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190491906154a9565b6001600160a01b0316336001600160a01b03161461194e576040517f9d02a7c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fa83871720000000000000000000000000000000000000000000000000000000081526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063a83871729060240161143d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639e45e8f46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3791906154a9565b6001600160a01b0316336001600160a01b031614611a81576040517f9d02a7c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f536afae40000000000000000000000000000000000000000000000000000000081526001600160a01b0382811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063536afae4906024016020604051808303816000875af1158015611b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2b919061542d565b60008481526006602090815260409182902080547fffffffffffffffffffffffffffffffff0000000000000000000000000000000081166fffffffffffffffffffffffffffffffff918216869003821617909155915191831682529192506001600160a01b0384169185917fe2d313b9d9b90c2930241ea64ee5d6f4ff30dfd44a15cd3f1df2c6cb8021ec07910160405180910390a36001600160a01b03821660008181526005602052604080822080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000169055517f9390b453426557da5ebdc31f19a37753ca04addf656d32f35232211bb2af3f199190a26003611c3083610bb9565b6005811115611c4157611c41615283565b03610fe257610fe28261234e565b6001600160a01b038116600090815260046020526040812054611cad907f00000000000000000000000000000000000000000000000000000000000000009064010000000090046fffffffffffffffffffffffffffffffff166154c6565b92915050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611d15576040517f9d02a7c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611d1d612962565b506040517fb0ea09a8000000000000000000000000000000000000000000000000000000008152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b0ea09a890602401602060405180830381865afa158015611d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc391906154a9565b6040517f8c1516c70000000000000000000000000000000000000000000000000000000081526001600160a01b0380831660048301529192507f000000000000000000000000000000000000000000000000000000000000000090911690638c1516c790602401600060405180830381600087803b158015611e4457600080fd5b505af1158015611e58573d6000803e3d6000fd5b50506000546001600160a01b03908116908416039150611e82905057611e7d816128fd565b611e8a565b611e8a613098565b61130a61316f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639e45e8f46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ef0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1491906154a9565b6001600160a01b0316336001600160a01b031614611f5e576040517f9d02a7c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f5636aabd0000000000000000000000000000000000000000000000000000000081526001600160a01b0382811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690635636aabd906024016020604051808303816000875af1158015611fe4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612008919061542d565b6040516fffffffffffffffffffffffffffffffff821681529091506001600160a01b0383169085907f1237821480ce4d75f917bc39d1641eb17a5e09a2d5bf982cdd8cb2561aa28e689060200160405180910390a3612068826000613409565b837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f403838d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120eb919061544a565b1161214357600084815260066020526040902080546fffffffffffffffffffffffffffffffff8082168401167fffffffffffffffffffffffffffffffff000000000000000000000000000000009091161790556110b2565b6040517fc42996d60000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301526fffffffffffffffffffffffffffffffff831660248301527f0000000000000000000000000000000000000000000000000000000000000000169063c42996d6906044016020604051808303816000875af11580156121dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612200919061542d565b905061220d836000610f43565b6040516fffffffffffffffffffffffffffffffff821681526001600160a01b0384169085907fd537f9e63e8da05cdb52f795e1c79d7b163e2517d5229375474dbe60b48cfa149060200160405180910390a350505050565b6001546000906122859063ffffffff6401000000008204811691166154fa565b905090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146122ec576040517f9d02a7c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60036122f782610bb9565b600581111561230857612308615283565b14801561233d57506001600160a01b0381166000908152600560205260409020546fffffffffffffffffffffffffffffffff16155b1561234b5761234b8161234e565b50565b6040517f8abf0af00000000000000000000000000000000000000000000000000000000081526001600160a01b0380831660048301526124009183917f00000000000000000000000000000000000000000000000000000000000000001690638abf0af090602401602060405180830381865afa1580156123d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123f7919061542d565b600191906135b1565b806001600160a01b03167ff33a24861b76047debce215c7ae4915a9befc5d870e97efbd4152df23c72112a4260405161243b91815260200190565b60405180910390a250565b6001600160a01b038116600090815260028301602052604081205463ffffffff16808203612478576000915050611cad565b6001600160a01b03831660009081526002850160209081526040808320805463ffffffff1916905563ffffffff8481168452600180890190935292208054910154740100000000000000000000000000000000000000009091049091169061010090046effffffffffffffffffffffffffffff165b63ffffffff82161561258f5763ffffffff91821660009081526001808801602052604090912090810180546effffffffffffffffffffffffffffff7001000000000000000000000000000000008083048216869003909116027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff90911617905554740100000000000000000000000000000000000000009004909116906124ed565b6125998684613b36565b50508354600163ffffffff64010000000080840482168301909116027fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff90921691909117855591505092915050565b6001600160a01b038216600090815260028401602052604081205463ffffffff1680820361261a5760009150506128f6565b63ffffffff80821660009081526001808801602052604090912090810180546effffffffffffffffffffffffffffff8781166101008181027fffffffffffffffffffffffffffffffff000000000000000000000000000000ff85161790945593549290910416927401000000000000000000000000000000000000000090910416908210156127ca5763ffffffff83166000908152600188810160205260409091200180547fff000000000000000000000000000000ffffffffffffffffffffffffffffffff8116848803700100000000000000000000000000000000928390046effffffffffffffffffffffffffffff908116820116909202179091555b63ffffffff8216156127ba5763ffffffff91821660009081526001808a01602052604090912090810180546effffffffffffffffffffffffffffff70010000000000000000000000000000000080830482168601909116027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9091161790555474010000000000000000000000000000000000000000900490911690612719565b506127c587846142c2565b6128ee565b63ffffffff83166000908152600188810160205260409091200180547fff000000000000000000000000000000ffffffffffffffffffffffffffffffff8116878503700100000000000000000000000000000000928390046effffffffffffffffffffffffffffff90811682900316909202179091555b63ffffffff8216156128e35763ffffffff91821660009081526001808a01602052604090912090810180546effffffffffffffffffffffffffffff7001000000000000000000000000000000008083048216869003909116027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9091161790555474010000000000000000000000000000000000000000900490911690612841565b506128ee87846144ce565b600193505050505b9392505050565b6001600160a01b038116600090815260046020526040902054610100900460ff161561234b576001600160a01b0316600090815260046020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f403838d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e7919061544a565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166369f16eec6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6d919061544a565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b98debbf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612acd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af191906154a9565b6001600160a01b031663ad36d6cc836040518263ffffffff1660e01b8152600401612b1e91815260200190565b602060405180830381865afa158015612b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5f919061551f565b612b6c5760009250505090565b6000805b7f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff16108015612bc35750828411155b15612fd7576040517f33727c4d000000000000000000000000000000000000000000000000000000008152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906333727c4d90602401602060405180830381865afa158015612c46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6a919061551f565b15612fd7576040517fb0ea09a8000000000000000000000000000000000000000000000000000000008152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b0ea09a890602401602060405180830381865afa158015612ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1191906154a9565b90506000806000612d21846148f9565b6040517fad4294510000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301526fffffffffffffffffffffffffffffffff858116602484015284811660448401528316606483015293965091945092507f00000000000000000000000000000000000000000000000000000000000000009091169063ad42945190608401600060405180830381600087803b158015612dcf57600080fd5b505af1158015612de3573d6000803e3d6000fd5b5050604080516fffffffffffffffffffffffffffffffff8581168252878116602083015286168183015290516001600160a01b03881693508a92507fd74a44a8cd6c73740a70271e07ee96d8a495ff30037ae6381cbcdb8fe7f2a1ea9181900360600190a36000878152600660205260409020546fffffffffffffffffffffffffffffffff168015612fb7576040517fc42996d60000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301526fffffffffffffffffffffffffffffffff831660248301527f0000000000000000000000000000000000000000000000000000000000000000169063c42996d6906044016020604051808303816000875af1158015612f08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2c919061542d565b60008981526006602090815260409182902080547fffffffffffffffffffffffffffffffff0000000000000000000000000000000016905590516fffffffffffffffffffffffffffffffff831681529192506001600160a01b038716918a917fd537f9e63e8da05cdb52f795e1c79d7b163e2517d5229375474dbe60b48cfa14910160405180910390a35b612fc2856000610f43565b87600101975085600101955050505050612b70565b6fffffffffffffffffffffffffffffffff82161561308d576040517f9902cdc0000000000000000000000000000000000000000000000000000000008152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639902cdc090602401600060405180830381600087803b15801561306a57600080fd5b505af115801561307e573d6000803e3d6000fd5b50505050600194505050505090565b600094505050505090565b6000546001600160a01b03166130aa57565b600080546001600160a01b03168152600460205260409020547f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff1661010090910460ff161061311b57600054610bb7906001600160a01b03166001613409565b600080546001600160a01b03168152600460205260409020805460ff6101008083048216600101909116027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116179055565b6001805468010000000000000000900463ffffffff1660009081526002602052604081209091015470010000000000000000000000000000000090046effffffffffffffffffffffffffffff16905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f403838d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561321e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613242919061544a565b90506000826effffffffffffffffffffffffffffff161180156132655750600081115b156133dd5760006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a25ae5576132a6600185615492565b6040518263ffffffff1660e01b81526004016132c491815260200190565b608060405180830381865afa1580156132e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613305919061553c565b9050600083826020015143414460014361331f9190615492565b6040805160208101969096528501939093527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606092831b1691840191909152607483015240609482015260b4016040516020818303038152906040528051906020012060001c613390919061560e565b905061339d600182614c2a565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169190911790555061130a9050565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555050565b600081613436577f0000000000000000000000000000000000000000000000000000000000000000613458565b7f00000000000000000000000000000000000000000000000000000000000000005b9050600061348f846001600160a01b03166000908152600560205260409020546fffffffffffffffffffffffffffffffff16151590565b6134a25761349d82426154c6565b6134d8565b6001600160a01b0384166000908152600560205260409020546134d89083906fffffffffffffffffffffffffffffffff166154c6565b6001600160a01b03851660008181526005602090815260409182902080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff8616908117909155915191825292935090917f95a398f2b6b2ad94f281708c97fe502386fc16adca43daed577a1e992a4cc814910160405180910390a2613571600185612446565b156110b257836001600160a01b03167fdee7e7274fb1911def379ceda542a2723358c99d6d1f89fcbdbe9e9d638d99614260405161167591815260200190565b60006040518060e00160405280846001600160a01b03168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600115158152602001836effffffffffffffffffffffffffffff168152602001836effffffffffffffffffffffffffffff16815250905083600001600081819054906101000a900463ffffffff168092919060010191906101000a81548163ffffffff021916908363ffffffff1602179055505060008460000160009054906101000a900463ffffffff169050818560010160008363ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601c6101000a81548163ffffffff021916908363ffffffff16021790555060808201518160010160006101000a81548160ff02191690831515021790555060a08201518160010160016101000a8154816effffffffffffffffffffffffffffff02191690836effffffffffffffffffffffffffffff16021790555060c08201518160010160106101000a8154816effffffffffffffffffffffffffffff02191690836effffffffffffffffffffffffffffff16021790555090505080856002016000866001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055508460000160089054906101000a900463ffffffff1663ffffffff1660000361388c57845463ffffffff90911668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff90911617909355505050565b845468010000000000000000900463ffffffff165b63ffffffff808216600090815260018089016020526040822090810180546effffffffffffffffffffffffffffff70010000000000000000000000000000000080830482168b01909116027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff90911617905580549092600160c01b9091041690036139c85763ffffffff838116600081815260018a016020526040902080547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000938616939093029290921790915581547fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b9091021781556139bf87846142c2565b50505050505050565b8054600160e01b900463ffffffff16600003613a9e5763ffffffff838116600081815260018a8101602052604090912080547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000948716949094029390931783559190910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905581547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e01b9091021781556139bf87846142c2565b805463ffffffff600160e01b8204811660009081526001808b016020526040808320820154600160c01b909504909316825291902001546effffffffffffffffffffffffffffff70010000000000000000000000000000000092839004811692909104161115613b1e578054600160e01b900463ffffffff169150613b30565b8054600160c01b900463ffffffff1691505b506138a1565b63ffffffff8082166000908152600184016020526040812080549092600160c01b909104169003613e19578054600160e01b900463ffffffff16600003613cc857805474010000000000000000000000000000000000000000900463ffffffff16600003613bc95782547fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff168355613c84565b600181015460ff1615613c3157805474010000000000000000000000000000000000000000900463ffffffff166000908152600184016020526040902080547fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff169055613c84565b805474010000000000000000000000000000000000000000900463ffffffff166000908152600184016020526040902080547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690555b5063ffffffff1660009081526001918201602052604081209081550180547fff00000000000000000000000000000000000000000000000000000000000000169055565b805463ffffffff600160e01b80830482166000908152600180880160209081526040808420547fffffffffffffffffffffffff00000000000000000000000000000000000000009097166001600160a01b0397881617808955859004861684528084208084018054948a0180546effffffffffffffffffffffffffffff6101009788900481169097027fffffffffffffffffffffffffffffffff000000000000000000000000000000ff8216811783559254700100000000000000000000000000000000908190049097169096027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9092167fff000000000000000000000000000000000000000000000000000000000000ff9096169590951717909355915490951682526002880190945292909220805494821663ffffffff1990951694909417909355815404909116906142bc565b8054600160e01b900463ffffffff16600003613f8057805463ffffffff600160c01b80830482166000908152600180880160209081526040808420547fffffffffffffffffffffffff00000000000000000000000000000000000000009097166001600160a01b0397881617808955859004861684528084208084018054948a0180546effffffffffffffffffffffffffffff6101009788900481169097027fffffffffffffffffffffffffffffffff000000000000000000000000000000ff8216811783559254700100000000000000000000000000000000908190049097169096027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9092167fff000000000000000000000000000000000000000000000000000000000000ff9096169590951717909355915490951682526002880190945292909220805494821663ffffffff1990951694909417909355815404909116906142bc565b805463ffffffff600160e01b82048116600090815260018087016020526040808320820154600160c01b909504909316825291902001546effffffffffffffffffffffffffffff6101009283900481169290910416111561414e57805463ffffffff600160c01b80830482166000908152600180880160209081526040808420547fffffffffffffffffffffffff00000000000000000000000000000000000000009097166001600160a01b03978816178089558581048716855281852080850180548b870180546effffffffffffffffffffffffffffff6101009384900481169093027fffffffffffffffffffffffffffffffff000000000000000000000000000000ff821681178355600160e01b9096048c168a52868a20909801549254700100000000000000000000000000000000908190048316938190048316939093019091169091027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9093167fff000000000000000000000000000000000000000000000000000000000000ff9096169590951791909117909355915490951682526002880190945292909220805494821663ffffffff1990951694909417909355815404909116906142bc565b805463ffffffff600160e01b80830482166000908152600180880160209081526040808420547fffffffffffffffffffffffff00000000000000000000000000000000000000009097166001600160a01b03978816178089558581048716855281852080850180548b870180546effffffffffffffffffffffffffffff6101009384900481169093027fffffffffffffffffffffffffffffffff000000000000000000000000000000ff8216811783559354600160c01b9096048c168a52868a2090980154700100000000000000000000000000000000908190048316958190048316959095019091169093027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9091167fff000000000000000000000000000000000000000000000000000000000000ff90961695909517949094179055915490951682526002880190945292909220805494821663ffffffff1990951694909417909355815404909116905b50613b36565b63ffffffff80821660009081526001840160205260408082208054740100000000000000000000000000000000000000009004909316825290205b815474010000000000000000000000000000000000000000900463ffffffff16158015906143505750600180820154908301546effffffffffffffffffffffffffffff6101009283900481169290910416115b156110b257815481547fffffffffffffffffffffffff00000000000000000000000000000000000000008083166001600160a01b03928316178555835416918116919091178255600180840180548483018054610100908190046effffffffffffffffffffffffffffff9081168083027fffffffffffffffffffffffffffffffff000000000000000000000000000000ff80871691909117875584549584900483169384029516949094179092558354929003700100000000000000000000000000000000808404831691909103909116027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9091161790558354821660009081526002870160209081526040808320805463ffffffff998a1663ffffffff1991821617909155875496549095168352808320805490951674010000000000000000000000000000000000000000968790048916179094559454849004861680825291870190945281842080549390930490941683529091206142fd565b5b63ffffffff8082166000908152600180850160205260408083208054600160e01b810486168552828520840154600160c01b90910490951684529220015490916effffffffffffffffffffffffffffff61010091829004811691909204909116111561471757600180820154825463ffffffff600160c01b90910416600090815285830160205260409020909101546effffffffffffffffffffffffffffff61010092839004811692909104161115610fe257805463ffffffff600160c01b80830482166000908152600187810160208181526040808520547fffffffffffffffffffffffff0000000000000000000000000000000000000000808a166001600160a01b0392831617808c558890048916875282872080549091169982169990991790985583890180548a548890048916875282872086018054610100908190046effffffffffffffffffffffffffffff9081168083027fffffffffffffffffffffffffffffffff000000000000000000000000000000ff80871691909117909655835494839004821692830294909516939093179091558b548990048a168852838820909601805496909203700100000000000000000000000000000000808804831691909103909116027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9095169490941790935587548716845260028a0180825283852080549a881663ffffffff199b8c16179055885486900487168086529282528385205490971684529590955290208054909516909217909355905404166144cf565b600180820154825463ffffffff600160e01b90910416600090815285830160205260409020909101546effffffffffffffffffffffffffffff61010092839004811692909104161115610fe257805463ffffffff600160e01b80830482166000908152600187810160208181526040808520547fffffffffffffffffffffffff0000000000000000000000000000000000000000808a166001600160a01b0392831617808c558890048916875282872080549091169982169990991790985583890180548a548890048916875282872086018054610100908190046effffffffffffffffffffffffffffff9081168083027fffffffffffffffffffffffffffffffff000000000000000000000000000000ff80871691909117909655835494839004821692830294909516939093179091558b548990048a168852838820909601805496909203700100000000000000000000000000000000808804831691909103909116027fff000000000000000000000000000000ffffffffffffffffffffffffffffffff9095169490941790935587548716845260028a0180825283852080549a881663ffffffff199b8c16179055885486900487168086529282528385205490971684529590955290208054909516909217909355905404166144cf565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663360864176040518163ffffffff1660e01b8152600401602060405180830381865afa15801561495c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061498091906154a9565b6001600160a01b0316846001600160a01b0316036149c65750600091508190507f0000000000000000000000000000000000000000000000000000000000000000614c23565b6001600160a01b03841660009081526004602052604081205462010000900460ff16906149f286614df9565b9050600080614a376fffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000850116856064614f2f565b9050614a7a6fffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016606486810390614f2f565b9150614a9d6fffffffffffffffffffffffffffffffff8416606486810390614f2f565b6040517f981cee530000000000000000000000000000000000000000000000000000000081526001600160a01b038a811660048301529194506000917f0000000000000000000000000000000000000000000000000000000000000000169063981cee5390602401602060405180830381865afa158015614b22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b46919061542d565b6040517f6b9ffeac0000000000000000000000000000000000000000000000000000000081526001600160a01b038b811660048301529192506000917f00000000000000000000000000000000000000000000000000000000000000001690636b9ffeac90602401602060405180830381865afa158015614bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bef919061542d565b90506000614c126fffffffffffffffffffffffffffffffff861684808501614f2f565b948590039950949750505001925050505b9193909250565b815460009068010000000000000000900463ffffffff165b63ffffffff80821660009081526001808701602052604080832054600160c01b9004909316825291902001546effffffffffffffffffffffffffffff808516700100000000000000000000000000000000909204161115614cc35763ffffffff9081166000908152600185016020526040902054600160c01b900416614c42565b63ffffffff8181166000818152600187810160205260408083208054600160c01b9004909516835282208101549290915291909101547001000000000000000000000000000000009091046effffffffffffffffffffffffffffff90811690940393848116610100909204161115614d5c5763ffffffff1660009081526001840160205260409020546001600160a01b03169050611cad565b63ffffffff818116600090815260018681016020526040808320808301549054600160e01b9004909416835290912001546101009091046effffffffffffffffffffffffffffff90811690940393848116700100000000000000000000000000000000909204161115614def5763ffffffff9081166000908152600185016020526040902054600160e01b900416614c42565b6000915050611cad565b6040517f913f1a9f0000000000000000000000000000000000000000000000000000000081526001600160a01b03828116600483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063913f1a9f90602401602060405180830381865afa158015614e7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ea1919061542d565b90506000614ee46fffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660286064614f2f565b9050614f27816fffffffffffffffffffffffffffffffff1665010000000000614f20856fffffffffffffffffffffffffffffffff166064614fe3565b91906150aa565b949350505050565b6000838302608081901c6fffffffffffffffffffffffffffffffff841611614fb8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f55696e743132384d6174683a206d756c446976206f766572666c6f770000000060448201526064015b60405180910390fd5b826fffffffffffffffffffffffffffffffff168181614fd957614fd96155df565b0495945050505050565b6000808383108015614ffc576001811461500f5761501e565b650100000000008502849004915061501e565b65010000000000840285900491505b506402ef6c3406818002602890811c808402821c808202831c808302841c808402851c938402851c95909502841c641da06a6e33909502841c6455232d2bb2909202841c640d4ca0c283909302841c643177d95571909102841c64fffe4bcada90960290931c9490940191909101039190910303905081831115611cad576501921fb544430392915050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85870985870292508281108382030391505080600003615102578382816150f8576150f86155df565b04925050506128f6565b80841161516b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4d6174683a206d756c446976206f766572666c6f7700000000000000000000006044820152606401614faf565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6fffffffffffffffffffffffffffffffff8116811461234b57600080fd5b803560ff8116811461520357600080fd5b919050565b6001600160a01b038116811461234b57600080fd5b60008060006060848603121561523257600080fd5b833561523d816151d4565b925061524b602085016151f2565b9150604084013561525b81615208565b809150509250925092565b60006020828403121561527857600080fd5b81356128f681615208565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60208101600683106152ed577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b600060208083528351808285015260005b8181101561532057858101830151858201604001528201615304565b81811115615332576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b801515811461234b57600080fd5b6000806040838503121561538757600080fd5b823561539281615208565b915060208301356153a281615366565b809150509250929050565b6000602082840312156153bf57600080fd5b6128f6826151f2565b600080604083850312156153db57600080fd5b8235915060208301356153a281615208565b6000602082840312156153ff57600080fd5b5035919050565b60008060006060848603121561541b57600080fd5b83359250602084013561524b81615208565b60006020828403121561543f57600080fd5b81516128f6816151d4565b60006020828403121561545c57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156154a4576154a4615463565b500390565b6000602082840312156154bb57600080fd5b81516128f681615208565b60006fffffffffffffffffffffffffffffffff8083168185168083038211156154f1576154f1615463565b01949350505050565b600063ffffffff8381169083168181101561551757615517615463565b039392505050565b60006020828403121561553157600080fd5b81516128f681615366565b60006080828403121561554e57600080fd5b6040516080810181811067ffffffffffffffff82111715615598577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405282516155a681615208565b81526020838101519082015260408301516155c0816151d4565b604082015260608301516155d3816151d4565b60608201529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006effffffffffffffffffffffffffffff80841680615657577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b9216919091069291505056fea164736f6c634300080f000a",
}

// ValidatorManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorManagerMetaData.ABI instead.
var ValidatorManagerABI = ValidatorManagerMetaData.ABI

// ValidatorManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorManagerMetaData.Bin instead.
var ValidatorManagerBin = ValidatorManagerMetaData.Bin

// DeployValidatorManager deploys a new Ethereum contract, binding an instance of ValidatorManager to it.
func DeployValidatorManager(auth *bind.TransactOpts, backend bind.ContractBackend, _constructorParams IValidatorManagerConstructorParams) (common.Address, *types.Transaction, *ValidatorManager, error) {
	parsed, err := ValidatorManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorManagerBin), backend, _constructorParams)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorManager{ValidatorManagerCaller: ValidatorManagerCaller{contract: contract}, ValidatorManagerTransactor: ValidatorManagerTransactor{contract: contract}, ValidatorManagerFilterer: ValidatorManagerFilterer{contract: contract}}, nil
}

// ValidatorManager is an auto generated Go binding around an Ethereum contract.
type ValidatorManager struct {
	ValidatorManagerCaller     // Read-only binding to the contract
	ValidatorManagerTransactor // Write-only binding to the contract
	ValidatorManagerFilterer   // Log filterer for contract events
}

// ValidatorManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorManagerSession struct {
	Contract     *ValidatorManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorManagerCallerSession struct {
	Contract *ValidatorManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// ValidatorManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorManagerTransactorSession struct {
	Contract     *ValidatorManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// ValidatorManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorManagerRaw struct {
	Contract *ValidatorManager // Generic contract binding to access the raw methods on
}

// ValidatorManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorManagerCallerRaw struct {
	Contract *ValidatorManagerCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorManagerTransactorRaw struct {
	Contract *ValidatorManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorManager creates a new instance of ValidatorManager, bound to a specific deployed contract.
func NewValidatorManager(address common.Address, backend bind.ContractBackend) (*ValidatorManager, error) {
	contract, err := bindValidatorManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorManager{ValidatorManagerCaller: ValidatorManagerCaller{contract: contract}, ValidatorManagerTransactor: ValidatorManagerTransactor{contract: contract}, ValidatorManagerFilterer: ValidatorManagerFilterer{contract: contract}}, nil
}

// NewValidatorManagerCaller creates a new read-only instance of ValidatorManager, bound to a specific deployed contract.
func NewValidatorManagerCaller(address common.Address, caller bind.ContractCaller) (*ValidatorManagerCaller, error) {
	contract, err := bindValidatorManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerCaller{contract: contract}, nil
}

// NewValidatorManagerTransactor creates a new write-only instance of ValidatorManager, bound to a specific deployed contract.
func NewValidatorManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorManagerTransactor, error) {
	contract, err := bindValidatorManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerTransactor{contract: contract}, nil
}

// NewValidatorManagerFilterer creates a new log filterer instance of ValidatorManager, bound to a specific deployed contract.
func NewValidatorManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorManagerFilterer, error) {
	contract, err := bindValidatorManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerFilterer{contract: contract}, nil
}

// bindValidatorManager binds a generic wrapper to an already deployed contract.
func bindValidatorManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ValidatorManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorManager *ValidatorManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorManager.Contract.ValidatorManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorManager *ValidatorManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorManager.Contract.ValidatorManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorManager *ValidatorManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorManager.Contract.ValidatorManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorManager *ValidatorManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorManager *ValidatorManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorManager *ValidatorManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorManager.Contract.contract.Transact(opts, method, params...)
}

// ASSETMANAGER is a free data retrieval call binding the contract method 0x6874e042.
//
// Solidity: function ASSET_MANAGER() view returns(address)
func (_ValidatorManager *ValidatorManagerCaller) ASSETMANAGER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "ASSET_MANAGER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ASSETMANAGER is a free data retrieval call binding the contract method 0x6874e042.
//
// Solidity: function ASSET_MANAGER() view returns(address)
func (_ValidatorManager *ValidatorManagerSession) ASSETMANAGER() (common.Address, error) {
	return _ValidatorManager.Contract.ASSETMANAGER(&_ValidatorManager.CallOpts)
}

// ASSETMANAGER is a free data retrieval call binding the contract method 0x6874e042.
//
// Solidity: function ASSET_MANAGER() view returns(address)
func (_ValidatorManager *ValidatorManagerCallerSession) ASSETMANAGER() (common.Address, error) {
	return _ValidatorManager.Contract.ASSETMANAGER(&_ValidatorManager.CallOpts)
}

// BASEREWARD is a free data retrieval call binding the contract method 0x22009af6.
//
// Solidity: function BASE_REWARD() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) BASEREWARD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "BASE_REWARD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BASEREWARD is a free data retrieval call binding the contract method 0x22009af6.
//
// Solidity: function BASE_REWARD() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) BASEREWARD() (*big.Int, error) {
	return _ValidatorManager.Contract.BASEREWARD(&_ValidatorManager.CallOpts)
}

// BASEREWARD is a free data retrieval call binding the contract method 0x22009af6.
//
// Solidity: function BASE_REWARD() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) BASEREWARD() (*big.Int, error) {
	return _ValidatorManager.Contract.BASEREWARD(&_ValidatorManager.CallOpts)
}

// BOOSTEDREWARDDENOM is a free data retrieval call binding the contract method 0x110d6069.
//
// Solidity: function BOOSTED_REWARD_DENOM() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) BOOSTEDREWARDDENOM(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "BOOSTED_REWARD_DENOM")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BOOSTEDREWARDDENOM is a free data retrieval call binding the contract method 0x110d6069.
//
// Solidity: function BOOSTED_REWARD_DENOM() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) BOOSTEDREWARDDENOM() (*big.Int, error) {
	return _ValidatorManager.Contract.BOOSTEDREWARDDENOM(&_ValidatorManager.CallOpts)
}

// BOOSTEDREWARDDENOM is a free data retrieval call binding the contract method 0x110d6069.
//
// Solidity: function BOOSTED_REWARD_DENOM() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) BOOSTEDREWARDDENOM() (*big.Int, error) {
	return _ValidatorManager.Contract.BOOSTEDREWARDDENOM(&_ValidatorManager.CallOpts)
}

// BOOSTEDREWARDNUMERATOR is a free data retrieval call binding the contract method 0x0763fa7e.
//
// Solidity: function BOOSTED_REWARD_NUMERATOR() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) BOOSTEDREWARDNUMERATOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "BOOSTED_REWARD_NUMERATOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BOOSTEDREWARDNUMERATOR is a free data retrieval call binding the contract method 0x0763fa7e.
//
// Solidity: function BOOSTED_REWARD_NUMERATOR() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) BOOSTEDREWARDNUMERATOR() (*big.Int, error) {
	return _ValidatorManager.Contract.BOOSTEDREWARDNUMERATOR(&_ValidatorManager.CallOpts)
}

// BOOSTEDREWARDNUMERATOR is a free data retrieval call binding the contract method 0x0763fa7e.
//
// Solidity: function BOOSTED_REWARD_NUMERATOR() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) BOOSTEDREWARDNUMERATOR() (*big.Int, error) {
	return _ValidatorManager.Contract.BOOSTEDREWARDNUMERATOR(&_ValidatorManager.CallOpts)
}

// COMMISSIONCHANGEDELAYSECONDS is a free data retrieval call binding the contract method 0x9e449b02.
//
// Solidity: function COMMISSION_CHANGE_DELAY_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) COMMISSIONCHANGEDELAYSECONDS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "COMMISSION_CHANGE_DELAY_SECONDS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// COMMISSIONCHANGEDELAYSECONDS is a free data retrieval call binding the contract method 0x9e449b02.
//
// Solidity: function COMMISSION_CHANGE_DELAY_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) COMMISSIONCHANGEDELAYSECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.COMMISSIONCHANGEDELAYSECONDS(&_ValidatorManager.CallOpts)
}

// COMMISSIONCHANGEDELAYSECONDS is a free data retrieval call binding the contract method 0x9e449b02.
//
// Solidity: function COMMISSION_CHANGE_DELAY_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) COMMISSIONCHANGEDELAYSECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.COMMISSIONCHANGEDELAYSECONDS(&_ValidatorManager.CallOpts)
}

// COMMISSIONRATEDENOM is a free data retrieval call binding the contract method 0xb91b2723.
//
// Solidity: function COMMISSION_RATE_DENOM() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) COMMISSIONRATEDENOM(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "COMMISSION_RATE_DENOM")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// COMMISSIONRATEDENOM is a free data retrieval call binding the contract method 0xb91b2723.
//
// Solidity: function COMMISSION_RATE_DENOM() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) COMMISSIONRATEDENOM() (*big.Int, error) {
	return _ValidatorManager.Contract.COMMISSIONRATEDENOM(&_ValidatorManager.CallOpts)
}

// COMMISSIONRATEDENOM is a free data retrieval call binding the contract method 0xb91b2723.
//
// Solidity: function COMMISSION_RATE_DENOM() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) COMMISSIONRATEDENOM() (*big.Int, error) {
	return _ValidatorManager.Contract.COMMISSIONRATEDENOM(&_ValidatorManager.CallOpts)
}

// HARDJAILPERIODSECONDS is a free data retrieval call binding the contract method 0x3ca83045.
//
// Solidity: function HARD_JAIL_PERIOD_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) HARDJAILPERIODSECONDS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "HARD_JAIL_PERIOD_SECONDS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// HARDJAILPERIODSECONDS is a free data retrieval call binding the contract method 0x3ca83045.
//
// Solidity: function HARD_JAIL_PERIOD_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) HARDJAILPERIODSECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.HARDJAILPERIODSECONDS(&_ValidatorManager.CallOpts)
}

// HARDJAILPERIODSECONDS is a free data retrieval call binding the contract method 0x3ca83045.
//
// Solidity: function HARD_JAIL_PERIOD_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) HARDJAILPERIODSECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.HARDJAILPERIODSECONDS(&_ValidatorManager.CallOpts)
}

// JAILTHRESHOLD is a free data retrieval call binding the contract method 0x42223ae9.
//
// Solidity: function JAIL_THRESHOLD() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) JAILTHRESHOLD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "JAIL_THRESHOLD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// JAILTHRESHOLD is a free data retrieval call binding the contract method 0x42223ae9.
//
// Solidity: function JAIL_THRESHOLD() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) JAILTHRESHOLD() (*big.Int, error) {
	return _ValidatorManager.Contract.JAILTHRESHOLD(&_ValidatorManager.CallOpts)
}

// JAILTHRESHOLD is a free data retrieval call binding the contract method 0x42223ae9.
//
// Solidity: function JAIL_THRESHOLD() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) JAILTHRESHOLD() (*big.Int, error) {
	return _ValidatorManager.Contract.JAILTHRESHOLD(&_ValidatorManager.CallOpts)
}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_ValidatorManager *ValidatorManagerCaller) L2ORACLE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "L2_ORACLE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_ValidatorManager *ValidatorManagerSession) L2ORACLE() (common.Address, error) {
	return _ValidatorManager.Contract.L2ORACLE(&_ValidatorManager.CallOpts)
}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_ValidatorManager *ValidatorManagerCallerSession) L2ORACLE() (common.Address, error) {
	return _ValidatorManager.Contract.L2ORACLE(&_ValidatorManager.CallOpts)
}

// MAXOUTPUTFINALIZATIONS is a free data retrieval call binding the contract method 0xe7816b7f.
//
// Solidity: function MAX_OUTPUT_FINALIZATIONS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) MAXOUTPUTFINALIZATIONS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "MAX_OUTPUT_FINALIZATIONS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXOUTPUTFINALIZATIONS is a free data retrieval call binding the contract method 0xe7816b7f.
//
// Solidity: function MAX_OUTPUT_FINALIZATIONS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) MAXOUTPUTFINALIZATIONS() (*big.Int, error) {
	return _ValidatorManager.Contract.MAXOUTPUTFINALIZATIONS(&_ValidatorManager.CallOpts)
}

// MAXOUTPUTFINALIZATIONS is a free data retrieval call binding the contract method 0xe7816b7f.
//
// Solidity: function MAX_OUTPUT_FINALIZATIONS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) MAXOUTPUTFINALIZATIONS() (*big.Int, error) {
	return _ValidatorManager.Contract.MAXOUTPUTFINALIZATIONS(&_ValidatorManager.CallOpts)
}

// MINACTIVATEAMOUNT is a free data retrieval call binding the contract method 0xb2653fe3.
//
// Solidity: function MIN_ACTIVATE_AMOUNT() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) MINACTIVATEAMOUNT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "MIN_ACTIVATE_AMOUNT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINACTIVATEAMOUNT is a free data retrieval call binding the contract method 0xb2653fe3.
//
// Solidity: function MIN_ACTIVATE_AMOUNT() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) MINACTIVATEAMOUNT() (*big.Int, error) {
	return _ValidatorManager.Contract.MINACTIVATEAMOUNT(&_ValidatorManager.CallOpts)
}

// MINACTIVATEAMOUNT is a free data retrieval call binding the contract method 0xb2653fe3.
//
// Solidity: function MIN_ACTIVATE_AMOUNT() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) MINACTIVATEAMOUNT() (*big.Int, error) {
	return _ValidatorManager.Contract.MINACTIVATEAMOUNT(&_ValidatorManager.CallOpts)
}

// MINREGISTERAMOUNT is a free data retrieval call binding the contract method 0x1796e52e.
//
// Solidity: function MIN_REGISTER_AMOUNT() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) MINREGISTERAMOUNT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "MIN_REGISTER_AMOUNT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINREGISTERAMOUNT is a free data retrieval call binding the contract method 0x1796e52e.
//
// Solidity: function MIN_REGISTER_AMOUNT() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) MINREGISTERAMOUNT() (*big.Int, error) {
	return _ValidatorManager.Contract.MINREGISTERAMOUNT(&_ValidatorManager.CallOpts)
}

// MINREGISTERAMOUNT is a free data retrieval call binding the contract method 0x1796e52e.
//
// Solidity: function MIN_REGISTER_AMOUNT() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) MINREGISTERAMOUNT() (*big.Int, error) {
	return _ValidatorManager.Contract.MINREGISTERAMOUNT(&_ValidatorManager.CallOpts)
}

// ROUNDDURATIONSECONDS is a free data retrieval call binding the contract method 0x4cca5e6c.
//
// Solidity: function ROUND_DURATION_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) ROUNDDURATIONSECONDS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "ROUND_DURATION_SECONDS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ROUNDDURATIONSECONDS is a free data retrieval call binding the contract method 0x4cca5e6c.
//
// Solidity: function ROUND_DURATION_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) ROUNDDURATIONSECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.ROUNDDURATIONSECONDS(&_ValidatorManager.CallOpts)
}

// ROUNDDURATIONSECONDS is a free data retrieval call binding the contract method 0x4cca5e6c.
//
// Solidity: function ROUND_DURATION_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) ROUNDDURATIONSECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.ROUNDDURATIONSECONDS(&_ValidatorManager.CallOpts)
}

// SOFTJAILPERIODSECONDS is a free data retrieval call binding the contract method 0xdaec6770.
//
// Solidity: function SOFT_JAIL_PERIOD_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) SOFTJAILPERIODSECONDS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "SOFT_JAIL_PERIOD_SECONDS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SOFTJAILPERIODSECONDS is a free data retrieval call binding the contract method 0xdaec6770.
//
// Solidity: function SOFT_JAIL_PERIOD_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) SOFTJAILPERIODSECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.SOFTJAILPERIODSECONDS(&_ValidatorManager.CallOpts)
}

// SOFTJAILPERIODSECONDS is a free data retrieval call binding the contract method 0xdaec6770.
//
// Solidity: function SOFT_JAIL_PERIOD_SECONDS() view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) SOFTJAILPERIODSECONDS() (*big.Int, error) {
	return _ValidatorManager.Contract.SOFTJAILPERIODSECONDS(&_ValidatorManager.CallOpts)
}

// TRUSTEDVALIDATOR is a free data retrieval call binding the contract method 0x3ee4d4a3.
//
// Solidity: function TRUSTED_VALIDATOR() view returns(address)
func (_ValidatorManager *ValidatorManagerCaller) TRUSTEDVALIDATOR(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "TRUSTED_VALIDATOR")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TRUSTEDVALIDATOR is a free data retrieval call binding the contract method 0x3ee4d4a3.
//
// Solidity: function TRUSTED_VALIDATOR() view returns(address)
func (_ValidatorManager *ValidatorManagerSession) TRUSTEDVALIDATOR() (common.Address, error) {
	return _ValidatorManager.Contract.TRUSTEDVALIDATOR(&_ValidatorManager.CallOpts)
}

// TRUSTEDVALIDATOR is a free data retrieval call binding the contract method 0x3ee4d4a3.
//
// Solidity: function TRUSTED_VALIDATOR() view returns(address)
func (_ValidatorManager *ValidatorManagerCallerSession) TRUSTEDVALIDATOR() (common.Address, error) {
	return _ValidatorManager.Contract.TRUSTEDVALIDATOR(&_ValidatorManager.CallOpts)
}

// ActivatedValidatorCount is a free data retrieval call binding the contract method 0xcdff5e19.
//
// Solidity: function activatedValidatorCount() view returns(uint32)
func (_ValidatorManager *ValidatorManagerCaller) ActivatedValidatorCount(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "activatedValidatorCount")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// ActivatedValidatorCount is a free data retrieval call binding the contract method 0xcdff5e19.
//
// Solidity: function activatedValidatorCount() view returns(uint32)
func (_ValidatorManager *ValidatorManagerSession) ActivatedValidatorCount() (uint32, error) {
	return _ValidatorManager.Contract.ActivatedValidatorCount(&_ValidatorManager.CallOpts)
}

// ActivatedValidatorCount is a free data retrieval call binding the contract method 0xcdff5e19.
//
// Solidity: function activatedValidatorCount() view returns(uint32)
func (_ValidatorManager *ValidatorManagerCallerSession) ActivatedValidatorCount() (uint32, error) {
	return _ValidatorManager.Contract.ActivatedValidatorCount(&_ValidatorManager.CallOpts)
}

// ActivatedValidatorTotalWeight is a free data retrieval call binding the contract method 0xaf6ca762.
//
// Solidity: function activatedValidatorTotalWeight() view returns(uint120)
func (_ValidatorManager *ValidatorManagerCaller) ActivatedValidatorTotalWeight(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "activatedValidatorTotalWeight")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ActivatedValidatorTotalWeight is a free data retrieval call binding the contract method 0xaf6ca762.
//
// Solidity: function activatedValidatorTotalWeight() view returns(uint120)
func (_ValidatorManager *ValidatorManagerSession) ActivatedValidatorTotalWeight() (*big.Int, error) {
	return _ValidatorManager.Contract.ActivatedValidatorTotalWeight(&_ValidatorManager.CallOpts)
}

// ActivatedValidatorTotalWeight is a free data retrieval call binding the contract method 0xaf6ca762.
//
// Solidity: function activatedValidatorTotalWeight() view returns(uint120)
func (_ValidatorManager *ValidatorManagerCallerSession) ActivatedValidatorTotalWeight() (*big.Int, error) {
	return _ValidatorManager.Contract.ActivatedValidatorTotalWeight(&_ValidatorManager.CallOpts)
}

// CanFinalizeCommissionChangeAt is a free data retrieval call binding the contract method 0xbde022bb.
//
// Solidity: function canFinalizeCommissionChangeAt(address validator) view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) CanFinalizeCommissionChangeAt(opts *bind.CallOpts, validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "canFinalizeCommissionChangeAt", validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CanFinalizeCommissionChangeAt is a free data retrieval call binding the contract method 0xbde022bb.
//
// Solidity: function canFinalizeCommissionChangeAt(address validator) view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) CanFinalizeCommissionChangeAt(validator common.Address) (*big.Int, error) {
	return _ValidatorManager.Contract.CanFinalizeCommissionChangeAt(&_ValidatorManager.CallOpts, validator)
}

// CanFinalizeCommissionChangeAt is a free data retrieval call binding the contract method 0xbde022bb.
//
// Solidity: function canFinalizeCommissionChangeAt(address validator) view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) CanFinalizeCommissionChangeAt(validator common.Address) (*big.Int, error) {
	return _ValidatorManager.Contract.CanFinalizeCommissionChangeAt(&_ValidatorManager.CallOpts, validator)
}

// CheckSubmissionEligibility is a free data retrieval call binding the contract method 0x891aab74.
//
// Solidity: function checkSubmissionEligibility(address validator) view returns()
func (_ValidatorManager *ValidatorManagerCaller) CheckSubmissionEligibility(opts *bind.CallOpts, validator common.Address) error {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "checkSubmissionEligibility", validator)

	if err != nil {
		return err
	}

	return err

}

// CheckSubmissionEligibility is a free data retrieval call binding the contract method 0x891aab74.
//
// Solidity: function checkSubmissionEligibility(address validator) view returns()
func (_ValidatorManager *ValidatorManagerSession) CheckSubmissionEligibility(validator common.Address) error {
	return _ValidatorManager.Contract.CheckSubmissionEligibility(&_ValidatorManager.CallOpts, validator)
}

// CheckSubmissionEligibility is a free data retrieval call binding the contract method 0x891aab74.
//
// Solidity: function checkSubmissionEligibility(address validator) view returns()
func (_ValidatorManager *ValidatorManagerCallerSession) CheckSubmissionEligibility(validator common.Address) error {
	return _ValidatorManager.Contract.CheckSubmissionEligibility(&_ValidatorManager.CallOpts, validator)
}

// GetCommissionRate is a free data retrieval call binding the contract method 0xe0cc26a2.
//
// Solidity: function getCommissionRate(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCaller) GetCommissionRate(opts *bind.CallOpts, validator common.Address) (uint8, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "getCommissionRate", validator)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetCommissionRate is a free data retrieval call binding the contract method 0xe0cc26a2.
//
// Solidity: function getCommissionRate(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerSession) GetCommissionRate(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.GetCommissionRate(&_ValidatorManager.CallOpts, validator)
}

// GetCommissionRate is a free data retrieval call binding the contract method 0xe0cc26a2.
//
// Solidity: function getCommissionRate(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCallerSession) GetCommissionRate(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.GetCommissionRate(&_ValidatorManager.CallOpts, validator)
}

// GetPendingCommissionRate is a free data retrieval call binding the contract method 0xc26148fe.
//
// Solidity: function getPendingCommissionRate(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCaller) GetPendingCommissionRate(opts *bind.CallOpts, validator common.Address) (uint8, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "getPendingCommissionRate", validator)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetPendingCommissionRate is a free data retrieval call binding the contract method 0xc26148fe.
//
// Solidity: function getPendingCommissionRate(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerSession) GetPendingCommissionRate(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.GetPendingCommissionRate(&_ValidatorManager.CallOpts, validator)
}

// GetPendingCommissionRate is a free data retrieval call binding the contract method 0xc26148fe.
//
// Solidity: function getPendingCommissionRate(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCallerSession) GetPendingCommissionRate(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.GetPendingCommissionRate(&_ValidatorManager.CallOpts, validator)
}

// GetStatus is a free data retrieval call binding the contract method 0x30ccebb5.
//
// Solidity: function getStatus(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCaller) GetStatus(opts *bind.CallOpts, validator common.Address) (uint8, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "getStatus", validator)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetStatus is a free data retrieval call binding the contract method 0x30ccebb5.
//
// Solidity: function getStatus(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerSession) GetStatus(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.GetStatus(&_ValidatorManager.CallOpts, validator)
}

// GetStatus is a free data retrieval call binding the contract method 0x30ccebb5.
//
// Solidity: function getStatus(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCallerSession) GetStatus(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.GetStatus(&_ValidatorManager.CallOpts, validator)
}

// GetWeight is a free data retrieval call binding the contract method 0xac6c5251.
//
// Solidity: function getWeight(address validator) view returns(uint120)
func (_ValidatorManager *ValidatorManagerCaller) GetWeight(opts *bind.CallOpts, validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "getWeight", validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetWeight is a free data retrieval call binding the contract method 0xac6c5251.
//
// Solidity: function getWeight(address validator) view returns(uint120)
func (_ValidatorManager *ValidatorManagerSession) GetWeight(validator common.Address) (*big.Int, error) {
	return _ValidatorManager.Contract.GetWeight(&_ValidatorManager.CallOpts, validator)
}

// GetWeight is a free data retrieval call binding the contract method 0xac6c5251.
//
// Solidity: function getWeight(address validator) view returns(uint120)
func (_ValidatorManager *ValidatorManagerCallerSession) GetWeight(validator common.Address) (*big.Int, error) {
	return _ValidatorManager.Contract.GetWeight(&_ValidatorManager.CallOpts, validator)
}

// InJail is a free data retrieval call binding the contract method 0x56b65e97.
//
// Solidity: function inJail(address validator) view returns(bool)
func (_ValidatorManager *ValidatorManagerCaller) InJail(opts *bind.CallOpts, validator common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "inJail", validator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// InJail is a free data retrieval call binding the contract method 0x56b65e97.
//
// Solidity: function inJail(address validator) view returns(bool)
func (_ValidatorManager *ValidatorManagerSession) InJail(validator common.Address) (bool, error) {
	return _ValidatorManager.Contract.InJail(&_ValidatorManager.CallOpts, validator)
}

// InJail is a free data retrieval call binding the contract method 0x56b65e97.
//
// Solidity: function inJail(address validator) view returns(bool)
func (_ValidatorManager *ValidatorManagerCallerSession) InJail(validator common.Address) (bool, error) {
	return _ValidatorManager.Contract.InJail(&_ValidatorManager.CallOpts, validator)
}

// IsActive is a free data retrieval call binding the contract method 0x9f8a13d7.
//
// Solidity: function isActive(address validator) view returns(bool)
func (_ValidatorManager *ValidatorManagerCaller) IsActive(opts *bind.CallOpts, validator common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "isActive", validator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsActive is a free data retrieval call binding the contract method 0x9f8a13d7.
//
// Solidity: function isActive(address validator) view returns(bool)
func (_ValidatorManager *ValidatorManagerSession) IsActive(validator common.Address) (bool, error) {
	return _ValidatorManager.Contract.IsActive(&_ValidatorManager.CallOpts, validator)
}

// IsActive is a free data retrieval call binding the contract method 0x9f8a13d7.
//
// Solidity: function isActive(address validator) view returns(bool)
func (_ValidatorManager *ValidatorManagerCallerSession) IsActive(validator common.Address) (bool, error) {
	return _ValidatorManager.Contract.IsActive(&_ValidatorManager.CallOpts, validator)
}

// JailExpiresAt is a free data retrieval call binding the contract method 0x970531c1.
//
// Solidity: function jailExpiresAt(address validator) view returns(uint128)
func (_ValidatorManager *ValidatorManagerCaller) JailExpiresAt(opts *bind.CallOpts, validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "jailExpiresAt", validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// JailExpiresAt is a free data retrieval call binding the contract method 0x970531c1.
//
// Solidity: function jailExpiresAt(address validator) view returns(uint128)
func (_ValidatorManager *ValidatorManagerSession) JailExpiresAt(validator common.Address) (*big.Int, error) {
	return _ValidatorManager.Contract.JailExpiresAt(&_ValidatorManager.CallOpts, validator)
}

// JailExpiresAt is a free data retrieval call binding the contract method 0x970531c1.
//
// Solidity: function jailExpiresAt(address validator) view returns(uint128)
func (_ValidatorManager *ValidatorManagerCallerSession) JailExpiresAt(validator common.Address) (*big.Int, error) {
	return _ValidatorManager.Contract.JailExpiresAt(&_ValidatorManager.CallOpts, validator)
}

// NextValidator is a free data retrieval call binding the contract method 0x3a549046.
//
// Solidity: function nextValidator() view returns(address)
func (_ValidatorManager *ValidatorManagerCaller) NextValidator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "nextValidator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NextValidator is a free data retrieval call binding the contract method 0x3a549046.
//
// Solidity: function nextValidator() view returns(address)
func (_ValidatorManager *ValidatorManagerSession) NextValidator() (common.Address, error) {
	return _ValidatorManager.Contract.NextValidator(&_ValidatorManager.CallOpts)
}

// NextValidator is a free data retrieval call binding the contract method 0x3a549046.
//
// Solidity: function nextValidator() view returns(address)
func (_ValidatorManager *ValidatorManagerCallerSession) NextValidator() (common.Address, error) {
	return _ValidatorManager.Contract.NextValidator(&_ValidatorManager.CallOpts)
}

// NoSubmissionCount is a free data retrieval call binding the contract method 0xdff221b5.
//
// Solidity: function noSubmissionCount(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCaller) NoSubmissionCount(opts *bind.CallOpts, validator common.Address) (uint8, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "noSubmissionCount", validator)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// NoSubmissionCount is a free data retrieval call binding the contract method 0xdff221b5.
//
// Solidity: function noSubmissionCount(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerSession) NoSubmissionCount(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.NoSubmissionCount(&_ValidatorManager.CallOpts, validator)
}

// NoSubmissionCount is a free data retrieval call binding the contract method 0xdff221b5.
//
// Solidity: function noSubmissionCount(address validator) view returns(uint8)
func (_ValidatorManager *ValidatorManagerCallerSession) NoSubmissionCount(validator common.Address) (uint8, error) {
	return _ValidatorManager.Contract.NoSubmissionCount(&_ValidatorManager.CallOpts, validator)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_ValidatorManager *ValidatorManagerCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ValidatorManager.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_ValidatorManager *ValidatorManagerSession) Version() (string, error) {
	return _ValidatorManager.Contract.Version(&_ValidatorManager.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_ValidatorManager *ValidatorManagerCallerSession) Version() (string, error) {
	return _ValidatorManager.Contract.Version(&_ValidatorManager.CallOpts)
}

// ActivateValidator is a paid mutator transaction binding the contract method 0x263a3402.
//
// Solidity: function activateValidator() returns()
func (_ValidatorManager *ValidatorManagerTransactor) ActivateValidator(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "activateValidator")
}

// ActivateValidator is a paid mutator transaction binding the contract method 0x263a3402.
//
// Solidity: function activateValidator() returns()
func (_ValidatorManager *ValidatorManagerSession) ActivateValidator() (*types.Transaction, error) {
	return _ValidatorManager.Contract.ActivateValidator(&_ValidatorManager.TransactOpts)
}

// ActivateValidator is a paid mutator transaction binding the contract method 0x263a3402.
//
// Solidity: function activateValidator() returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) ActivateValidator() (*types.Transaction, error) {
	return _ValidatorManager.Contract.ActivateValidator(&_ValidatorManager.TransactOpts)
}

// AfterSubmitL2Output is a paid mutator transaction binding the contract method 0xbe119347.
//
// Solidity: function afterSubmitL2Output(uint256 outputIndex) returns()
func (_ValidatorManager *ValidatorManagerTransactor) AfterSubmitL2Output(opts *bind.TransactOpts, outputIndex *big.Int) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "afterSubmitL2Output", outputIndex)
}

// AfterSubmitL2Output is a paid mutator transaction binding the contract method 0xbe119347.
//
// Solidity: function afterSubmitL2Output(uint256 outputIndex) returns()
func (_ValidatorManager *ValidatorManagerSession) AfterSubmitL2Output(outputIndex *big.Int) (*types.Transaction, error) {
	return _ValidatorManager.Contract.AfterSubmitL2Output(&_ValidatorManager.TransactOpts, outputIndex)
}

// AfterSubmitL2Output is a paid mutator transaction binding the contract method 0xbe119347.
//
// Solidity: function afterSubmitL2Output(uint256 outputIndex) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) AfterSubmitL2Output(outputIndex *big.Int) (*types.Transaction, error) {
	return _ValidatorManager.Contract.AfterSubmitL2Output(&_ValidatorManager.TransactOpts, outputIndex)
}

// BondValidatorKro is a paid mutator transaction binding the contract method 0x8c1516c7.
//
// Solidity: function bondValidatorKro(address validator) returns()
func (_ValidatorManager *ValidatorManagerTransactor) BondValidatorKro(opts *bind.TransactOpts, validator common.Address) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "bondValidatorKro", validator)
}

// BondValidatorKro is a paid mutator transaction binding the contract method 0x8c1516c7.
//
// Solidity: function bondValidatorKro(address validator) returns()
func (_ValidatorManager *ValidatorManagerSession) BondValidatorKro(validator common.Address) (*types.Transaction, error) {
	return _ValidatorManager.Contract.BondValidatorKro(&_ValidatorManager.TransactOpts, validator)
}

// BondValidatorKro is a paid mutator transaction binding the contract method 0x8c1516c7.
//
// Solidity: function bondValidatorKro(address validator) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) BondValidatorKro(validator common.Address) (*types.Transaction, error) {
	return _ValidatorManager.Contract.BondValidatorKro(&_ValidatorManager.TransactOpts, validator)
}

// FinalizeCommissionChange is a paid mutator transaction binding the contract method 0x943e4005.
//
// Solidity: function finalizeCommissionChange() returns()
func (_ValidatorManager *ValidatorManagerTransactor) FinalizeCommissionChange(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "finalizeCommissionChange")
}

// FinalizeCommissionChange is a paid mutator transaction binding the contract method 0x943e4005.
//
// Solidity: function finalizeCommissionChange() returns()
func (_ValidatorManager *ValidatorManagerSession) FinalizeCommissionChange() (*types.Transaction, error) {
	return _ValidatorManager.Contract.FinalizeCommissionChange(&_ValidatorManager.TransactOpts)
}

// FinalizeCommissionChange is a paid mutator transaction binding the contract method 0x943e4005.
//
// Solidity: function finalizeCommissionChange() returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) FinalizeCommissionChange() (*types.Transaction, error) {
	return _ValidatorManager.Contract.FinalizeCommissionChange(&_ValidatorManager.TransactOpts)
}

// InitCommissionChange is a paid mutator transaction binding the contract method 0xa3433d07.
//
// Solidity: function initCommissionChange(uint8 newCommissionRate) returns()
func (_ValidatorManager *ValidatorManagerTransactor) InitCommissionChange(opts *bind.TransactOpts, newCommissionRate uint8) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "initCommissionChange", newCommissionRate)
}

// InitCommissionChange is a paid mutator transaction binding the contract method 0xa3433d07.
//
// Solidity: function initCommissionChange(uint8 newCommissionRate) returns()
func (_ValidatorManager *ValidatorManagerSession) InitCommissionChange(newCommissionRate uint8) (*types.Transaction, error) {
	return _ValidatorManager.Contract.InitCommissionChange(&_ValidatorManager.TransactOpts, newCommissionRate)
}

// InitCommissionChange is a paid mutator transaction binding the contract method 0xa3433d07.
//
// Solidity: function initCommissionChange(uint8 newCommissionRate) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) InitCommissionChange(newCommissionRate uint8) (*types.Transaction, error) {
	return _ValidatorManager.Contract.InitCommissionChange(&_ValidatorManager.TransactOpts, newCommissionRate)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x065643ea.
//
// Solidity: function registerValidator(uint128 assets, uint8 commissionRate, address withdrawAccount) returns()
func (_ValidatorManager *ValidatorManagerTransactor) RegisterValidator(opts *bind.TransactOpts, assets *big.Int, commissionRate uint8, withdrawAccount common.Address) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "registerValidator", assets, commissionRate, withdrawAccount)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x065643ea.
//
// Solidity: function registerValidator(uint128 assets, uint8 commissionRate, address withdrawAccount) returns()
func (_ValidatorManager *ValidatorManagerSession) RegisterValidator(assets *big.Int, commissionRate uint8, withdrawAccount common.Address) (*types.Transaction, error) {
	return _ValidatorManager.Contract.RegisterValidator(&_ValidatorManager.TransactOpts, assets, commissionRate, withdrawAccount)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x065643ea.
//
// Solidity: function registerValidator(uint128 assets, uint8 commissionRate, address withdrawAccount) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) RegisterValidator(assets *big.Int, commissionRate uint8, withdrawAccount common.Address) (*types.Transaction, error) {
	return _ValidatorManager.Contract.RegisterValidator(&_ValidatorManager.TransactOpts, assets, commissionRate, withdrawAccount)
}

// RevertSlash is a paid mutator transaction binding the contract method 0xab04b8aa.
//
// Solidity: function revertSlash(uint256 outputIndex, address loser) returns()
func (_ValidatorManager *ValidatorManagerTransactor) RevertSlash(opts *bind.TransactOpts, outputIndex *big.Int, loser common.Address) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "revertSlash", outputIndex, loser)
}

// RevertSlash is a paid mutator transaction binding the contract method 0xab04b8aa.
//
// Solidity: function revertSlash(uint256 outputIndex, address loser) returns()
func (_ValidatorManager *ValidatorManagerSession) RevertSlash(outputIndex *big.Int, loser common.Address) (*types.Transaction, error) {
	return _ValidatorManager.Contract.RevertSlash(&_ValidatorManager.TransactOpts, outputIndex, loser)
}

// RevertSlash is a paid mutator transaction binding the contract method 0xab04b8aa.
//
// Solidity: function revertSlash(uint256 outputIndex, address loser) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) RevertSlash(outputIndex *big.Int, loser common.Address) (*types.Transaction, error) {
	return _ValidatorManager.Contract.RevertSlash(&_ValidatorManager.TransactOpts, outputIndex, loser)
}

// Slash is a paid mutator transaction binding the contract method 0xbe995dc2.
//
// Solidity: function slash(uint256 outputIndex, address winner, address loser) returns()
func (_ValidatorManager *ValidatorManagerTransactor) Slash(opts *bind.TransactOpts, outputIndex *big.Int, winner common.Address, loser common.Address) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "slash", outputIndex, winner, loser)
}

// Slash is a paid mutator transaction binding the contract method 0xbe995dc2.
//
// Solidity: function slash(uint256 outputIndex, address winner, address loser) returns()
func (_ValidatorManager *ValidatorManagerSession) Slash(outputIndex *big.Int, winner common.Address, loser common.Address) (*types.Transaction, error) {
	return _ValidatorManager.Contract.Slash(&_ValidatorManager.TransactOpts, outputIndex, winner, loser)
}

// Slash is a paid mutator transaction binding the contract method 0xbe995dc2.
//
// Solidity: function slash(uint256 outputIndex, address winner, address loser) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) Slash(outputIndex *big.Int, winner common.Address, loser common.Address) (*types.Transaction, error) {
	return _ValidatorManager.Contract.Slash(&_ValidatorManager.TransactOpts, outputIndex, winner, loser)
}

// TryActivateValidator is a paid mutator transaction binding the contract method 0xe428c2f4.
//
// Solidity: function tryActivateValidator(address validator) returns()
func (_ValidatorManager *ValidatorManagerTransactor) TryActivateValidator(opts *bind.TransactOpts, validator common.Address) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "tryActivateValidator", validator)
}

// TryActivateValidator is a paid mutator transaction binding the contract method 0xe428c2f4.
//
// Solidity: function tryActivateValidator(address validator) returns()
func (_ValidatorManager *ValidatorManagerSession) TryActivateValidator(validator common.Address) (*types.Transaction, error) {
	return _ValidatorManager.Contract.TryActivateValidator(&_ValidatorManager.TransactOpts, validator)
}

// TryActivateValidator is a paid mutator transaction binding the contract method 0xe428c2f4.
//
// Solidity: function tryActivateValidator(address validator) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) TryActivateValidator(validator common.Address) (*types.Transaction, error) {
	return _ValidatorManager.Contract.TryActivateValidator(&_ValidatorManager.TransactOpts, validator)
}

// TryUnjail is a paid mutator transaction binding the contract method 0x7d2243b4.
//
// Solidity: function tryUnjail() returns()
func (_ValidatorManager *ValidatorManagerTransactor) TryUnjail(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "tryUnjail")
}

// TryUnjail is a paid mutator transaction binding the contract method 0x7d2243b4.
//
// Solidity: function tryUnjail() returns()
func (_ValidatorManager *ValidatorManagerSession) TryUnjail() (*types.Transaction, error) {
	return _ValidatorManager.Contract.TryUnjail(&_ValidatorManager.TransactOpts)
}

// TryUnjail is a paid mutator transaction binding the contract method 0x7d2243b4.
//
// Solidity: function tryUnjail() returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) TryUnjail() (*types.Transaction, error) {
	return _ValidatorManager.Contract.TryUnjail(&_ValidatorManager.TransactOpts)
}

// UnbondValidatorKro is a paid mutator transaction binding the contract method 0xa8387172.
//
// Solidity: function unbondValidatorKro(address validator) returns()
func (_ValidatorManager *ValidatorManagerTransactor) UnbondValidatorKro(opts *bind.TransactOpts, validator common.Address) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "unbondValidatorKro", validator)
}

// UnbondValidatorKro is a paid mutator transaction binding the contract method 0xa8387172.
//
// Solidity: function unbondValidatorKro(address validator) returns()
func (_ValidatorManager *ValidatorManagerSession) UnbondValidatorKro(validator common.Address) (*types.Transaction, error) {
	return _ValidatorManager.Contract.UnbondValidatorKro(&_ValidatorManager.TransactOpts, validator)
}

// UnbondValidatorKro is a paid mutator transaction binding the contract method 0xa8387172.
//
// Solidity: function unbondValidatorKro(address validator) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) UnbondValidatorKro(validator common.Address) (*types.Transaction, error) {
	return _ValidatorManager.Contract.UnbondValidatorKro(&_ValidatorManager.TransactOpts, validator)
}

// UpdateValidatorTree is a paid mutator transaction binding the contract method 0x5bab847f.
//
// Solidity: function updateValidatorTree(address validator, bool tryRemove) returns()
func (_ValidatorManager *ValidatorManagerTransactor) UpdateValidatorTree(opts *bind.TransactOpts, validator common.Address, tryRemove bool) (*types.Transaction, error) {
	return _ValidatorManager.contract.Transact(opts, "updateValidatorTree", validator, tryRemove)
}

// UpdateValidatorTree is a paid mutator transaction binding the contract method 0x5bab847f.
//
// Solidity: function updateValidatorTree(address validator, bool tryRemove) returns()
func (_ValidatorManager *ValidatorManagerSession) UpdateValidatorTree(validator common.Address, tryRemove bool) (*types.Transaction, error) {
	return _ValidatorManager.Contract.UpdateValidatorTree(&_ValidatorManager.TransactOpts, validator, tryRemove)
}

// UpdateValidatorTree is a paid mutator transaction binding the contract method 0x5bab847f.
//
// Solidity: function updateValidatorTree(address validator, bool tryRemove) returns()
func (_ValidatorManager *ValidatorManagerTransactorSession) UpdateValidatorTree(validator common.Address, tryRemove bool) (*types.Transaction, error) {
	return _ValidatorManager.Contract.UpdateValidatorTree(&_ValidatorManager.TransactOpts, validator, tryRemove)
}

// ValidatorManagerChallengeRewardDistributedIterator is returned from FilterChallengeRewardDistributed and is used to iterate over the raw logs and unpacked data for ChallengeRewardDistributed events raised by the ValidatorManager contract.
type ValidatorManagerChallengeRewardDistributedIterator struct {
	Event *ValidatorManagerChallengeRewardDistributed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerChallengeRewardDistributedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerChallengeRewardDistributed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerChallengeRewardDistributed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerChallengeRewardDistributedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerChallengeRewardDistributedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerChallengeRewardDistributed represents a ChallengeRewardDistributed event raised by the ValidatorManager contract.
type ValidatorManagerChallengeRewardDistributed struct {
	OutputIndex *big.Int
	Recipient   common.Address
	Amount      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterChallengeRewardDistributed is a free log retrieval operation binding the contract event 0xd537f9e63e8da05cdb52f795e1c79d7b163e2517d5229375474dbe60b48cfa14.
//
// Solidity: event ChallengeRewardDistributed(uint256 indexed outputIndex, address indexed recipient, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) FilterChallengeRewardDistributed(opts *bind.FilterOpts, outputIndex []*big.Int, recipient []common.Address) (*ValidatorManagerChallengeRewardDistributedIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ChallengeRewardDistributed", outputIndexRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerChallengeRewardDistributedIterator{contract: _ValidatorManager.contract, event: "ChallengeRewardDistributed", logs: logs, sub: sub}, nil
}

// WatchChallengeRewardDistributed is a free log subscription operation binding the contract event 0xd537f9e63e8da05cdb52f795e1c79d7b163e2517d5229375474dbe60b48cfa14.
//
// Solidity: event ChallengeRewardDistributed(uint256 indexed outputIndex, address indexed recipient, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) WatchChallengeRewardDistributed(opts *bind.WatchOpts, sink chan<- *ValidatorManagerChallengeRewardDistributed, outputIndex []*big.Int, recipient []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ChallengeRewardDistributed", outputIndexRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerChallengeRewardDistributed)
				if err := _ValidatorManager.contract.UnpackLog(event, "ChallengeRewardDistributed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeRewardDistributed is a log parse operation binding the contract event 0xd537f9e63e8da05cdb52f795e1c79d7b163e2517d5229375474dbe60b48cfa14.
//
// Solidity: event ChallengeRewardDistributed(uint256 indexed outputIndex, address indexed recipient, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) ParseChallengeRewardDistributed(log types.Log) (*ValidatorManagerChallengeRewardDistributed, error) {
	event := new(ValidatorManagerChallengeRewardDistributed)
	if err := _ValidatorManager.contract.UnpackLog(event, "ChallengeRewardDistributed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerRewardDistributedIterator is returned from FilterRewardDistributed and is used to iterate over the raw logs and unpacked data for RewardDistributed events raised by the ValidatorManager contract.
type ValidatorManagerRewardDistributedIterator struct {
	Event *ValidatorManagerRewardDistributed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerRewardDistributedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerRewardDistributed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerRewardDistributed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerRewardDistributedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerRewardDistributedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerRewardDistributed represents a RewardDistributed event raised by the ValidatorManager contract.
type ValidatorManagerRewardDistributed struct {
	OutputIndex     *big.Int
	Validator       common.Address
	ValidatorReward *big.Int
	BaseReward      *big.Int
	BoostedReward   *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterRewardDistributed is a free log retrieval operation binding the contract event 0xd74a44a8cd6c73740a70271e07ee96d8a495ff30037ae6381cbcdb8fe7f2a1ea.
//
// Solidity: event RewardDistributed(uint256 indexed outputIndex, address indexed validator, uint128 validatorReward, uint128 baseReward, uint128 boostedReward)
func (_ValidatorManager *ValidatorManagerFilterer) FilterRewardDistributed(opts *bind.FilterOpts, outputIndex []*big.Int, validator []common.Address) (*ValidatorManagerRewardDistributedIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "RewardDistributed", outputIndexRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerRewardDistributedIterator{contract: _ValidatorManager.contract, event: "RewardDistributed", logs: logs, sub: sub}, nil
}

// WatchRewardDistributed is a free log subscription operation binding the contract event 0xd74a44a8cd6c73740a70271e07ee96d8a495ff30037ae6381cbcdb8fe7f2a1ea.
//
// Solidity: event RewardDistributed(uint256 indexed outputIndex, address indexed validator, uint128 validatorReward, uint128 baseReward, uint128 boostedReward)
func (_ValidatorManager *ValidatorManagerFilterer) WatchRewardDistributed(opts *bind.WatchOpts, sink chan<- *ValidatorManagerRewardDistributed, outputIndex []*big.Int, validator []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "RewardDistributed", outputIndexRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerRewardDistributed)
				if err := _ValidatorManager.contract.UnpackLog(event, "RewardDistributed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardDistributed is a log parse operation binding the contract event 0xd74a44a8cd6c73740a70271e07ee96d8a495ff30037ae6381cbcdb8fe7f2a1ea.
//
// Solidity: event RewardDistributed(uint256 indexed outputIndex, address indexed validator, uint128 validatorReward, uint128 baseReward, uint128 boostedReward)
func (_ValidatorManager *ValidatorManagerFilterer) ParseRewardDistributed(log types.Log) (*ValidatorManagerRewardDistributed, error) {
	event := new(ValidatorManagerRewardDistributed)
	if err := _ValidatorManager.contract.UnpackLog(event, "RewardDistributed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerSlashRevertedIterator is returned from FilterSlashReverted and is used to iterate over the raw logs and unpacked data for SlashReverted events raised by the ValidatorManager contract.
type ValidatorManagerSlashRevertedIterator struct {
	Event *ValidatorManagerSlashReverted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerSlashRevertedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerSlashReverted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerSlashReverted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerSlashRevertedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerSlashRevertedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerSlashReverted represents a SlashReverted event raised by the ValidatorManager contract.
type ValidatorManagerSlashReverted struct {
	OutputIndex *big.Int
	Loser       common.Address
	Amount      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSlashReverted is a free log retrieval operation binding the contract event 0xe2d313b9d9b90c2930241ea64ee5d6f4ff30dfd44a15cd3f1df2c6cb8021ec07.
//
// Solidity: event SlashReverted(uint256 indexed outputIndex, address indexed loser, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) FilterSlashReverted(opts *bind.FilterOpts, outputIndex []*big.Int, loser []common.Address) (*ValidatorManagerSlashRevertedIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var loserRule []interface{}
	for _, loserItem := range loser {
		loserRule = append(loserRule, loserItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "SlashReverted", outputIndexRule, loserRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerSlashRevertedIterator{contract: _ValidatorManager.contract, event: "SlashReverted", logs: logs, sub: sub}, nil
}

// WatchSlashReverted is a free log subscription operation binding the contract event 0xe2d313b9d9b90c2930241ea64ee5d6f4ff30dfd44a15cd3f1df2c6cb8021ec07.
//
// Solidity: event SlashReverted(uint256 indexed outputIndex, address indexed loser, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) WatchSlashReverted(opts *bind.WatchOpts, sink chan<- *ValidatorManagerSlashReverted, outputIndex []*big.Int, loser []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var loserRule []interface{}
	for _, loserItem := range loser {
		loserRule = append(loserRule, loserItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "SlashReverted", outputIndexRule, loserRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerSlashReverted)
				if err := _ValidatorManager.contract.UnpackLog(event, "SlashReverted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashReverted is a log parse operation binding the contract event 0xe2d313b9d9b90c2930241ea64ee5d6f4ff30dfd44a15cd3f1df2c6cb8021ec07.
//
// Solidity: event SlashReverted(uint256 indexed outputIndex, address indexed loser, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) ParseSlashReverted(log types.Log) (*ValidatorManagerSlashReverted, error) {
	event := new(ValidatorManagerSlashReverted)
	if err := _ValidatorManager.contract.UnpackLog(event, "SlashReverted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerSlashedIterator is returned from FilterSlashed and is used to iterate over the raw logs and unpacked data for Slashed events raised by the ValidatorManager contract.
type ValidatorManagerSlashedIterator struct {
	Event *ValidatorManagerSlashed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerSlashedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerSlashed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerSlashed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerSlashedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerSlashedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerSlashed represents a Slashed event raised by the ValidatorManager contract.
type ValidatorManagerSlashed struct {
	OutputIndex *big.Int
	Loser       common.Address
	Amount      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSlashed is a free log retrieval operation binding the contract event 0x1237821480ce4d75f917bc39d1641eb17a5e09a2d5bf982cdd8cb2561aa28e68.
//
// Solidity: event Slashed(uint256 indexed outputIndex, address indexed loser, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) FilterSlashed(opts *bind.FilterOpts, outputIndex []*big.Int, loser []common.Address) (*ValidatorManagerSlashedIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var loserRule []interface{}
	for _, loserItem := range loser {
		loserRule = append(loserRule, loserItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "Slashed", outputIndexRule, loserRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerSlashedIterator{contract: _ValidatorManager.contract, event: "Slashed", logs: logs, sub: sub}, nil
}

// WatchSlashed is a free log subscription operation binding the contract event 0x1237821480ce4d75f917bc39d1641eb17a5e09a2d5bf982cdd8cb2561aa28e68.
//
// Solidity: event Slashed(uint256 indexed outputIndex, address indexed loser, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) WatchSlashed(opts *bind.WatchOpts, sink chan<- *ValidatorManagerSlashed, outputIndex []*big.Int, loser []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var loserRule []interface{}
	for _, loserItem := range loser {
		loserRule = append(loserRule, loserItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "Slashed", outputIndexRule, loserRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerSlashed)
				if err := _ValidatorManager.contract.UnpackLog(event, "Slashed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashed is a log parse operation binding the contract event 0x1237821480ce4d75f917bc39d1641eb17a5e09a2d5bf982cdd8cb2561aa28e68.
//
// Solidity: event Slashed(uint256 indexed outputIndex, address indexed loser, uint128 amount)
func (_ValidatorManager *ValidatorManagerFilterer) ParseSlashed(log types.Log) (*ValidatorManagerSlashed, error) {
	event := new(ValidatorManagerSlashed)
	if err := _ValidatorManager.contract.UnpackLog(event, "Slashed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerValidatorActivatedIterator is returned from FilterValidatorActivated and is used to iterate over the raw logs and unpacked data for ValidatorActivated events raised by the ValidatorManager contract.
type ValidatorManagerValidatorActivatedIterator struct {
	Event *ValidatorManagerValidatorActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerValidatorActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerValidatorActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerValidatorActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerValidatorActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerValidatorActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerValidatorActivated represents a ValidatorActivated event raised by the ValidatorManager contract.
type ValidatorManagerValidatorActivated struct {
	Validator   common.Address
	ActivatedAt *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterValidatorActivated is a free log retrieval operation binding the contract event 0xf33a24861b76047debce215c7ae4915a9befc5d870e97efbd4152df23c72112a.
//
// Solidity: event ValidatorActivated(address indexed validator, uint256 activatedAt)
func (_ValidatorManager *ValidatorManagerFilterer) FilterValidatorActivated(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerValidatorActivatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ValidatorActivated", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerValidatorActivatedIterator{contract: _ValidatorManager.contract, event: "ValidatorActivated", logs: logs, sub: sub}, nil
}

// WatchValidatorActivated is a free log subscription operation binding the contract event 0xf33a24861b76047debce215c7ae4915a9befc5d870e97efbd4152df23c72112a.
//
// Solidity: event ValidatorActivated(address indexed validator, uint256 activatedAt)
func (_ValidatorManager *ValidatorManagerFilterer) WatchValidatorActivated(opts *bind.WatchOpts, sink chan<- *ValidatorManagerValidatorActivated, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ValidatorActivated", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerValidatorActivated)
				if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorActivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorActivated is a log parse operation binding the contract event 0xf33a24861b76047debce215c7ae4915a9befc5d870e97efbd4152df23c72112a.
//
// Solidity: event ValidatorActivated(address indexed validator, uint256 activatedAt)
func (_ValidatorManager *ValidatorManagerFilterer) ParseValidatorActivated(log types.Log) (*ValidatorManagerValidatorActivated, error) {
	event := new(ValidatorManagerValidatorActivated)
	if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorActivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerValidatorCommissionChangeFinalizedIterator is returned from FilterValidatorCommissionChangeFinalized and is used to iterate over the raw logs and unpacked data for ValidatorCommissionChangeFinalized events raised by the ValidatorManager contract.
type ValidatorManagerValidatorCommissionChangeFinalizedIterator struct {
	Event *ValidatorManagerValidatorCommissionChangeFinalized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerValidatorCommissionChangeFinalizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerValidatorCommissionChangeFinalized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerValidatorCommissionChangeFinalized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerValidatorCommissionChangeFinalizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerValidatorCommissionChangeFinalizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerValidatorCommissionChangeFinalized represents a ValidatorCommissionChangeFinalized event raised by the ValidatorManager contract.
type ValidatorManagerValidatorCommissionChangeFinalized struct {
	Validator         common.Address
	OldCommissionRate uint8
	NewCommissionRate uint8
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterValidatorCommissionChangeFinalized is a free log retrieval operation binding the contract event 0xa40865ec905b139b9cdbd0566756b576b074c47d9dde9f62388b1d66d3e72a64.
//
// Solidity: event ValidatorCommissionChangeFinalized(address indexed validator, uint8 oldCommissionRate, uint8 newCommissionRate)
func (_ValidatorManager *ValidatorManagerFilterer) FilterValidatorCommissionChangeFinalized(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerValidatorCommissionChangeFinalizedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ValidatorCommissionChangeFinalized", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerValidatorCommissionChangeFinalizedIterator{contract: _ValidatorManager.contract, event: "ValidatorCommissionChangeFinalized", logs: logs, sub: sub}, nil
}

// WatchValidatorCommissionChangeFinalized is a free log subscription operation binding the contract event 0xa40865ec905b139b9cdbd0566756b576b074c47d9dde9f62388b1d66d3e72a64.
//
// Solidity: event ValidatorCommissionChangeFinalized(address indexed validator, uint8 oldCommissionRate, uint8 newCommissionRate)
func (_ValidatorManager *ValidatorManagerFilterer) WatchValidatorCommissionChangeFinalized(opts *bind.WatchOpts, sink chan<- *ValidatorManagerValidatorCommissionChangeFinalized, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ValidatorCommissionChangeFinalized", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerValidatorCommissionChangeFinalized)
				if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorCommissionChangeFinalized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCommissionChangeFinalized is a log parse operation binding the contract event 0xa40865ec905b139b9cdbd0566756b576b074c47d9dde9f62388b1d66d3e72a64.
//
// Solidity: event ValidatorCommissionChangeFinalized(address indexed validator, uint8 oldCommissionRate, uint8 newCommissionRate)
func (_ValidatorManager *ValidatorManagerFilterer) ParseValidatorCommissionChangeFinalized(log types.Log) (*ValidatorManagerValidatorCommissionChangeFinalized, error) {
	event := new(ValidatorManagerValidatorCommissionChangeFinalized)
	if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorCommissionChangeFinalized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerValidatorCommissionChangeInitiatedIterator is returned from FilterValidatorCommissionChangeInitiated and is used to iterate over the raw logs and unpacked data for ValidatorCommissionChangeInitiated events raised by the ValidatorManager contract.
type ValidatorManagerValidatorCommissionChangeInitiatedIterator struct {
	Event *ValidatorManagerValidatorCommissionChangeInitiated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerValidatorCommissionChangeInitiatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerValidatorCommissionChangeInitiated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerValidatorCommissionChangeInitiated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerValidatorCommissionChangeInitiatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerValidatorCommissionChangeInitiatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerValidatorCommissionChangeInitiated represents a ValidatorCommissionChangeInitiated event raised by the ValidatorManager contract.
type ValidatorManagerValidatorCommissionChangeInitiated struct {
	Validator         common.Address
	OldCommissionRate uint8
	NewCommissionRate uint8
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterValidatorCommissionChangeInitiated is a free log retrieval operation binding the contract event 0x9d9fe61047777339f4f4cb36a1f75ee90e3c6aa90c13abd3ffa07f6f86e0a307.
//
// Solidity: event ValidatorCommissionChangeInitiated(address indexed validator, uint8 oldCommissionRate, uint8 newCommissionRate)
func (_ValidatorManager *ValidatorManagerFilterer) FilterValidatorCommissionChangeInitiated(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerValidatorCommissionChangeInitiatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ValidatorCommissionChangeInitiated", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerValidatorCommissionChangeInitiatedIterator{contract: _ValidatorManager.contract, event: "ValidatorCommissionChangeInitiated", logs: logs, sub: sub}, nil
}

// WatchValidatorCommissionChangeInitiated is a free log subscription operation binding the contract event 0x9d9fe61047777339f4f4cb36a1f75ee90e3c6aa90c13abd3ffa07f6f86e0a307.
//
// Solidity: event ValidatorCommissionChangeInitiated(address indexed validator, uint8 oldCommissionRate, uint8 newCommissionRate)
func (_ValidatorManager *ValidatorManagerFilterer) WatchValidatorCommissionChangeInitiated(opts *bind.WatchOpts, sink chan<- *ValidatorManagerValidatorCommissionChangeInitiated, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ValidatorCommissionChangeInitiated", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerValidatorCommissionChangeInitiated)
				if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorCommissionChangeInitiated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCommissionChangeInitiated is a log parse operation binding the contract event 0x9d9fe61047777339f4f4cb36a1f75ee90e3c6aa90c13abd3ffa07f6f86e0a307.
//
// Solidity: event ValidatorCommissionChangeInitiated(address indexed validator, uint8 oldCommissionRate, uint8 newCommissionRate)
func (_ValidatorManager *ValidatorManagerFilterer) ParseValidatorCommissionChangeInitiated(log types.Log) (*ValidatorManagerValidatorCommissionChangeInitiated, error) {
	event := new(ValidatorManagerValidatorCommissionChangeInitiated)
	if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorCommissionChangeInitiated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerValidatorJailedIterator is returned from FilterValidatorJailed and is used to iterate over the raw logs and unpacked data for ValidatorJailed events raised by the ValidatorManager contract.
type ValidatorManagerValidatorJailedIterator struct {
	Event *ValidatorManagerValidatorJailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerValidatorJailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerValidatorJailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerValidatorJailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerValidatorJailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerValidatorJailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerValidatorJailed represents a ValidatorJailed event raised by the ValidatorManager contract.
type ValidatorManagerValidatorJailed struct {
	Validator common.Address
	ExpiresAt *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorJailed is a free log retrieval operation binding the contract event 0x95a398f2b6b2ad94f281708c97fe502386fc16adca43daed577a1e992a4cc814.
//
// Solidity: event ValidatorJailed(address indexed validator, uint128 expiresAt)
func (_ValidatorManager *ValidatorManagerFilterer) FilterValidatorJailed(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerValidatorJailedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ValidatorJailed", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerValidatorJailedIterator{contract: _ValidatorManager.contract, event: "ValidatorJailed", logs: logs, sub: sub}, nil
}

// WatchValidatorJailed is a free log subscription operation binding the contract event 0x95a398f2b6b2ad94f281708c97fe502386fc16adca43daed577a1e992a4cc814.
//
// Solidity: event ValidatorJailed(address indexed validator, uint128 expiresAt)
func (_ValidatorManager *ValidatorManagerFilterer) WatchValidatorJailed(opts *bind.WatchOpts, sink chan<- *ValidatorManagerValidatorJailed, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ValidatorJailed", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerValidatorJailed)
				if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorJailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJailed is a log parse operation binding the contract event 0x95a398f2b6b2ad94f281708c97fe502386fc16adca43daed577a1e992a4cc814.
//
// Solidity: event ValidatorJailed(address indexed validator, uint128 expiresAt)
func (_ValidatorManager *ValidatorManagerFilterer) ParseValidatorJailed(log types.Log) (*ValidatorManagerValidatorJailed, error) {
	event := new(ValidatorManagerValidatorJailed)
	if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorJailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerValidatorRegisteredIterator is returned from FilterValidatorRegistered and is used to iterate over the raw logs and unpacked data for ValidatorRegistered events raised by the ValidatorManager contract.
type ValidatorManagerValidatorRegisteredIterator struct {
	Event *ValidatorManagerValidatorRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerValidatorRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerValidatorRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerValidatorRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerValidatorRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerValidatorRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerValidatorRegistered represents a ValidatorRegistered event raised by the ValidatorManager contract.
type ValidatorManagerValidatorRegistered struct {
	Validator      common.Address
	Activated      bool
	CommissionRate uint8
	Assets         *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorRegistered is a free log retrieval operation binding the contract event 0x36f43e5c63d19ec0a34168ec0838b5bfae77656b9f5b94b896e9d2172a41f4fe.
//
// Solidity: event ValidatorRegistered(address indexed validator, bool activated, uint8 commissionRate, uint128 assets)
func (_ValidatorManager *ValidatorManagerFilterer) FilterValidatorRegistered(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerValidatorRegisteredIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ValidatorRegistered", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerValidatorRegisteredIterator{contract: _ValidatorManager.contract, event: "ValidatorRegistered", logs: logs, sub: sub}, nil
}

// WatchValidatorRegistered is a free log subscription operation binding the contract event 0x36f43e5c63d19ec0a34168ec0838b5bfae77656b9f5b94b896e9d2172a41f4fe.
//
// Solidity: event ValidatorRegistered(address indexed validator, bool activated, uint8 commissionRate, uint128 assets)
func (_ValidatorManager *ValidatorManagerFilterer) WatchValidatorRegistered(opts *bind.WatchOpts, sink chan<- *ValidatorManagerValidatorRegistered, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ValidatorRegistered", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerValidatorRegistered)
				if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorRegistered is a log parse operation binding the contract event 0x36f43e5c63d19ec0a34168ec0838b5bfae77656b9f5b94b896e9d2172a41f4fe.
//
// Solidity: event ValidatorRegistered(address indexed validator, bool activated, uint8 commissionRate, uint128 assets)
func (_ValidatorManager *ValidatorManagerFilterer) ParseValidatorRegistered(log types.Log) (*ValidatorManagerValidatorRegistered, error) {
	event := new(ValidatorManagerValidatorRegistered)
	if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerValidatorStoppedIterator is returned from FilterValidatorStopped and is used to iterate over the raw logs and unpacked data for ValidatorStopped events raised by the ValidatorManager contract.
type ValidatorManagerValidatorStoppedIterator struct {
	Event *ValidatorManagerValidatorStopped // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerValidatorStoppedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerValidatorStopped)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerValidatorStopped)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerValidatorStoppedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerValidatorStoppedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerValidatorStopped represents a ValidatorStopped event raised by the ValidatorManager contract.
type ValidatorManagerValidatorStopped struct {
	Validator common.Address
	StopsAt   *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorStopped is a free log retrieval operation binding the contract event 0xdee7e7274fb1911def379ceda542a2723358c99d6d1f89fcbdbe9e9d638d9961.
//
// Solidity: event ValidatorStopped(address indexed validator, uint256 stopsAt)
func (_ValidatorManager *ValidatorManagerFilterer) FilterValidatorStopped(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerValidatorStoppedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ValidatorStopped", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerValidatorStoppedIterator{contract: _ValidatorManager.contract, event: "ValidatorStopped", logs: logs, sub: sub}, nil
}

// WatchValidatorStopped is a free log subscription operation binding the contract event 0xdee7e7274fb1911def379ceda542a2723358c99d6d1f89fcbdbe9e9d638d9961.
//
// Solidity: event ValidatorStopped(address indexed validator, uint256 stopsAt)
func (_ValidatorManager *ValidatorManagerFilterer) WatchValidatorStopped(opts *bind.WatchOpts, sink chan<- *ValidatorManagerValidatorStopped, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ValidatorStopped", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerValidatorStopped)
				if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorStopped", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorStopped is a log parse operation binding the contract event 0xdee7e7274fb1911def379ceda542a2723358c99d6d1f89fcbdbe9e9d638d9961.
//
// Solidity: event ValidatorStopped(address indexed validator, uint256 stopsAt)
func (_ValidatorManager *ValidatorManagerFilterer) ParseValidatorStopped(log types.Log) (*ValidatorManagerValidatorStopped, error) {
	event := new(ValidatorManagerValidatorStopped)
	if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorStopped", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorManagerValidatorUnjailedIterator is returned from FilterValidatorUnjailed and is used to iterate over the raw logs and unpacked data for ValidatorUnjailed events raised by the ValidatorManager contract.
type ValidatorManagerValidatorUnjailedIterator struct {
	Event *ValidatorManagerValidatorUnjailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorManagerValidatorUnjailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorManagerValidatorUnjailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorManagerValidatorUnjailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorManagerValidatorUnjailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorManagerValidatorUnjailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorManagerValidatorUnjailed represents a ValidatorUnjailed event raised by the ValidatorManager contract.
type ValidatorManagerValidatorUnjailed struct {
	Validator common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorUnjailed is a free log retrieval operation binding the contract event 0x9390b453426557da5ebdc31f19a37753ca04addf656d32f35232211bb2af3f19.
//
// Solidity: event ValidatorUnjailed(address indexed validator)
func (_ValidatorManager *ValidatorManagerFilterer) FilterValidatorUnjailed(opts *bind.FilterOpts, validator []common.Address) (*ValidatorManagerValidatorUnjailedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.FilterLogs(opts, "ValidatorUnjailed", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerValidatorUnjailedIterator{contract: _ValidatorManager.contract, event: "ValidatorUnjailed", logs: logs, sub: sub}, nil
}

// WatchValidatorUnjailed is a free log subscription operation binding the contract event 0x9390b453426557da5ebdc31f19a37753ca04addf656d32f35232211bb2af3f19.
//
// Solidity: event ValidatorUnjailed(address indexed validator)
func (_ValidatorManager *ValidatorManagerFilterer) WatchValidatorUnjailed(opts *bind.WatchOpts, sink chan<- *ValidatorManagerValidatorUnjailed, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorManager.contract.WatchLogs(opts, "ValidatorUnjailed", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorManagerValidatorUnjailed)
				if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorUnjailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorUnjailed is a log parse operation binding the contract event 0x9390b453426557da5ebdc31f19a37753ca04addf656d32f35232211bb2af3f19.
//
// Solidity: event ValidatorUnjailed(address indexed validator)
func (_ValidatorManager *ValidatorManagerFilterer) ParseValidatorUnjailed(log types.Log) (*ValidatorManagerValidatorUnjailed, error) {
	event := new(ValidatorManagerValidatorUnjailed)
	if err := _ValidatorManager.contract.UnpackLog(event, "ValidatorUnjailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
