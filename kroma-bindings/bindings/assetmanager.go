// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// AssetManagerMetaData contains all meta data concerning the AssetManager contract.
var AssetManagerMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_assetToken\",\"type\":\"address\",\"internalType\":\"contractIERC20\"},{\"name\":\"_kgh\",\"type\":\"address\",\"internalType\":\"contractIERC721\"},{\"name\":\"_securityCouncil\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_validatorRewardVault\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_validatorManager\",\"type\":\"address\",\"internalType\":\"contractIValidatorManager\"},{\"name\":\"_minDelegationPeriod\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"_bondAmount\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"ASSET_TOKEN\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIERC20\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"BOND_AMOUNT\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"DECIMAL_OFFSET\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"KGH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIERC721\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MIN_DELEGATION_PERIOD\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"SECURITY_COUNCIL\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"TAX_DENOMINATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"TAX_NUMERATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"VALIDATOR_MANAGER\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIValidatorManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"VALIDATOR_REWARD_VAULT\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"bondValidatorKro\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"canUndelegateKghAt\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"delegator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"canUndelegateKroAt\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"delegator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"canWithdrawAt\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"claimKghReward\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"decreaseBalanceWithChallenge\",\"inputs\":[{\"name\":\"loser\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"delegate\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"assets\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"delegateKgh\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"delegateKghBatch\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tokenIds\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"assets\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"depositToRegister\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"assets\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"withdrawAccount\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getKghNum\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"delegator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getKghReward\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"delegator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getKroAssets\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"delegator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getKroTotalShareBalance\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"delegator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getWithdrawAccount\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"increaseBalanceWithChallenge\",\"inputs\":[{\"name\":\"winner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"challengeReward\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"increaseBalanceWithReward\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"baseReward\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"boostedReward\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"validatorReward\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"onERC721Received\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"previewDelegate\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"assets\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"previewUndelegate\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"shares\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"reflectiveWeight\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"revertDecreaseBalanceWithChallenge\",\"inputs\":[{\"name\":\"loser\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"totalKghNum\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"totalKroAssets\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"totalValidatorKro\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"totalValidatorKroBonded\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"totalValidatorKroNotBonded\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"unbondValidatorKro\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"undelegate\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"assets\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"undelegateKgh\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"undelegateKghBatch\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tokenIds\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"version\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"assets\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"Deposited\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"KghBatchDelegated\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"delegator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"tokenIds\",\"type\":\"uint256[]\",\"indexed\":false,\"internalType\":\"uint256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"KghBatchUndelegated\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"delegator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"tokenIds\",\"type\":\"uint256[]\",\"indexed\":false,\"internalType\":\"uint256[]\"},{\"name\":\"amount\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"KghDelegated\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"delegator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"KghRewardClaimed\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"delegator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"KghUndelegated\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"delegator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"KroDelegated\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"delegator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"},{\"name\":\"shares\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"KroUndelegated\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"delegator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"},{\"name\":\"shares\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorKroBonded\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"},{\"name\":\"remainder\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ValidatorKroUnbonded\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"},{\"name\":\"remainder\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Withdrawn\",\"inputs\":[{\"name\":\"validator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint128\",\"indexed\":false,\"internalType\":\"uint128\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"ImproperValidatorStatus\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InsufficientAsset\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InsufficientShare\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidTokenIdsInput\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotAllowedCaller\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotAllowedZeroInput\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotElapsedMinDelegationPeriod\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ZeroAddress\",\"inputs\":[]}]",
	Bin: "",
}

// AssetManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use AssetManagerMetaData.ABI instead.
var AssetManagerABI = AssetManagerMetaData.ABI

// AssetManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AssetManagerMetaData.Bin instead.
var AssetManagerBin = AssetManagerMetaData.Bin

// DeployAssetManager deploys a new Ethereum contract, binding an instance of AssetManager to it.
func DeployAssetManager(auth *bind.TransactOpts, backend bind.ContractBackend, _assetToken common.Address, _kgh common.Address, _securityCouncil common.Address, _validatorRewardVault common.Address, _validatorManager common.Address, _minDelegationPeriod *big.Int, _bondAmount *big.Int) (common.Address, *types.Transaction, *AssetManager, error) {
	parsed, err := AssetManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AssetManagerBin), backend, _assetToken, _kgh, _securityCouncil, _validatorRewardVault, _validatorManager, _minDelegationPeriod, _bondAmount)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AssetManager{AssetManagerCaller: AssetManagerCaller{contract: contract}, AssetManagerTransactor: AssetManagerTransactor{contract: contract}, AssetManagerFilterer: AssetManagerFilterer{contract: contract}}, nil
}

// AssetManager is an auto generated Go binding around an Ethereum contract.
type AssetManager struct {
	AssetManagerCaller     // Read-only binding to the contract
	AssetManagerTransactor // Write-only binding to the contract
	AssetManagerFilterer   // Log filterer for contract events
}

// AssetManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type AssetManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AssetManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AssetManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AssetManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AssetManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AssetManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AssetManagerSession struct {
	Contract     *AssetManager     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AssetManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AssetManagerCallerSession struct {
	Contract *AssetManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// AssetManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AssetManagerTransactorSession struct {
	Contract     *AssetManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// AssetManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type AssetManagerRaw struct {
	Contract *AssetManager // Generic contract binding to access the raw methods on
}

// AssetManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AssetManagerCallerRaw struct {
	Contract *AssetManagerCaller // Generic read-only contract binding to access the raw methods on
}

// AssetManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AssetManagerTransactorRaw struct {
	Contract *AssetManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAssetManager creates a new instance of AssetManager, bound to a specific deployed contract.
func NewAssetManager(address common.Address, backend bind.ContractBackend) (*AssetManager, error) {
	contract, err := bindAssetManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AssetManager{AssetManagerCaller: AssetManagerCaller{contract: contract}, AssetManagerTransactor: AssetManagerTransactor{contract: contract}, AssetManagerFilterer: AssetManagerFilterer{contract: contract}}, nil
}

// NewAssetManagerCaller creates a new read-only instance of AssetManager, bound to a specific deployed contract.
func NewAssetManagerCaller(address common.Address, caller bind.ContractCaller) (*AssetManagerCaller, error) {
	contract, err := bindAssetManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AssetManagerCaller{contract: contract}, nil
}

// NewAssetManagerTransactor creates a new write-only instance of AssetManager, bound to a specific deployed contract.
func NewAssetManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*AssetManagerTransactor, error) {
	contract, err := bindAssetManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AssetManagerTransactor{contract: contract}, nil
}

// NewAssetManagerFilterer creates a new log filterer instance of AssetManager, bound to a specific deployed contract.
func NewAssetManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*AssetManagerFilterer, error) {
	contract, err := bindAssetManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AssetManagerFilterer{contract: contract}, nil
}

// bindAssetManager binds a generic wrapper to an already deployed contract.
func bindAssetManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AssetManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AssetManager *AssetManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AssetManager.Contract.AssetManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AssetManager *AssetManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AssetManager.Contract.AssetManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AssetManager *AssetManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AssetManager.Contract.AssetManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AssetManager *AssetManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AssetManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AssetManager *AssetManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AssetManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AssetManager *AssetManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AssetManager.Contract.contract.Transact(opts, method, params...)
}

// ASSETTOKEN is a free data retrieval call binding the contract method 0xd7062005.
//
// Solidity: function ASSET_TOKEN() view returns(address)
func (_AssetManager *AssetManagerCaller) ASSETTOKEN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "ASSET_TOKEN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ASSETTOKEN is a free data retrieval call binding the contract method 0xd7062005.
//
// Solidity: function ASSET_TOKEN() view returns(address)
func (_AssetManager *AssetManagerSession) ASSETTOKEN() (common.Address, error) {
	return _AssetManager.Contract.ASSETTOKEN(&_AssetManager.CallOpts)
}

// ASSETTOKEN is a free data retrieval call binding the contract method 0xd7062005.
//
// Solidity: function ASSET_TOKEN() view returns(address)
func (_AssetManager *AssetManagerCallerSession) ASSETTOKEN() (common.Address, error) {
	return _AssetManager.Contract.ASSETTOKEN(&_AssetManager.CallOpts)
}

// BONDAMOUNT is a free data retrieval call binding the contract method 0xbcacc70a.
//
// Solidity: function BOND_AMOUNT() view returns(uint128)
func (_AssetManager *AssetManagerCaller) BONDAMOUNT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "BOND_AMOUNT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BONDAMOUNT is a free data retrieval call binding the contract method 0xbcacc70a.
//
// Solidity: function BOND_AMOUNT() view returns(uint128)
func (_AssetManager *AssetManagerSession) BONDAMOUNT() (*big.Int, error) {
	return _AssetManager.Contract.BONDAMOUNT(&_AssetManager.CallOpts)
}

// BONDAMOUNT is a free data retrieval call binding the contract method 0xbcacc70a.
//
// Solidity: function BOND_AMOUNT() view returns(uint128)
func (_AssetManager *AssetManagerCallerSession) BONDAMOUNT() (*big.Int, error) {
	return _AssetManager.Contract.BONDAMOUNT(&_AssetManager.CallOpts)
}

// DECIMALOFFSET is a free data retrieval call binding the contract method 0xde7d4d6a.
//
// Solidity: function DECIMAL_OFFSET() view returns(uint128)
func (_AssetManager *AssetManagerCaller) DECIMALOFFSET(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "DECIMAL_OFFSET")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DECIMALOFFSET is a free data retrieval call binding the contract method 0xde7d4d6a.
//
// Solidity: function DECIMAL_OFFSET() view returns(uint128)
func (_AssetManager *AssetManagerSession) DECIMALOFFSET() (*big.Int, error) {
	return _AssetManager.Contract.DECIMALOFFSET(&_AssetManager.CallOpts)
}

// DECIMALOFFSET is a free data retrieval call binding the contract method 0xde7d4d6a.
//
// Solidity: function DECIMAL_OFFSET() view returns(uint128)
func (_AssetManager *AssetManagerCallerSession) DECIMALOFFSET() (*big.Int, error) {
	return _AssetManager.Contract.DECIMALOFFSET(&_AssetManager.CallOpts)
}

// KGH is a free data retrieval call binding the contract method 0x56576b5b.
//
// Solidity: function KGH() view returns(address)
func (_AssetManager *AssetManagerCaller) KGH(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "KGH")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// KGH is a free data retrieval call binding the contract method 0x56576b5b.
//
// Solidity: function KGH() view returns(address)
func (_AssetManager *AssetManagerSession) KGH() (common.Address, error) {
	return _AssetManager.Contract.KGH(&_AssetManager.CallOpts)
}

// KGH is a free data retrieval call binding the contract method 0x56576b5b.
//
// Solidity: function KGH() view returns(address)
func (_AssetManager *AssetManagerCallerSession) KGH() (common.Address, error) {
	return _AssetManager.Contract.KGH(&_AssetManager.CallOpts)
}

// MINDELEGATIONPERIOD is a free data retrieval call binding the contract method 0xfdbb3fd2.
//
// Solidity: function MIN_DELEGATION_PERIOD() view returns(uint128)
func (_AssetManager *AssetManagerCaller) MINDELEGATIONPERIOD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "MIN_DELEGATION_PERIOD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINDELEGATIONPERIOD is a free data retrieval call binding the contract method 0xfdbb3fd2.
//
// Solidity: function MIN_DELEGATION_PERIOD() view returns(uint128)
func (_AssetManager *AssetManagerSession) MINDELEGATIONPERIOD() (*big.Int, error) {
	return _AssetManager.Contract.MINDELEGATIONPERIOD(&_AssetManager.CallOpts)
}

// MINDELEGATIONPERIOD is a free data retrieval call binding the contract method 0xfdbb3fd2.
//
// Solidity: function MIN_DELEGATION_PERIOD() view returns(uint128)
func (_AssetManager *AssetManagerCallerSession) MINDELEGATIONPERIOD() (*big.Int, error) {
	return _AssetManager.Contract.MINDELEGATIONPERIOD(&_AssetManager.CallOpts)
}

// SECURITYCOUNCIL is a free data retrieval call binding the contract method 0x36086417.
//
// Solidity: function SECURITY_COUNCIL() view returns(address)
func (_AssetManager *AssetManagerCaller) SECURITYCOUNCIL(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "SECURITY_COUNCIL")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SECURITYCOUNCIL is a free data retrieval call binding the contract method 0x36086417.
//
// Solidity: function SECURITY_COUNCIL() view returns(address)
func (_AssetManager *AssetManagerSession) SECURITYCOUNCIL() (common.Address, error) {
	return _AssetManager.Contract.SECURITYCOUNCIL(&_AssetManager.CallOpts)
}

// SECURITYCOUNCIL is a free data retrieval call binding the contract method 0x36086417.
//
// Solidity: function SECURITY_COUNCIL() view returns(address)
func (_AssetManager *AssetManagerCallerSession) SECURITYCOUNCIL() (common.Address, error) {
	return _AssetManager.Contract.SECURITYCOUNCIL(&_AssetManager.CallOpts)
}

// TAXDENOMINATOR is a free data retrieval call binding the contract method 0xa51c9ace.
//
// Solidity: function TAX_DENOMINATOR() view returns(uint128)
func (_AssetManager *AssetManagerCaller) TAXDENOMINATOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "TAX_DENOMINATOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TAXDENOMINATOR is a free data retrieval call binding the contract method 0xa51c9ace.
//
// Solidity: function TAX_DENOMINATOR() view returns(uint128)
func (_AssetManager *AssetManagerSession) TAXDENOMINATOR() (*big.Int, error) {
	return _AssetManager.Contract.TAXDENOMINATOR(&_AssetManager.CallOpts)
}

// TAXDENOMINATOR is a free data retrieval call binding the contract method 0xa51c9ace.
//
// Solidity: function TAX_DENOMINATOR() view returns(uint128)
func (_AssetManager *AssetManagerCallerSession) TAXDENOMINATOR() (*big.Int, error) {
	return _AssetManager.Contract.TAXDENOMINATOR(&_AssetManager.CallOpts)
}

// TAXNUMERATOR is a free data retrieval call binding the contract method 0x82dae3aa.
//
// Solidity: function TAX_NUMERATOR() view returns(uint128)
func (_AssetManager *AssetManagerCaller) TAXNUMERATOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "TAX_NUMERATOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TAXNUMERATOR is a free data retrieval call binding the contract method 0x82dae3aa.
//
// Solidity: function TAX_NUMERATOR() view returns(uint128)
func (_AssetManager *AssetManagerSession) TAXNUMERATOR() (*big.Int, error) {
	return _AssetManager.Contract.TAXNUMERATOR(&_AssetManager.CallOpts)
}

// TAXNUMERATOR is a free data retrieval call binding the contract method 0x82dae3aa.
//
// Solidity: function TAX_NUMERATOR() view returns(uint128)
func (_AssetManager *AssetManagerCallerSession) TAXNUMERATOR() (*big.Int, error) {
	return _AssetManager.Contract.TAXNUMERATOR(&_AssetManager.CallOpts)
}

// VALIDATORMANAGER is a free data retrieval call binding the contract method 0xae9483e0.
//
// Solidity: function VALIDATOR_MANAGER() view returns(address)
func (_AssetManager *AssetManagerCaller) VALIDATORMANAGER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "VALIDATOR_MANAGER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// VALIDATORMANAGER is a free data retrieval call binding the contract method 0xae9483e0.
//
// Solidity: function VALIDATOR_MANAGER() view returns(address)
func (_AssetManager *AssetManagerSession) VALIDATORMANAGER() (common.Address, error) {
	return _AssetManager.Contract.VALIDATORMANAGER(&_AssetManager.CallOpts)
}

// VALIDATORMANAGER is a free data retrieval call binding the contract method 0xae9483e0.
//
// Solidity: function VALIDATOR_MANAGER() view returns(address)
func (_AssetManager *AssetManagerCallerSession) VALIDATORMANAGER() (common.Address, error) {
	return _AssetManager.Contract.VALIDATORMANAGER(&_AssetManager.CallOpts)
}

// VALIDATORREWARDVAULT is a free data retrieval call binding the contract method 0xc0a63a79.
//
// Solidity: function VALIDATOR_REWARD_VAULT() view returns(address)
func (_AssetManager *AssetManagerCaller) VALIDATORREWARDVAULT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "VALIDATOR_REWARD_VAULT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// VALIDATORREWARDVAULT is a free data retrieval call binding the contract method 0xc0a63a79.
//
// Solidity: function VALIDATOR_REWARD_VAULT() view returns(address)
func (_AssetManager *AssetManagerSession) VALIDATORREWARDVAULT() (common.Address, error) {
	return _AssetManager.Contract.VALIDATORREWARDVAULT(&_AssetManager.CallOpts)
}

// VALIDATORREWARDVAULT is a free data retrieval call binding the contract method 0xc0a63a79.
//
// Solidity: function VALIDATOR_REWARD_VAULT() view returns(address)
func (_AssetManager *AssetManagerCallerSession) VALIDATORREWARDVAULT() (common.Address, error) {
	return _AssetManager.Contract.VALIDATORREWARDVAULT(&_AssetManager.CallOpts)
}

// CanUndelegateKghAt is a free data retrieval call binding the contract method 0x86d18a94.
//
// Solidity: function canUndelegateKghAt(address validator, address delegator, uint256 tokenId) view returns(uint128)
func (_AssetManager *AssetManagerCaller) CanUndelegateKghAt(opts *bind.CallOpts, validator common.Address, delegator common.Address, tokenId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "canUndelegateKghAt", validator, delegator, tokenId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CanUndelegateKghAt is a free data retrieval call binding the contract method 0x86d18a94.
//
// Solidity: function canUndelegateKghAt(address validator, address delegator, uint256 tokenId) view returns(uint128)
func (_AssetManager *AssetManagerSession) CanUndelegateKghAt(validator common.Address, delegator common.Address, tokenId *big.Int) (*big.Int, error) {
	return _AssetManager.Contract.CanUndelegateKghAt(&_AssetManager.CallOpts, validator, delegator, tokenId)
}

// CanUndelegateKghAt is a free data retrieval call binding the contract method 0x86d18a94.
//
// Solidity: function canUndelegateKghAt(address validator, address delegator, uint256 tokenId) view returns(uint128)
func (_AssetManager *AssetManagerCallerSession) CanUndelegateKghAt(validator common.Address, delegator common.Address, tokenId *big.Int) (*big.Int, error) {
	return _AssetManager.Contract.CanUndelegateKghAt(&_AssetManager.CallOpts, validator, delegator, tokenId)
}

// CanUndelegateKroAt is a free data retrieval call binding the contract method 0xb55cd78e.
//
// Solidity: function canUndelegateKroAt(address validator, address delegator) view returns(uint128)
func (_AssetManager *AssetManagerCaller) CanUndelegateKroAt(opts *bind.CallOpts, validator common.Address, delegator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "canUndelegateKroAt", validator, delegator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CanUndelegateKroAt is a free data retrieval call binding the contract method 0xb55cd78e.
//
// Solidity: function canUndelegateKroAt(address validator, address delegator) view returns(uint128)
func (_AssetManager *AssetManagerSession) CanUndelegateKroAt(validator common.Address, delegator common.Address) (*big.Int, error) {
	return _AssetManager.Contract.CanUndelegateKroAt(&_AssetManager.CallOpts, validator, delegator)
}

// CanUndelegateKroAt is a free data retrieval call binding the contract method 0xb55cd78e.
//
// Solidity: function canUndelegateKroAt(address validator, address delegator) view returns(uint128)
func (_AssetManager *AssetManagerCallerSession) CanUndelegateKroAt(validator common.Address, delegator common.Address) (*big.Int, error) {
	return _AssetManager.Contract.CanUndelegateKroAt(&_AssetManager.CallOpts, validator, delegator)
}

// CanWithdrawAt is a free data retrieval call binding the contract method 0xa63b8d14.
//
// Solidity: function canWithdrawAt(address validator) view returns(uint128)
func (_AssetManager *AssetManagerCaller) CanWithdrawAt(opts *bind.CallOpts, validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "canWithdrawAt", validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CanWithdrawAt is a free data retrieval call binding the contract method 0xa63b8d14.
//
// Solidity: function canWithdrawAt(address validator) view returns(uint128)
func (_AssetManager *AssetManagerSession) CanWithdrawAt(validator common.Address) (*big.Int, error) {
	return _AssetManager.Contract.CanWithdrawAt(&_AssetManager.CallOpts, validator)
}

// CanWithdrawAt is a free data retrieval call binding the contract method 0xa63b8d14.
//
// Solidity: function canWithdrawAt(address validator) view returns(uint128)
func (_AssetManager *AssetManagerCallerSession) CanWithdrawAt(validator common.Address) (*big.Int, error) {
	return _AssetManager.Contract.CanWithdrawAt(&_AssetManager.CallOpts, validator)
}

// GetKghNum is a free data retrieval call binding the contract method 0x7db41f97.
//
// Solidity: function getKghNum(address validator, address delegator) view returns(uint128)
func (_AssetManager *AssetManagerCaller) GetKghNum(opts *bind.CallOpts, validator common.Address, delegator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "getKghNum", validator, delegator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetKghNum is a free data retrieval call binding the contract method 0x7db41f97.
//
// Solidity: function getKghNum(address validator, address delegator) view returns(uint128)
func (_AssetManager *AssetManagerSession) GetKghNum(validator common.Address, delegator common.Address) (*big.Int, error) {
	return _AssetManager.Contract.GetKghNum(&_AssetManager.CallOpts, validator, delegator)
}

// GetKghNum is a free data retrieval call binding the contract method 0x7db41f97.
//
// Solidity: function getKghNum(address validator, address delegator) view returns(uint128)
func (_AssetManager *AssetManagerCallerSession) GetKghNum(validator common.Address, delegator common.Address) (*big.Int, error) {
	return _AssetManager.Contract.GetKghNum(&_AssetManager.CallOpts, validator, delegator)
}

// GetKghReward is a free data retrieval call binding the contract method 0x833a333b.
//
// Solidity: function getKghReward(address validator, address delegator) view returns(uint128)
func (_AssetManager *AssetManagerCaller) GetKghReward(opts *bind.CallOpts, validator common.Address, delegator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "getKghReward", validator, delegator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetKghReward is a free data retrieval call binding the contract method 0x833a333b.
//
// Solidity: function getKghReward(address validator, address delegator) view returns(uint128)
func (_AssetManager *AssetManagerSession) GetKghReward(validator common.Address, delegator common.Address) (*big.Int, error) {
	return _AssetManager.Contract.GetKghReward(&_AssetManager.CallOpts, validator, delegator)
}

// GetKghReward is a free data retrieval call binding the contract method 0x833a333b.
//
// Solidity: function getKghReward(address validator, address delegator) view returns(uint128)
func (_AssetManager *AssetManagerCallerSession) GetKghReward(validator common.Address, delegator common.Address) (*big.Int, error) {
	return _AssetManager.Contract.GetKghReward(&_AssetManager.CallOpts, validator, delegator)
}

// GetKroAssets is a free data retrieval call binding the contract method 0xc7ab2c07.
//
// Solidity: function getKroAssets(address validator, address delegator) view returns(uint128)
func (_AssetManager *AssetManagerCaller) GetKroAssets(opts *bind.CallOpts, validator common.Address, delegator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "getKroAssets", validator, delegator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetKroAssets is a free data retrieval call binding the contract method 0xc7ab2c07.
//
// Solidity: function getKroAssets(address validator, address delegator) view returns(uint128)
func (_AssetManager *AssetManagerSession) GetKroAssets(validator common.Address, delegator common.Address) (*big.Int, error) {
	return _AssetManager.Contract.GetKroAssets(&_AssetManager.CallOpts, validator, delegator)
}

// GetKroAssets is a free data retrieval call binding the contract method 0xc7ab2c07.
//
// Solidity: function getKroAssets(address validator, address delegator) view returns(uint128)
func (_AssetManager *AssetManagerCallerSession) GetKroAssets(validator common.Address, delegator common.Address) (*big.Int, error) {
	return _AssetManager.Contract.GetKroAssets(&_AssetManager.CallOpts, validator, delegator)
}

// GetKroTotalShareBalance is a free data retrieval call binding the contract method 0x842d0d3b.
//
// Solidity: function getKroTotalShareBalance(address validator, address delegator) view returns(uint128)
func (_AssetManager *AssetManagerCaller) GetKroTotalShareBalance(opts *bind.CallOpts, validator common.Address, delegator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "getKroTotalShareBalance", validator, delegator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetKroTotalShareBalance is a free data retrieval call binding the contract method 0x842d0d3b.
//
// Solidity: function getKroTotalShareBalance(address validator, address delegator) view returns(uint128)
func (_AssetManager *AssetManagerSession) GetKroTotalShareBalance(validator common.Address, delegator common.Address) (*big.Int, error) {
	return _AssetManager.Contract.GetKroTotalShareBalance(&_AssetManager.CallOpts, validator, delegator)
}

// GetKroTotalShareBalance is a free data retrieval call binding the contract method 0x842d0d3b.
//
// Solidity: function getKroTotalShareBalance(address validator, address delegator) view returns(uint128)
func (_AssetManager *AssetManagerCallerSession) GetKroTotalShareBalance(validator common.Address, delegator common.Address) (*big.Int, error) {
	return _AssetManager.Contract.GetKroTotalShareBalance(&_AssetManager.CallOpts, validator, delegator)
}

// GetWithdrawAccount is a free data retrieval call binding the contract method 0xc2d9b684.
//
// Solidity: function getWithdrawAccount(address validator) view returns(address)
func (_AssetManager *AssetManagerCaller) GetWithdrawAccount(opts *bind.CallOpts, validator common.Address) (common.Address, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "getWithdrawAccount", validator)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetWithdrawAccount is a free data retrieval call binding the contract method 0xc2d9b684.
//
// Solidity: function getWithdrawAccount(address validator) view returns(address)
func (_AssetManager *AssetManagerSession) GetWithdrawAccount(validator common.Address) (common.Address, error) {
	return _AssetManager.Contract.GetWithdrawAccount(&_AssetManager.CallOpts, validator)
}

// GetWithdrawAccount is a free data retrieval call binding the contract method 0xc2d9b684.
//
// Solidity: function getWithdrawAccount(address validator) view returns(address)
func (_AssetManager *AssetManagerCallerSession) GetWithdrawAccount(validator common.Address) (common.Address, error) {
	return _AssetManager.Contract.GetWithdrawAccount(&_AssetManager.CallOpts, validator)
}

// OnERC721Received is a free data retrieval call binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) pure returns(bytes4)
func (_AssetManager *AssetManagerCaller) OnERC721Received(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "onERC721Received", arg0, arg1, arg2, arg3)

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// OnERC721Received is a free data retrieval call binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) pure returns(bytes4)
func (_AssetManager *AssetManagerSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	return _AssetManager.Contract.OnERC721Received(&_AssetManager.CallOpts, arg0, arg1, arg2, arg3)
}

// OnERC721Received is a free data retrieval call binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) pure returns(bytes4)
func (_AssetManager *AssetManagerCallerSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	return _AssetManager.Contract.OnERC721Received(&_AssetManager.CallOpts, arg0, arg1, arg2, arg3)
}

// PreviewDelegate is a free data retrieval call binding the contract method 0x960a0893.
//
// Solidity: function previewDelegate(address validator, uint128 assets) view returns(uint128)
func (_AssetManager *AssetManagerCaller) PreviewDelegate(opts *bind.CallOpts, validator common.Address, assets *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "previewDelegate", validator, assets)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PreviewDelegate is a free data retrieval call binding the contract method 0x960a0893.
//
// Solidity: function previewDelegate(address validator, uint128 assets) view returns(uint128)
func (_AssetManager *AssetManagerSession) PreviewDelegate(validator common.Address, assets *big.Int) (*big.Int, error) {
	return _AssetManager.Contract.PreviewDelegate(&_AssetManager.CallOpts, validator, assets)
}

// PreviewDelegate is a free data retrieval call binding the contract method 0x960a0893.
//
// Solidity: function previewDelegate(address validator, uint128 assets) view returns(uint128)
func (_AssetManager *AssetManagerCallerSession) PreviewDelegate(validator common.Address, assets *big.Int) (*big.Int, error) {
	return _AssetManager.Contract.PreviewDelegate(&_AssetManager.CallOpts, validator, assets)
}

// PreviewUndelegate is a free data retrieval call binding the contract method 0x209a9694.
//
// Solidity: function previewUndelegate(address validator, uint128 shares) view returns(uint128)
func (_AssetManager *AssetManagerCaller) PreviewUndelegate(opts *bind.CallOpts, validator common.Address, shares *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "previewUndelegate", validator, shares)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PreviewUndelegate is a free data retrieval call binding the contract method 0x209a9694.
//
// Solidity: function previewUndelegate(address validator, uint128 shares) view returns(uint128)
func (_AssetManager *AssetManagerSession) PreviewUndelegate(validator common.Address, shares *big.Int) (*big.Int, error) {
	return _AssetManager.Contract.PreviewUndelegate(&_AssetManager.CallOpts, validator, shares)
}

// PreviewUndelegate is a free data retrieval call binding the contract method 0x209a9694.
//
// Solidity: function previewUndelegate(address validator, uint128 shares) view returns(uint128)
func (_AssetManager *AssetManagerCallerSession) PreviewUndelegate(validator common.Address, shares *big.Int) (*big.Int, error) {
	return _AssetManager.Contract.PreviewUndelegate(&_AssetManager.CallOpts, validator, shares)
}

// ReflectiveWeight is a free data retrieval call binding the contract method 0x8abf0af0.
//
// Solidity: function reflectiveWeight(address validator) view returns(uint128)
func (_AssetManager *AssetManagerCaller) ReflectiveWeight(opts *bind.CallOpts, validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "reflectiveWeight", validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ReflectiveWeight is a free data retrieval call binding the contract method 0x8abf0af0.
//
// Solidity: function reflectiveWeight(address validator) view returns(uint128)
func (_AssetManager *AssetManagerSession) ReflectiveWeight(validator common.Address) (*big.Int, error) {
	return _AssetManager.Contract.ReflectiveWeight(&_AssetManager.CallOpts, validator)
}

// ReflectiveWeight is a free data retrieval call binding the contract method 0x8abf0af0.
//
// Solidity: function reflectiveWeight(address validator) view returns(uint128)
func (_AssetManager *AssetManagerCallerSession) ReflectiveWeight(validator common.Address) (*big.Int, error) {
	return _AssetManager.Contract.ReflectiveWeight(&_AssetManager.CallOpts, validator)
}

// TotalKghNum is a free data retrieval call binding the contract method 0x913f1a9f.
//
// Solidity: function totalKghNum(address validator) view returns(uint128)
func (_AssetManager *AssetManagerCaller) TotalKghNum(opts *bind.CallOpts, validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "totalKghNum", validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalKghNum is a free data retrieval call binding the contract method 0x913f1a9f.
//
// Solidity: function totalKghNum(address validator) view returns(uint128)
func (_AssetManager *AssetManagerSession) TotalKghNum(validator common.Address) (*big.Int, error) {
	return _AssetManager.Contract.TotalKghNum(&_AssetManager.CallOpts, validator)
}

// TotalKghNum is a free data retrieval call binding the contract method 0x913f1a9f.
//
// Solidity: function totalKghNum(address validator) view returns(uint128)
func (_AssetManager *AssetManagerCallerSession) TotalKghNum(validator common.Address) (*big.Int, error) {
	return _AssetManager.Contract.TotalKghNum(&_AssetManager.CallOpts, validator)
}

// TotalKroAssets is a free data retrieval call binding the contract method 0x6b9ffeac.
//
// Solidity: function totalKroAssets(address validator) view returns(uint128)
func (_AssetManager *AssetManagerCaller) TotalKroAssets(opts *bind.CallOpts, validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "totalKroAssets", validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalKroAssets is a free data retrieval call binding the contract method 0x6b9ffeac.
//
// Solidity: function totalKroAssets(address validator) view returns(uint128)
func (_AssetManager *AssetManagerSession) TotalKroAssets(validator common.Address) (*big.Int, error) {
	return _AssetManager.Contract.TotalKroAssets(&_AssetManager.CallOpts, validator)
}

// TotalKroAssets is a free data retrieval call binding the contract method 0x6b9ffeac.
//
// Solidity: function totalKroAssets(address validator) view returns(uint128)
func (_AssetManager *AssetManagerCallerSession) TotalKroAssets(validator common.Address) (*big.Int, error) {
	return _AssetManager.Contract.TotalKroAssets(&_AssetManager.CallOpts, validator)
}

// TotalValidatorKro is a free data retrieval call binding the contract method 0x981cee53.
//
// Solidity: function totalValidatorKro(address validator) view returns(uint128)
func (_AssetManager *AssetManagerCaller) TotalValidatorKro(opts *bind.CallOpts, validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "totalValidatorKro", validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalValidatorKro is a free data retrieval call binding the contract method 0x981cee53.
//
// Solidity: function totalValidatorKro(address validator) view returns(uint128)
func (_AssetManager *AssetManagerSession) TotalValidatorKro(validator common.Address) (*big.Int, error) {
	return _AssetManager.Contract.TotalValidatorKro(&_AssetManager.CallOpts, validator)
}

// TotalValidatorKro is a free data retrieval call binding the contract method 0x981cee53.
//
// Solidity: function totalValidatorKro(address validator) view returns(uint128)
func (_AssetManager *AssetManagerCallerSession) TotalValidatorKro(validator common.Address) (*big.Int, error) {
	return _AssetManager.Contract.TotalValidatorKro(&_AssetManager.CallOpts, validator)
}

// TotalValidatorKroBonded is a free data retrieval call binding the contract method 0x5959b765.
//
// Solidity: function totalValidatorKroBonded(address validator) view returns(uint128)
func (_AssetManager *AssetManagerCaller) TotalValidatorKroBonded(opts *bind.CallOpts, validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "totalValidatorKroBonded", validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalValidatorKroBonded is a free data retrieval call binding the contract method 0x5959b765.
//
// Solidity: function totalValidatorKroBonded(address validator) view returns(uint128)
func (_AssetManager *AssetManagerSession) TotalValidatorKroBonded(validator common.Address) (*big.Int, error) {
	return _AssetManager.Contract.TotalValidatorKroBonded(&_AssetManager.CallOpts, validator)
}

// TotalValidatorKroBonded is a free data retrieval call binding the contract method 0x5959b765.
//
// Solidity: function totalValidatorKroBonded(address validator) view returns(uint128)
func (_AssetManager *AssetManagerCallerSession) TotalValidatorKroBonded(validator common.Address) (*big.Int, error) {
	return _AssetManager.Contract.TotalValidatorKroBonded(&_AssetManager.CallOpts, validator)
}

// TotalValidatorKroNotBonded is a free data retrieval call binding the contract method 0xb172597e.
//
// Solidity: function totalValidatorKroNotBonded(address validator) view returns(uint128)
func (_AssetManager *AssetManagerCaller) TotalValidatorKroNotBonded(opts *bind.CallOpts, validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "totalValidatorKroNotBonded", validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalValidatorKroNotBonded is a free data retrieval call binding the contract method 0xb172597e.
//
// Solidity: function totalValidatorKroNotBonded(address validator) view returns(uint128)
func (_AssetManager *AssetManagerSession) TotalValidatorKroNotBonded(validator common.Address) (*big.Int, error) {
	return _AssetManager.Contract.TotalValidatorKroNotBonded(&_AssetManager.CallOpts, validator)
}

// TotalValidatorKroNotBonded is a free data retrieval call binding the contract method 0xb172597e.
//
// Solidity: function totalValidatorKroNotBonded(address validator) view returns(uint128)
func (_AssetManager *AssetManagerCallerSession) TotalValidatorKroNotBonded(validator common.Address) (*big.Int, error) {
	return _AssetManager.Contract.TotalValidatorKroNotBonded(&_AssetManager.CallOpts, validator)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_AssetManager *AssetManagerCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _AssetManager.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_AssetManager *AssetManagerSession) Version() (string, error) {
	return _AssetManager.Contract.Version(&_AssetManager.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_AssetManager *AssetManagerCallerSession) Version() (string, error) {
	return _AssetManager.Contract.Version(&_AssetManager.CallOpts)
}

// BondValidatorKro is a paid mutator transaction binding the contract method 0x8c1516c7.
//
// Solidity: function bondValidatorKro(address validator) returns()
func (_AssetManager *AssetManagerTransactor) BondValidatorKro(opts *bind.TransactOpts, validator common.Address) (*types.Transaction, error) {
	return _AssetManager.contract.Transact(opts, "bondValidatorKro", validator)
}

// BondValidatorKro is a paid mutator transaction binding the contract method 0x8c1516c7.
//
// Solidity: function bondValidatorKro(address validator) returns()
func (_AssetManager *AssetManagerSession) BondValidatorKro(validator common.Address) (*types.Transaction, error) {
	return _AssetManager.Contract.BondValidatorKro(&_AssetManager.TransactOpts, validator)
}

// BondValidatorKro is a paid mutator transaction binding the contract method 0x8c1516c7.
//
// Solidity: function bondValidatorKro(address validator) returns()
func (_AssetManager *AssetManagerTransactorSession) BondValidatorKro(validator common.Address) (*types.Transaction, error) {
	return _AssetManager.Contract.BondValidatorKro(&_AssetManager.TransactOpts, validator)
}

// ClaimKghReward is a paid mutator transaction binding the contract method 0x270a1644.
//
// Solidity: function claimKghReward(address validator) returns()
func (_AssetManager *AssetManagerTransactor) ClaimKghReward(opts *bind.TransactOpts, validator common.Address) (*types.Transaction, error) {
	return _AssetManager.contract.Transact(opts, "claimKghReward", validator)
}

// ClaimKghReward is a paid mutator transaction binding the contract method 0x270a1644.
//
// Solidity: function claimKghReward(address validator) returns()
func (_AssetManager *AssetManagerSession) ClaimKghReward(validator common.Address) (*types.Transaction, error) {
	return _AssetManager.Contract.ClaimKghReward(&_AssetManager.TransactOpts, validator)
}

// ClaimKghReward is a paid mutator transaction binding the contract method 0x270a1644.
//
// Solidity: function claimKghReward(address validator) returns()
func (_AssetManager *AssetManagerTransactorSession) ClaimKghReward(validator common.Address) (*types.Transaction, error) {
	return _AssetManager.Contract.ClaimKghReward(&_AssetManager.TransactOpts, validator)
}

// DecreaseBalanceWithChallenge is a paid mutator transaction binding the contract method 0x5636aabd.
//
// Solidity: function decreaseBalanceWithChallenge(address loser) returns(uint128)
func (_AssetManager *AssetManagerTransactor) DecreaseBalanceWithChallenge(opts *bind.TransactOpts, loser common.Address) (*types.Transaction, error) {
	return _AssetManager.contract.Transact(opts, "decreaseBalanceWithChallenge", loser)
}

// DecreaseBalanceWithChallenge is a paid mutator transaction binding the contract method 0x5636aabd.
//
// Solidity: function decreaseBalanceWithChallenge(address loser) returns(uint128)
func (_AssetManager *AssetManagerSession) DecreaseBalanceWithChallenge(loser common.Address) (*types.Transaction, error) {
	return _AssetManager.Contract.DecreaseBalanceWithChallenge(&_AssetManager.TransactOpts, loser)
}

// DecreaseBalanceWithChallenge is a paid mutator transaction binding the contract method 0x5636aabd.
//
// Solidity: function decreaseBalanceWithChallenge(address loser) returns(uint128)
func (_AssetManager *AssetManagerTransactorSession) DecreaseBalanceWithChallenge(loser common.Address) (*types.Transaction, error) {
	return _AssetManager.Contract.DecreaseBalanceWithChallenge(&_AssetManager.TransactOpts, loser)
}

// Delegate is a paid mutator transaction binding the contract method 0xa85120e4.
//
// Solidity: function delegate(address validator, uint128 assets) returns(uint128)
func (_AssetManager *AssetManagerTransactor) Delegate(opts *bind.TransactOpts, validator common.Address, assets *big.Int) (*types.Transaction, error) {
	return _AssetManager.contract.Transact(opts, "delegate", validator, assets)
}

// Delegate is a paid mutator transaction binding the contract method 0xa85120e4.
//
// Solidity: function delegate(address validator, uint128 assets) returns(uint128)
func (_AssetManager *AssetManagerSession) Delegate(validator common.Address, assets *big.Int) (*types.Transaction, error) {
	return _AssetManager.Contract.Delegate(&_AssetManager.TransactOpts, validator, assets)
}

// Delegate is a paid mutator transaction binding the contract method 0xa85120e4.
//
// Solidity: function delegate(address validator, uint128 assets) returns(uint128)
func (_AssetManager *AssetManagerTransactorSession) Delegate(validator common.Address, assets *big.Int) (*types.Transaction, error) {
	return _AssetManager.Contract.Delegate(&_AssetManager.TransactOpts, validator, assets)
}

// DelegateKgh is a paid mutator transaction binding the contract method 0x1f86f4f1.
//
// Solidity: function delegateKgh(address validator, uint256 tokenId) returns()
func (_AssetManager *AssetManagerTransactor) DelegateKgh(opts *bind.TransactOpts, validator common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AssetManager.contract.Transact(opts, "delegateKgh", validator, tokenId)
}

// DelegateKgh is a paid mutator transaction binding the contract method 0x1f86f4f1.
//
// Solidity: function delegateKgh(address validator, uint256 tokenId) returns()
func (_AssetManager *AssetManagerSession) DelegateKgh(validator common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AssetManager.Contract.DelegateKgh(&_AssetManager.TransactOpts, validator, tokenId)
}

// DelegateKgh is a paid mutator transaction binding the contract method 0x1f86f4f1.
//
// Solidity: function delegateKgh(address validator, uint256 tokenId) returns()
func (_AssetManager *AssetManagerTransactorSession) DelegateKgh(validator common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AssetManager.Contract.DelegateKgh(&_AssetManager.TransactOpts, validator, tokenId)
}

// DelegateKghBatch is a paid mutator transaction binding the contract method 0x31d8e007.
//
// Solidity: function delegateKghBatch(address validator, uint256[] tokenIds) returns()
func (_AssetManager *AssetManagerTransactor) DelegateKghBatch(opts *bind.TransactOpts, validator common.Address, tokenIds []*big.Int) (*types.Transaction, error) {
	return _AssetManager.contract.Transact(opts, "delegateKghBatch", validator, tokenIds)
}

// DelegateKghBatch is a paid mutator transaction binding the contract method 0x31d8e007.
//
// Solidity: function delegateKghBatch(address validator, uint256[] tokenIds) returns()
func (_AssetManager *AssetManagerSession) DelegateKghBatch(validator common.Address, tokenIds []*big.Int) (*types.Transaction, error) {
	return _AssetManager.Contract.DelegateKghBatch(&_AssetManager.TransactOpts, validator, tokenIds)
}

// DelegateKghBatch is a paid mutator transaction binding the contract method 0x31d8e007.
//
// Solidity: function delegateKghBatch(address validator, uint256[] tokenIds) returns()
func (_AssetManager *AssetManagerTransactorSession) DelegateKghBatch(validator common.Address, tokenIds []*big.Int) (*types.Transaction, error) {
	return _AssetManager.Contract.DelegateKghBatch(&_AssetManager.TransactOpts, validator, tokenIds)
}

// Deposit is a paid mutator transaction binding the contract method 0x54469aea.
//
// Solidity: function deposit(uint128 assets) returns()
func (_AssetManager *AssetManagerTransactor) Deposit(opts *bind.TransactOpts, assets *big.Int) (*types.Transaction, error) {
	return _AssetManager.contract.Transact(opts, "deposit", assets)
}

// Deposit is a paid mutator transaction binding the contract method 0x54469aea.
//
// Solidity: function deposit(uint128 assets) returns()
func (_AssetManager *AssetManagerSession) Deposit(assets *big.Int) (*types.Transaction, error) {
	return _AssetManager.Contract.Deposit(&_AssetManager.TransactOpts, assets)
}

// Deposit is a paid mutator transaction binding the contract method 0x54469aea.
//
// Solidity: function deposit(uint128 assets) returns()
func (_AssetManager *AssetManagerTransactorSession) Deposit(assets *big.Int) (*types.Transaction, error) {
	return _AssetManager.Contract.Deposit(&_AssetManager.TransactOpts, assets)
}

// DepositToRegister is a paid mutator transaction binding the contract method 0x19412a20.
//
// Solidity: function depositToRegister(address validator, uint128 assets, address withdrawAccount) returns()
func (_AssetManager *AssetManagerTransactor) DepositToRegister(opts *bind.TransactOpts, validator common.Address, assets *big.Int, withdrawAccount common.Address) (*types.Transaction, error) {
	return _AssetManager.contract.Transact(opts, "depositToRegister", validator, assets, withdrawAccount)
}

// DepositToRegister is a paid mutator transaction binding the contract method 0x19412a20.
//
// Solidity: function depositToRegister(address validator, uint128 assets, address withdrawAccount) returns()
func (_AssetManager *AssetManagerSession) DepositToRegister(validator common.Address, assets *big.Int, withdrawAccount common.Address) (*types.Transaction, error) {
	return _AssetManager.Contract.DepositToRegister(&_AssetManager.TransactOpts, validator, assets, withdrawAccount)
}

// DepositToRegister is a paid mutator transaction binding the contract method 0x19412a20.
//
// Solidity: function depositToRegister(address validator, uint128 assets, address withdrawAccount) returns()
func (_AssetManager *AssetManagerTransactorSession) DepositToRegister(validator common.Address, assets *big.Int, withdrawAccount common.Address) (*types.Transaction, error) {
	return _AssetManager.Contract.DepositToRegister(&_AssetManager.TransactOpts, validator, assets, withdrawAccount)
}

// IncreaseBalanceWithChallenge is a paid mutator transaction binding the contract method 0xc42996d6.
//
// Solidity: function increaseBalanceWithChallenge(address winner, uint128 challengeReward) returns(uint128)
func (_AssetManager *AssetManagerTransactor) IncreaseBalanceWithChallenge(opts *bind.TransactOpts, winner common.Address, challengeReward *big.Int) (*types.Transaction, error) {
	return _AssetManager.contract.Transact(opts, "increaseBalanceWithChallenge", winner, challengeReward)
}

// IncreaseBalanceWithChallenge is a paid mutator transaction binding the contract method 0xc42996d6.
//
// Solidity: function increaseBalanceWithChallenge(address winner, uint128 challengeReward) returns(uint128)
func (_AssetManager *AssetManagerSession) IncreaseBalanceWithChallenge(winner common.Address, challengeReward *big.Int) (*types.Transaction, error) {
	return _AssetManager.Contract.IncreaseBalanceWithChallenge(&_AssetManager.TransactOpts, winner, challengeReward)
}

// IncreaseBalanceWithChallenge is a paid mutator transaction binding the contract method 0xc42996d6.
//
// Solidity: function increaseBalanceWithChallenge(address winner, uint128 challengeReward) returns(uint128)
func (_AssetManager *AssetManagerTransactorSession) IncreaseBalanceWithChallenge(winner common.Address, challengeReward *big.Int) (*types.Transaction, error) {
	return _AssetManager.Contract.IncreaseBalanceWithChallenge(&_AssetManager.TransactOpts, winner, challengeReward)
}

// IncreaseBalanceWithReward is a paid mutator transaction binding the contract method 0xad429451.
//
// Solidity: function increaseBalanceWithReward(address validator, uint128 baseReward, uint128 boostedReward, uint128 validatorReward) returns()
func (_AssetManager *AssetManagerTransactor) IncreaseBalanceWithReward(opts *bind.TransactOpts, validator common.Address, baseReward *big.Int, boostedReward *big.Int, validatorReward *big.Int) (*types.Transaction, error) {
	return _AssetManager.contract.Transact(opts, "increaseBalanceWithReward", validator, baseReward, boostedReward, validatorReward)
}

// IncreaseBalanceWithReward is a paid mutator transaction binding the contract method 0xad429451.
//
// Solidity: function increaseBalanceWithReward(address validator, uint128 baseReward, uint128 boostedReward, uint128 validatorReward) returns()
func (_AssetManager *AssetManagerSession) IncreaseBalanceWithReward(validator common.Address, baseReward *big.Int, boostedReward *big.Int, validatorReward *big.Int) (*types.Transaction, error) {
	return _AssetManager.Contract.IncreaseBalanceWithReward(&_AssetManager.TransactOpts, validator, baseReward, boostedReward, validatorReward)
}

// IncreaseBalanceWithReward is a paid mutator transaction binding the contract method 0xad429451.
//
// Solidity: function increaseBalanceWithReward(address validator, uint128 baseReward, uint128 boostedReward, uint128 validatorReward) returns()
func (_AssetManager *AssetManagerTransactorSession) IncreaseBalanceWithReward(validator common.Address, baseReward *big.Int, boostedReward *big.Int, validatorReward *big.Int) (*types.Transaction, error) {
	return _AssetManager.Contract.IncreaseBalanceWithReward(&_AssetManager.TransactOpts, validator, baseReward, boostedReward, validatorReward)
}

// RevertDecreaseBalanceWithChallenge is a paid mutator transaction binding the contract method 0x536afae4.
//
// Solidity: function revertDecreaseBalanceWithChallenge(address loser) returns(uint128)
func (_AssetManager *AssetManagerTransactor) RevertDecreaseBalanceWithChallenge(opts *bind.TransactOpts, loser common.Address) (*types.Transaction, error) {
	return _AssetManager.contract.Transact(opts, "revertDecreaseBalanceWithChallenge", loser)
}

// RevertDecreaseBalanceWithChallenge is a paid mutator transaction binding the contract method 0x536afae4.
//
// Solidity: function revertDecreaseBalanceWithChallenge(address loser) returns(uint128)
func (_AssetManager *AssetManagerSession) RevertDecreaseBalanceWithChallenge(loser common.Address) (*types.Transaction, error) {
	return _AssetManager.Contract.RevertDecreaseBalanceWithChallenge(&_AssetManager.TransactOpts, loser)
}

// RevertDecreaseBalanceWithChallenge is a paid mutator transaction binding the contract method 0x536afae4.
//
// Solidity: function revertDecreaseBalanceWithChallenge(address loser) returns(uint128)
func (_AssetManager *AssetManagerTransactorSession) RevertDecreaseBalanceWithChallenge(loser common.Address) (*types.Transaction, error) {
	return _AssetManager.Contract.RevertDecreaseBalanceWithChallenge(&_AssetManager.TransactOpts, loser)
}

// UnbondValidatorKro is a paid mutator transaction binding the contract method 0xa8387172.
//
// Solidity: function unbondValidatorKro(address validator) returns()
func (_AssetManager *AssetManagerTransactor) UnbondValidatorKro(opts *bind.TransactOpts, validator common.Address) (*types.Transaction, error) {
	return _AssetManager.contract.Transact(opts, "unbondValidatorKro", validator)
}

// UnbondValidatorKro is a paid mutator transaction binding the contract method 0xa8387172.
//
// Solidity: function unbondValidatorKro(address validator) returns()
func (_AssetManager *AssetManagerSession) UnbondValidatorKro(validator common.Address) (*types.Transaction, error) {
	return _AssetManager.Contract.UnbondValidatorKro(&_AssetManager.TransactOpts, validator)
}

// UnbondValidatorKro is a paid mutator transaction binding the contract method 0xa8387172.
//
// Solidity: function unbondValidatorKro(address validator) returns()
func (_AssetManager *AssetManagerTransactorSession) UnbondValidatorKro(validator common.Address) (*types.Transaction, error) {
	return _AssetManager.Contract.UnbondValidatorKro(&_AssetManager.TransactOpts, validator)
}

// Undelegate is a paid mutator transaction binding the contract method 0xb744d2f9.
//
// Solidity: function undelegate(address validator, uint128 assets) returns()
func (_AssetManager *AssetManagerTransactor) Undelegate(opts *bind.TransactOpts, validator common.Address, assets *big.Int) (*types.Transaction, error) {
	return _AssetManager.contract.Transact(opts, "undelegate", validator, assets)
}

// Undelegate is a paid mutator transaction binding the contract method 0xb744d2f9.
//
// Solidity: function undelegate(address validator, uint128 assets) returns()
func (_AssetManager *AssetManagerSession) Undelegate(validator common.Address, assets *big.Int) (*types.Transaction, error) {
	return _AssetManager.Contract.Undelegate(&_AssetManager.TransactOpts, validator, assets)
}

// Undelegate is a paid mutator transaction binding the contract method 0xb744d2f9.
//
// Solidity: function undelegate(address validator, uint128 assets) returns()
func (_AssetManager *AssetManagerTransactorSession) Undelegate(validator common.Address, assets *big.Int) (*types.Transaction, error) {
	return _AssetManager.Contract.Undelegate(&_AssetManager.TransactOpts, validator, assets)
}

// UndelegateKgh is a paid mutator transaction binding the contract method 0x40ce01f1.
//
// Solidity: function undelegateKgh(address validator, uint256 tokenId) returns()
func (_AssetManager *AssetManagerTransactor) UndelegateKgh(opts *bind.TransactOpts, validator common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AssetManager.contract.Transact(opts, "undelegateKgh", validator, tokenId)
}

// UndelegateKgh is a paid mutator transaction binding the contract method 0x40ce01f1.
//
// Solidity: function undelegateKgh(address validator, uint256 tokenId) returns()
func (_AssetManager *AssetManagerSession) UndelegateKgh(validator common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AssetManager.Contract.UndelegateKgh(&_AssetManager.TransactOpts, validator, tokenId)
}

// UndelegateKgh is a paid mutator transaction binding the contract method 0x40ce01f1.
//
// Solidity: function undelegateKgh(address validator, uint256 tokenId) returns()
func (_AssetManager *AssetManagerTransactorSession) UndelegateKgh(validator common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AssetManager.Contract.UndelegateKgh(&_AssetManager.TransactOpts, validator, tokenId)
}

// UndelegateKghBatch is a paid mutator transaction binding the contract method 0x1e5d8178.
//
// Solidity: function undelegateKghBatch(address validator, uint256[] tokenIds) returns()
func (_AssetManager *AssetManagerTransactor) UndelegateKghBatch(opts *bind.TransactOpts, validator common.Address, tokenIds []*big.Int) (*types.Transaction, error) {
	return _AssetManager.contract.Transact(opts, "undelegateKghBatch", validator, tokenIds)
}

// UndelegateKghBatch is a paid mutator transaction binding the contract method 0x1e5d8178.
//
// Solidity: function undelegateKghBatch(address validator, uint256[] tokenIds) returns()
func (_AssetManager *AssetManagerSession) UndelegateKghBatch(validator common.Address, tokenIds []*big.Int) (*types.Transaction, error) {
	return _AssetManager.Contract.UndelegateKghBatch(&_AssetManager.TransactOpts, validator, tokenIds)
}

// UndelegateKghBatch is a paid mutator transaction binding the contract method 0x1e5d8178.
//
// Solidity: function undelegateKghBatch(address validator, uint256[] tokenIds) returns()
func (_AssetManager *AssetManagerTransactorSession) UndelegateKghBatch(validator common.Address, tokenIds []*big.Int) (*types.Transaction, error) {
	return _AssetManager.Contract.UndelegateKghBatch(&_AssetManager.TransactOpts, validator, tokenIds)
}

// Withdraw is a paid mutator transaction binding the contract method 0x08fab167.
//
// Solidity: function withdraw(address validator, uint128 assets) returns()
func (_AssetManager *AssetManagerTransactor) Withdraw(opts *bind.TransactOpts, validator common.Address, assets *big.Int) (*types.Transaction, error) {
	return _AssetManager.contract.Transact(opts, "withdraw", validator, assets)
}

// Withdraw is a paid mutator transaction binding the contract method 0x08fab167.
//
// Solidity: function withdraw(address validator, uint128 assets) returns()
func (_AssetManager *AssetManagerSession) Withdraw(validator common.Address, assets *big.Int) (*types.Transaction, error) {
	return _AssetManager.Contract.Withdraw(&_AssetManager.TransactOpts, validator, assets)
}

// Withdraw is a paid mutator transaction binding the contract method 0x08fab167.
//
// Solidity: function withdraw(address validator, uint128 assets) returns()
func (_AssetManager *AssetManagerTransactorSession) Withdraw(validator common.Address, assets *big.Int) (*types.Transaction, error) {
	return _AssetManager.Contract.Withdraw(&_AssetManager.TransactOpts, validator, assets)
}

// AssetManagerDepositedIterator is returned from FilterDeposited and is used to iterate over the raw logs and unpacked data for Deposited events raised by the AssetManager contract.
type AssetManagerDepositedIterator struct {
	Event *AssetManagerDeposited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AssetManagerDepositedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AssetManagerDeposited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AssetManagerDeposited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AssetManagerDepositedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AssetManagerDepositedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AssetManagerDeposited represents a Deposited event raised by the AssetManager contract.
type AssetManagerDeposited struct {
	Validator common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDeposited is a free log retrieval operation binding the contract event 0xadb1a06aea2cd2ff20eac971640a5eb7d687df3e3a897be2f334836494958a47.
//
// Solidity: event Deposited(address indexed validator, uint128 amount)
func (_AssetManager *AssetManagerFilterer) FilterDeposited(opts *bind.FilterOpts, validator []common.Address) (*AssetManagerDepositedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AssetManager.contract.FilterLogs(opts, "Deposited", validatorRule)
	if err != nil {
		return nil, err
	}
	return &AssetManagerDepositedIterator{contract: _AssetManager.contract, event: "Deposited", logs: logs, sub: sub}, nil
}

// WatchDeposited is a free log subscription operation binding the contract event 0xadb1a06aea2cd2ff20eac971640a5eb7d687df3e3a897be2f334836494958a47.
//
// Solidity: event Deposited(address indexed validator, uint128 amount)
func (_AssetManager *AssetManagerFilterer) WatchDeposited(opts *bind.WatchOpts, sink chan<- *AssetManagerDeposited, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AssetManager.contract.WatchLogs(opts, "Deposited", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AssetManagerDeposited)
				if err := _AssetManager.contract.UnpackLog(event, "Deposited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposited is a log parse operation binding the contract event 0xadb1a06aea2cd2ff20eac971640a5eb7d687df3e3a897be2f334836494958a47.
//
// Solidity: event Deposited(address indexed validator, uint128 amount)
func (_AssetManager *AssetManagerFilterer) ParseDeposited(log types.Log) (*AssetManagerDeposited, error) {
	event := new(AssetManagerDeposited)
	if err := _AssetManager.contract.UnpackLog(event, "Deposited", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AssetManagerKghBatchDelegatedIterator is returned from FilterKghBatchDelegated and is used to iterate over the raw logs and unpacked data for KghBatchDelegated events raised by the AssetManager contract.
type AssetManagerKghBatchDelegatedIterator struct {
	Event *AssetManagerKghBatchDelegated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AssetManagerKghBatchDelegatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AssetManagerKghBatchDelegated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AssetManagerKghBatchDelegated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AssetManagerKghBatchDelegatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AssetManagerKghBatchDelegatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AssetManagerKghBatchDelegated represents a KghBatchDelegated event raised by the AssetManager contract.
type AssetManagerKghBatchDelegated struct {
	Validator common.Address
	Delegator common.Address
	TokenIds  []*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterKghBatchDelegated is a free log retrieval operation binding the contract event 0xafdb227ea10128ee703397dbff24db1f7c90303e6fff8068a2712a1b10c935f1.
//
// Solidity: event KghBatchDelegated(address indexed validator, address indexed delegator, uint256[] tokenIds)
func (_AssetManager *AssetManagerFilterer) FilterKghBatchDelegated(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AssetManagerKghBatchDelegatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AssetManager.contract.FilterLogs(opts, "KghBatchDelegated", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AssetManagerKghBatchDelegatedIterator{contract: _AssetManager.contract, event: "KghBatchDelegated", logs: logs, sub: sub}, nil
}

// WatchKghBatchDelegated is a free log subscription operation binding the contract event 0xafdb227ea10128ee703397dbff24db1f7c90303e6fff8068a2712a1b10c935f1.
//
// Solidity: event KghBatchDelegated(address indexed validator, address indexed delegator, uint256[] tokenIds)
func (_AssetManager *AssetManagerFilterer) WatchKghBatchDelegated(opts *bind.WatchOpts, sink chan<- *AssetManagerKghBatchDelegated, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AssetManager.contract.WatchLogs(opts, "KghBatchDelegated", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AssetManagerKghBatchDelegated)
				if err := _AssetManager.contract.UnpackLog(event, "KghBatchDelegated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKghBatchDelegated is a log parse operation binding the contract event 0xafdb227ea10128ee703397dbff24db1f7c90303e6fff8068a2712a1b10c935f1.
//
// Solidity: event KghBatchDelegated(address indexed validator, address indexed delegator, uint256[] tokenIds)
func (_AssetManager *AssetManagerFilterer) ParseKghBatchDelegated(log types.Log) (*AssetManagerKghBatchDelegated, error) {
	event := new(AssetManagerKghBatchDelegated)
	if err := _AssetManager.contract.UnpackLog(event, "KghBatchDelegated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AssetManagerKghBatchUndelegatedIterator is returned from FilterKghBatchUndelegated and is used to iterate over the raw logs and unpacked data for KghBatchUndelegated events raised by the AssetManager contract.
type AssetManagerKghBatchUndelegatedIterator struct {
	Event *AssetManagerKghBatchUndelegated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AssetManagerKghBatchUndelegatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AssetManagerKghBatchUndelegated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AssetManagerKghBatchUndelegated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AssetManagerKghBatchUndelegatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AssetManagerKghBatchUndelegatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AssetManagerKghBatchUndelegated represents a KghBatchUndelegated event raised by the AssetManager contract.
type AssetManagerKghBatchUndelegated struct {
	Validator common.Address
	Delegator common.Address
	TokenIds  []*big.Int
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterKghBatchUndelegated is a free log retrieval operation binding the contract event 0x6fcfb0c3a157955b6809f57bb114c142779ab9b7dd686a1b28ec0f2c9edfb943.
//
// Solidity: event KghBatchUndelegated(address indexed validator, address indexed delegator, uint256[] tokenIds, uint128 amount)
func (_AssetManager *AssetManagerFilterer) FilterKghBatchUndelegated(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AssetManagerKghBatchUndelegatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AssetManager.contract.FilterLogs(opts, "KghBatchUndelegated", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AssetManagerKghBatchUndelegatedIterator{contract: _AssetManager.contract, event: "KghBatchUndelegated", logs: logs, sub: sub}, nil
}

// WatchKghBatchUndelegated is a free log subscription operation binding the contract event 0x6fcfb0c3a157955b6809f57bb114c142779ab9b7dd686a1b28ec0f2c9edfb943.
//
// Solidity: event KghBatchUndelegated(address indexed validator, address indexed delegator, uint256[] tokenIds, uint128 amount)
func (_AssetManager *AssetManagerFilterer) WatchKghBatchUndelegated(opts *bind.WatchOpts, sink chan<- *AssetManagerKghBatchUndelegated, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AssetManager.contract.WatchLogs(opts, "KghBatchUndelegated", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AssetManagerKghBatchUndelegated)
				if err := _AssetManager.contract.UnpackLog(event, "KghBatchUndelegated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKghBatchUndelegated is a log parse operation binding the contract event 0x6fcfb0c3a157955b6809f57bb114c142779ab9b7dd686a1b28ec0f2c9edfb943.
//
// Solidity: event KghBatchUndelegated(address indexed validator, address indexed delegator, uint256[] tokenIds, uint128 amount)
func (_AssetManager *AssetManagerFilterer) ParseKghBatchUndelegated(log types.Log) (*AssetManagerKghBatchUndelegated, error) {
	event := new(AssetManagerKghBatchUndelegated)
	if err := _AssetManager.contract.UnpackLog(event, "KghBatchUndelegated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AssetManagerKghDelegatedIterator is returned from FilterKghDelegated and is used to iterate over the raw logs and unpacked data for KghDelegated events raised by the AssetManager contract.
type AssetManagerKghDelegatedIterator struct {
	Event *AssetManagerKghDelegated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AssetManagerKghDelegatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AssetManagerKghDelegated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AssetManagerKghDelegated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AssetManagerKghDelegatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AssetManagerKghDelegatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AssetManagerKghDelegated represents a KghDelegated event raised by the AssetManager contract.
type AssetManagerKghDelegated struct {
	Validator common.Address
	Delegator common.Address
	TokenId   *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterKghDelegated is a free log retrieval operation binding the contract event 0x7a9043ba5086cf56c416db64f7608d06eae96d08a7e35a101ad4f42aab23585d.
//
// Solidity: event KghDelegated(address indexed validator, address indexed delegator, uint256 tokenId)
func (_AssetManager *AssetManagerFilterer) FilterKghDelegated(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AssetManagerKghDelegatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AssetManager.contract.FilterLogs(opts, "KghDelegated", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AssetManagerKghDelegatedIterator{contract: _AssetManager.contract, event: "KghDelegated", logs: logs, sub: sub}, nil
}

// WatchKghDelegated is a free log subscription operation binding the contract event 0x7a9043ba5086cf56c416db64f7608d06eae96d08a7e35a101ad4f42aab23585d.
//
// Solidity: event KghDelegated(address indexed validator, address indexed delegator, uint256 tokenId)
func (_AssetManager *AssetManagerFilterer) WatchKghDelegated(opts *bind.WatchOpts, sink chan<- *AssetManagerKghDelegated, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AssetManager.contract.WatchLogs(opts, "KghDelegated", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AssetManagerKghDelegated)
				if err := _AssetManager.contract.UnpackLog(event, "KghDelegated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKghDelegated is a log parse operation binding the contract event 0x7a9043ba5086cf56c416db64f7608d06eae96d08a7e35a101ad4f42aab23585d.
//
// Solidity: event KghDelegated(address indexed validator, address indexed delegator, uint256 tokenId)
func (_AssetManager *AssetManagerFilterer) ParseKghDelegated(log types.Log) (*AssetManagerKghDelegated, error) {
	event := new(AssetManagerKghDelegated)
	if err := _AssetManager.contract.UnpackLog(event, "KghDelegated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AssetManagerKghRewardClaimedIterator is returned from FilterKghRewardClaimed and is used to iterate over the raw logs and unpacked data for KghRewardClaimed events raised by the AssetManager contract.
type AssetManagerKghRewardClaimedIterator struct {
	Event *AssetManagerKghRewardClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AssetManagerKghRewardClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AssetManagerKghRewardClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AssetManagerKghRewardClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AssetManagerKghRewardClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AssetManagerKghRewardClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AssetManagerKghRewardClaimed represents a KghRewardClaimed event raised by the AssetManager contract.
type AssetManagerKghRewardClaimed struct {
	Validator common.Address
	Delegator common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterKghRewardClaimed is a free log retrieval operation binding the contract event 0xf31a7084636b55317cfeed458343e6f580e12d52ba89be9f1faae91731fcce42.
//
// Solidity: event KghRewardClaimed(address indexed validator, address indexed delegator, uint128 amount)
func (_AssetManager *AssetManagerFilterer) FilterKghRewardClaimed(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AssetManagerKghRewardClaimedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AssetManager.contract.FilterLogs(opts, "KghRewardClaimed", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AssetManagerKghRewardClaimedIterator{contract: _AssetManager.contract, event: "KghRewardClaimed", logs: logs, sub: sub}, nil
}

// WatchKghRewardClaimed is a free log subscription operation binding the contract event 0xf31a7084636b55317cfeed458343e6f580e12d52ba89be9f1faae91731fcce42.
//
// Solidity: event KghRewardClaimed(address indexed validator, address indexed delegator, uint128 amount)
func (_AssetManager *AssetManagerFilterer) WatchKghRewardClaimed(opts *bind.WatchOpts, sink chan<- *AssetManagerKghRewardClaimed, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AssetManager.contract.WatchLogs(opts, "KghRewardClaimed", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AssetManagerKghRewardClaimed)
				if err := _AssetManager.contract.UnpackLog(event, "KghRewardClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKghRewardClaimed is a log parse operation binding the contract event 0xf31a7084636b55317cfeed458343e6f580e12d52ba89be9f1faae91731fcce42.
//
// Solidity: event KghRewardClaimed(address indexed validator, address indexed delegator, uint128 amount)
func (_AssetManager *AssetManagerFilterer) ParseKghRewardClaimed(log types.Log) (*AssetManagerKghRewardClaimed, error) {
	event := new(AssetManagerKghRewardClaimed)
	if err := _AssetManager.contract.UnpackLog(event, "KghRewardClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AssetManagerKghUndelegatedIterator is returned from FilterKghUndelegated and is used to iterate over the raw logs and unpacked data for KghUndelegated events raised by the AssetManager contract.
type AssetManagerKghUndelegatedIterator struct {
	Event *AssetManagerKghUndelegated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AssetManagerKghUndelegatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AssetManagerKghUndelegated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AssetManagerKghUndelegated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AssetManagerKghUndelegatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AssetManagerKghUndelegatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AssetManagerKghUndelegated represents a KghUndelegated event raised by the AssetManager contract.
type AssetManagerKghUndelegated struct {
	Validator common.Address
	Delegator common.Address
	TokenId   *big.Int
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterKghUndelegated is a free log retrieval operation binding the contract event 0xd1343dccf52a899cdc8aaa99714d930d2871b21c218512c779ca3f7c7fddab41.
//
// Solidity: event KghUndelegated(address indexed validator, address indexed delegator, uint256 tokenId, uint128 amount)
func (_AssetManager *AssetManagerFilterer) FilterKghUndelegated(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AssetManagerKghUndelegatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AssetManager.contract.FilterLogs(opts, "KghUndelegated", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AssetManagerKghUndelegatedIterator{contract: _AssetManager.contract, event: "KghUndelegated", logs: logs, sub: sub}, nil
}

// WatchKghUndelegated is a free log subscription operation binding the contract event 0xd1343dccf52a899cdc8aaa99714d930d2871b21c218512c779ca3f7c7fddab41.
//
// Solidity: event KghUndelegated(address indexed validator, address indexed delegator, uint256 tokenId, uint128 amount)
func (_AssetManager *AssetManagerFilterer) WatchKghUndelegated(opts *bind.WatchOpts, sink chan<- *AssetManagerKghUndelegated, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AssetManager.contract.WatchLogs(opts, "KghUndelegated", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AssetManagerKghUndelegated)
				if err := _AssetManager.contract.UnpackLog(event, "KghUndelegated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKghUndelegated is a log parse operation binding the contract event 0xd1343dccf52a899cdc8aaa99714d930d2871b21c218512c779ca3f7c7fddab41.
//
// Solidity: event KghUndelegated(address indexed validator, address indexed delegator, uint256 tokenId, uint128 amount)
func (_AssetManager *AssetManagerFilterer) ParseKghUndelegated(log types.Log) (*AssetManagerKghUndelegated, error) {
	event := new(AssetManagerKghUndelegated)
	if err := _AssetManager.contract.UnpackLog(event, "KghUndelegated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AssetManagerKroDelegatedIterator is returned from FilterKroDelegated and is used to iterate over the raw logs and unpacked data for KroDelegated events raised by the AssetManager contract.
type AssetManagerKroDelegatedIterator struct {
	Event *AssetManagerKroDelegated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AssetManagerKroDelegatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AssetManagerKroDelegated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AssetManagerKroDelegated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AssetManagerKroDelegatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AssetManagerKroDelegatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AssetManagerKroDelegated represents a KroDelegated event raised by the AssetManager contract.
type AssetManagerKroDelegated struct {
	Validator common.Address
	Delegator common.Address
	Amount    *big.Int
	Shares    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterKroDelegated is a free log retrieval operation binding the contract event 0x334cabe84b7338f2bdd62070c02f24ffbcc7735e46f425fa401db349717e1328.
//
// Solidity: event KroDelegated(address indexed validator, address indexed delegator, uint128 amount, uint128 shares)
func (_AssetManager *AssetManagerFilterer) FilterKroDelegated(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AssetManagerKroDelegatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AssetManager.contract.FilterLogs(opts, "KroDelegated", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AssetManagerKroDelegatedIterator{contract: _AssetManager.contract, event: "KroDelegated", logs: logs, sub: sub}, nil
}

// WatchKroDelegated is a free log subscription operation binding the contract event 0x334cabe84b7338f2bdd62070c02f24ffbcc7735e46f425fa401db349717e1328.
//
// Solidity: event KroDelegated(address indexed validator, address indexed delegator, uint128 amount, uint128 shares)
func (_AssetManager *AssetManagerFilterer) WatchKroDelegated(opts *bind.WatchOpts, sink chan<- *AssetManagerKroDelegated, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AssetManager.contract.WatchLogs(opts, "KroDelegated", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AssetManagerKroDelegated)
				if err := _AssetManager.contract.UnpackLog(event, "KroDelegated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKroDelegated is a log parse operation binding the contract event 0x334cabe84b7338f2bdd62070c02f24ffbcc7735e46f425fa401db349717e1328.
//
// Solidity: event KroDelegated(address indexed validator, address indexed delegator, uint128 amount, uint128 shares)
func (_AssetManager *AssetManagerFilterer) ParseKroDelegated(log types.Log) (*AssetManagerKroDelegated, error) {
	event := new(AssetManagerKroDelegated)
	if err := _AssetManager.contract.UnpackLog(event, "KroDelegated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AssetManagerKroUndelegatedIterator is returned from FilterKroUndelegated and is used to iterate over the raw logs and unpacked data for KroUndelegated events raised by the AssetManager contract.
type AssetManagerKroUndelegatedIterator struct {
	Event *AssetManagerKroUndelegated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AssetManagerKroUndelegatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AssetManagerKroUndelegated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AssetManagerKroUndelegated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AssetManagerKroUndelegatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AssetManagerKroUndelegatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AssetManagerKroUndelegated represents a KroUndelegated event raised by the AssetManager contract.
type AssetManagerKroUndelegated struct {
	Validator common.Address
	Delegator common.Address
	Amount    *big.Int
	Shares    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterKroUndelegated is a free log retrieval operation binding the contract event 0x6acf5e34cb1562e3a0785bb4565e0761928cda3dd258168c73bca09621c669e9.
//
// Solidity: event KroUndelegated(address indexed validator, address indexed delegator, uint128 amount, uint128 shares)
func (_AssetManager *AssetManagerFilterer) FilterKroUndelegated(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AssetManagerKroUndelegatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AssetManager.contract.FilterLogs(opts, "KroUndelegated", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AssetManagerKroUndelegatedIterator{contract: _AssetManager.contract, event: "KroUndelegated", logs: logs, sub: sub}, nil
}

// WatchKroUndelegated is a free log subscription operation binding the contract event 0x6acf5e34cb1562e3a0785bb4565e0761928cda3dd258168c73bca09621c669e9.
//
// Solidity: event KroUndelegated(address indexed validator, address indexed delegator, uint128 amount, uint128 shares)
func (_AssetManager *AssetManagerFilterer) WatchKroUndelegated(opts *bind.WatchOpts, sink chan<- *AssetManagerKroUndelegated, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AssetManager.contract.WatchLogs(opts, "KroUndelegated", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AssetManagerKroUndelegated)
				if err := _AssetManager.contract.UnpackLog(event, "KroUndelegated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKroUndelegated is a log parse operation binding the contract event 0x6acf5e34cb1562e3a0785bb4565e0761928cda3dd258168c73bca09621c669e9.
//
// Solidity: event KroUndelegated(address indexed validator, address indexed delegator, uint128 amount, uint128 shares)
func (_AssetManager *AssetManagerFilterer) ParseKroUndelegated(log types.Log) (*AssetManagerKroUndelegated, error) {
	event := new(AssetManagerKroUndelegated)
	if err := _AssetManager.contract.UnpackLog(event, "KroUndelegated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AssetManagerValidatorKroBondedIterator is returned from FilterValidatorKroBonded and is used to iterate over the raw logs and unpacked data for ValidatorKroBonded events raised by the AssetManager contract.
type AssetManagerValidatorKroBondedIterator struct {
	Event *AssetManagerValidatorKroBonded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AssetManagerValidatorKroBondedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AssetManagerValidatorKroBonded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AssetManagerValidatorKroBonded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AssetManagerValidatorKroBondedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AssetManagerValidatorKroBondedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AssetManagerValidatorKroBonded represents a ValidatorKroBonded event raised by the AssetManager contract.
type AssetManagerValidatorKroBonded struct {
	Validator common.Address
	Amount    *big.Int
	Remainder *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorKroBonded is a free log retrieval operation binding the contract event 0x7ad6f32675ff7ed77c34b45d23cd987ea6a62560f390baac683de0bc6b24fb7e.
//
// Solidity: event ValidatorKroBonded(address indexed validator, uint128 amount, uint128 remainder)
func (_AssetManager *AssetManagerFilterer) FilterValidatorKroBonded(opts *bind.FilterOpts, validator []common.Address) (*AssetManagerValidatorKroBondedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AssetManager.contract.FilterLogs(opts, "ValidatorKroBonded", validatorRule)
	if err != nil {
		return nil, err
	}
	return &AssetManagerValidatorKroBondedIterator{contract: _AssetManager.contract, event: "ValidatorKroBonded", logs: logs, sub: sub}, nil
}

// WatchValidatorKroBonded is a free log subscription operation binding the contract event 0x7ad6f32675ff7ed77c34b45d23cd987ea6a62560f390baac683de0bc6b24fb7e.
//
// Solidity: event ValidatorKroBonded(address indexed validator, uint128 amount, uint128 remainder)
func (_AssetManager *AssetManagerFilterer) WatchValidatorKroBonded(opts *bind.WatchOpts, sink chan<- *AssetManagerValidatorKroBonded, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AssetManager.contract.WatchLogs(opts, "ValidatorKroBonded", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AssetManagerValidatorKroBonded)
				if err := _AssetManager.contract.UnpackLog(event, "ValidatorKroBonded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorKroBonded is a log parse operation binding the contract event 0x7ad6f32675ff7ed77c34b45d23cd987ea6a62560f390baac683de0bc6b24fb7e.
//
// Solidity: event ValidatorKroBonded(address indexed validator, uint128 amount, uint128 remainder)
func (_AssetManager *AssetManagerFilterer) ParseValidatorKroBonded(log types.Log) (*AssetManagerValidatorKroBonded, error) {
	event := new(AssetManagerValidatorKroBonded)
	if err := _AssetManager.contract.UnpackLog(event, "ValidatorKroBonded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AssetManagerValidatorKroUnbondedIterator is returned from FilterValidatorKroUnbonded and is used to iterate over the raw logs and unpacked data for ValidatorKroUnbonded events raised by the AssetManager contract.
type AssetManagerValidatorKroUnbondedIterator struct {
	Event *AssetManagerValidatorKroUnbonded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AssetManagerValidatorKroUnbondedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AssetManagerValidatorKroUnbonded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AssetManagerValidatorKroUnbonded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AssetManagerValidatorKroUnbondedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AssetManagerValidatorKroUnbondedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AssetManagerValidatorKroUnbonded represents a ValidatorKroUnbonded event raised by the AssetManager contract.
type AssetManagerValidatorKroUnbonded struct {
	Validator common.Address
	Amount    *big.Int
	Remainder *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorKroUnbonded is a free log retrieval operation binding the contract event 0xc8d4f2228d78be7d0ca97344025aae4f9bc2c87ece32295d72791a4d39f2a71a.
//
// Solidity: event ValidatorKroUnbonded(address indexed validator, uint128 amount, uint128 remainder)
func (_AssetManager *AssetManagerFilterer) FilterValidatorKroUnbonded(opts *bind.FilterOpts, validator []common.Address) (*AssetManagerValidatorKroUnbondedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AssetManager.contract.FilterLogs(opts, "ValidatorKroUnbonded", validatorRule)
	if err != nil {
		return nil, err
	}
	return &AssetManagerValidatorKroUnbondedIterator{contract: _AssetManager.contract, event: "ValidatorKroUnbonded", logs: logs, sub: sub}, nil
}

// WatchValidatorKroUnbonded is a free log subscription operation binding the contract event 0xc8d4f2228d78be7d0ca97344025aae4f9bc2c87ece32295d72791a4d39f2a71a.
//
// Solidity: event ValidatorKroUnbonded(address indexed validator, uint128 amount, uint128 remainder)
func (_AssetManager *AssetManagerFilterer) WatchValidatorKroUnbonded(opts *bind.WatchOpts, sink chan<- *AssetManagerValidatorKroUnbonded, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AssetManager.contract.WatchLogs(opts, "ValidatorKroUnbonded", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AssetManagerValidatorKroUnbonded)
				if err := _AssetManager.contract.UnpackLog(event, "ValidatorKroUnbonded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorKroUnbonded is a log parse operation binding the contract event 0xc8d4f2228d78be7d0ca97344025aae4f9bc2c87ece32295d72791a4d39f2a71a.
//
// Solidity: event ValidatorKroUnbonded(address indexed validator, uint128 amount, uint128 remainder)
func (_AssetManager *AssetManagerFilterer) ParseValidatorKroUnbonded(log types.Log) (*AssetManagerValidatorKroUnbonded, error) {
	event := new(AssetManagerValidatorKroUnbonded)
	if err := _AssetManager.contract.UnpackLog(event, "ValidatorKroUnbonded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AssetManagerWithdrawnIterator is returned from FilterWithdrawn and is used to iterate over the raw logs and unpacked data for Withdrawn events raised by the AssetManager contract.
type AssetManagerWithdrawnIterator struct {
	Event *AssetManagerWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AssetManagerWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AssetManagerWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AssetManagerWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AssetManagerWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AssetManagerWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AssetManagerWithdrawn represents a Withdrawn event raised by the AssetManager contract.
type AssetManagerWithdrawn struct {
	Validator common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterWithdrawn is a free log retrieval operation binding the contract event 0xab48b3d59a240196dc5bdd7f7a638fca310f8194c7d350c3dd7765861311ddf8.
//
// Solidity: event Withdrawn(address indexed validator, uint128 amount)
func (_AssetManager *AssetManagerFilterer) FilterWithdrawn(opts *bind.FilterOpts, validator []common.Address) (*AssetManagerWithdrawnIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AssetManager.contract.FilterLogs(opts, "Withdrawn", validatorRule)
	if err != nil {
		return nil, err
	}
	return &AssetManagerWithdrawnIterator{contract: _AssetManager.contract, event: "Withdrawn", logs: logs, sub: sub}, nil
}

// WatchWithdrawn is a free log subscription operation binding the contract event 0xab48b3d59a240196dc5bdd7f7a638fca310f8194c7d350c3dd7765861311ddf8.
//
// Solidity: event Withdrawn(address indexed validator, uint128 amount)
func (_AssetManager *AssetManagerFilterer) WatchWithdrawn(opts *bind.WatchOpts, sink chan<- *AssetManagerWithdrawn, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AssetManager.contract.WatchLogs(opts, "Withdrawn", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AssetManagerWithdrawn)
				if err := _AssetManager.contract.UnpackLog(event, "Withdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawn is a log parse operation binding the contract event 0xab48b3d59a240196dc5bdd7f7a638fca310f8194c7d350c3dd7765861311ddf8.
//
// Solidity: event Withdrawn(address indexed validator, uint128 amount)
func (_AssetManager *AssetManagerFilterer) ParseWithdrawn(log types.Log) (*AssetManagerWithdrawn, error) {
	event := new(AssetManagerWithdrawn)
	if err := _AssetManager.contract.UnpackLog(event, "Withdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
