// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ColosseumMetaData contains all meta data concerning the Colosseum contract.
var ColosseumMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_l2Oracle\",\"type\":\"address\",\"internalType\":\"contractL2OutputOracle\"},{\"name\":\"_zkVerifier\",\"type\":\"address\",\"internalType\":\"contractZKVerifier\"},{\"name\":\"_submissionInterval\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_creationPeriodSeconds\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_bisectionTimeout\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_provingTimeout\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_dummyHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"_maxTxs\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_segmentsLengths\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"},{\"name\":\"_securityCouncil\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_zkMerkleTrie\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"BISECTION_TIMEOUT\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"CREATION_PERIOD_SECONDS\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"DUMMY_HASH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"L2_ORACLE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractL2OutputOracle\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"L2_ORACLE_SUBMISSION_INTERVAL\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MAX_TXS\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"PROVING_TIMEOUT\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"SECURITY_COUNCIL\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ZK_MERKLE_TRIE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ZK_VERIFIER\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractZKVerifier\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"bisect\",\"inputs\":[{\"name\":\"_outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_challenger\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_pos\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_segments\",\"type\":\"bytes32[]\",\"internalType\":\"bytes32[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"cancelChallenge\",\"inputs\":[{\"name\":\"_outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"challengerTimeout\",\"inputs\":[{\"name\":\"_outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_challenger\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"challenges\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"turn\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"timeoutAt\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"asserter\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"challenger\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"segSize\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"segStart\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"createChallenge\",\"inputs\":[{\"name\":\"_outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_l1BlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"_l1BlockNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_segments\",\"type\":\"bytes32[]\",\"internalType\":\"bytes32[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"deletedOutputs\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"submitter\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"outputRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"timestamp\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"l2BlockNumber\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"dismissChallenge\",\"inputs\":[{\"name\":\"_outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_challenger\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_asserter\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_outputRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"_publicInputHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"forceDeleteOutput\",\"inputs\":[{\"name\":\"_outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getSegments\",\"inputs\":[{\"name\":\"_outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_challenger\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\",\"internalType\":\"bytes32[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStatus\",\"inputs\":[{\"name\":\"_outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_challenger\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"enumColosseum.ChallengeStatus\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_segmentsLengths\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"isInCreationPeriod\",\"inputs\":[{\"name\":\"_outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"proveFault\",\"inputs\":[{\"name\":\"_outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_pos\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_proof\",\"type\":\"tuple\",\"internalType\":\"structTypes.PublicInputProof\",\"components\":[{\"name\":\"srcOutputRootProof\",\"type\":\"tuple\",\"internalType\":\"structTypes.OutputRootProof\",\"components\":[{\"name\":\"version\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"stateRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"messagePasserStorageRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"blockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"nextBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"dstOutputRootProof\",\"type\":\"tuple\",\"internalType\":\"structTypes.OutputRootProof\",\"components\":[{\"name\":\"version\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"stateRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"messagePasserStorageRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"blockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"nextBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"publicInput\",\"type\":\"tuple\",\"internalType\":\"structTypes.PublicInput\",\"components\":[{\"name\":\"blockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"parentHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"timestamp\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"number\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"gasLimit\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"baseFee\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"transactionsRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"stateRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"withdrawalsRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"txHashes\",\"type\":\"bytes32[]\",\"internalType\":\"bytes32[]\"},{\"name\":\"blobGasUsed\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"excessBlobGas\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"parentBeaconRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"rlps\",\"type\":\"tuple\",\"internalType\":\"structTypes.BlockHeaderRLP\",\"components\":[{\"name\":\"uncleHash\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"coinbase\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"receiptsRoot\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"logsBloom\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"difficulty\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"gasUsed\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"extraData\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"mixHash\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"nonce\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"l2ToL1MessagePasserBalance\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"l2ToL1MessagePasserCodeHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"merkleProof\",\"type\":\"bytes[]\",\"internalType\":\"bytes[]\"}]},{\"name\":\"_zkproof\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"},{\"name\":\"_pair\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"segmentsLengths\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"verifiedPublicInputs\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"version\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"Bisected\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"challenger\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"turn\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"},{\"name\":\"timestamp\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ChallengeCanceled\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"challenger\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ChallengeCreated\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"asserter\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"challenger\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ChallengeDismissed\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"challenger\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ChallengerTimedOut\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"challenger\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OutputForceDeleted\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"asseter\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Proven\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"challenger\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ReadyToProve\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"challenger\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"BlockHashMismatched\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"BlockHashMismatchedBtwSrcAndDst\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"CannotCancelChallenge\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"CreationPeriodPassed\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"FirstSegmentMismatched\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ImproperChallengeStatus\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ImproperChallengeStatusToCancel\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ImproperValidatorStatus\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidAddressGiven\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidInclusionProof\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidOutputGiven\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidPublicInput\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidSegmentsLength\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidTurn\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidZKProof\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"L1Reorged\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"LastSegmentMatched\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotAllowedCaller\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotAllowedGenesisOutput\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OnlyChallengerCanCancel\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OutputAlreadyDeleted\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OutputAlreadyFinalized\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OutputNotDeleted\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"StateRootMismatched\",\"inputs\":[]}]",
	Bin: "",
}

// ColosseumABI is the input ABI used to generate the binding from.
// Deprecated: Use ColosseumMetaData.ABI instead.
var ColosseumABI = ColosseumMetaData.ABI

// ColosseumBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ColosseumMetaData.Bin instead.
var ColosseumBin = ColosseumMetaData.Bin

// DeployColosseum deploys a new Ethereum contract, binding an instance of Colosseum to it.
func DeployColosseum(auth *bind.TransactOpts, backend bind.ContractBackend, _l2Oracle common.Address, _zkVerifier common.Address, _submissionInterval *big.Int, _creationPeriodSeconds *big.Int, _bisectionTimeout *big.Int, _provingTimeout *big.Int, _dummyHash [32]byte, _maxTxs *big.Int, _segmentsLengths []*big.Int, _securityCouncil common.Address, _zkMerkleTrie common.Address) (common.Address, *types.Transaction, *Colosseum, error) {
	parsed, err := ColosseumMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ColosseumBin), backend, _l2Oracle, _zkVerifier, _submissionInterval, _creationPeriodSeconds, _bisectionTimeout, _provingTimeout, _dummyHash, _maxTxs, _segmentsLengths, _securityCouncil, _zkMerkleTrie)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Colosseum{ColosseumCaller: ColosseumCaller{contract: contract}, ColosseumTransactor: ColosseumTransactor{contract: contract}, ColosseumFilterer: ColosseumFilterer{contract: contract}}, nil
}

// Colosseum is an auto generated Go binding around an Ethereum contract.
type Colosseum struct {
	ColosseumCaller     // Read-only binding to the contract
	ColosseumTransactor // Write-only binding to the contract
	ColosseumFilterer   // Log filterer for contract events
}

// ColosseumCaller is an auto generated read-only Go binding around an Ethereum contract.
type ColosseumCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ColosseumTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ColosseumTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ColosseumFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ColosseumFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ColosseumSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ColosseumSession struct {
	Contract     *Colosseum        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ColosseumCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ColosseumCallerSession struct {
	Contract *ColosseumCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ColosseumTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ColosseumTransactorSession struct {
	Contract     *ColosseumTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ColosseumRaw is an auto generated low-level Go binding around an Ethereum contract.
type ColosseumRaw struct {
	Contract *Colosseum // Generic contract binding to access the raw methods on
}

// ColosseumCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ColosseumCallerRaw struct {
	Contract *ColosseumCaller // Generic read-only contract binding to access the raw methods on
}

// ColosseumTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ColosseumTransactorRaw struct {
	Contract *ColosseumTransactor // Generic write-only contract binding to access the raw methods on
}

// NewColosseum creates a new instance of Colosseum, bound to a specific deployed contract.
func NewColosseum(address common.Address, backend bind.ContractBackend) (*Colosseum, error) {
	contract, err := bindColosseum(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Colosseum{ColosseumCaller: ColosseumCaller{contract: contract}, ColosseumTransactor: ColosseumTransactor{contract: contract}, ColosseumFilterer: ColosseumFilterer{contract: contract}}, nil
}

// NewColosseumCaller creates a new read-only instance of Colosseum, bound to a specific deployed contract.
func NewColosseumCaller(address common.Address, caller bind.ContractCaller) (*ColosseumCaller, error) {
	contract, err := bindColosseum(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ColosseumCaller{contract: contract}, nil
}

// NewColosseumTransactor creates a new write-only instance of Colosseum, bound to a specific deployed contract.
func NewColosseumTransactor(address common.Address, transactor bind.ContractTransactor) (*ColosseumTransactor, error) {
	contract, err := bindColosseum(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ColosseumTransactor{contract: contract}, nil
}

// NewColosseumFilterer creates a new log filterer instance of Colosseum, bound to a specific deployed contract.
func NewColosseumFilterer(address common.Address, filterer bind.ContractFilterer) (*ColosseumFilterer, error) {
	contract, err := bindColosseum(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ColosseumFilterer{contract: contract}, nil
}

// bindColosseum binds a generic wrapper to an already deployed contract.
func bindColosseum(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ColosseumMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Colosseum *ColosseumRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Colosseum.Contract.ColosseumCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Colosseum *ColosseumRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Colosseum.Contract.ColosseumTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Colosseum *ColosseumRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Colosseum.Contract.ColosseumTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Colosseum *ColosseumCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Colosseum.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Colosseum *ColosseumTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Colosseum.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Colosseum *ColosseumTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Colosseum.Contract.contract.Transact(opts, method, params...)
}

// BISECTIONTIMEOUT is a free data retrieval call binding the contract method 0x4394c584.
//
// Solidity: function BISECTION_TIMEOUT() view returns(uint256)
func (_Colosseum *ColosseumCaller) BISECTIONTIMEOUT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "BISECTION_TIMEOUT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BISECTIONTIMEOUT is a free data retrieval call binding the contract method 0x4394c584.
//
// Solidity: function BISECTION_TIMEOUT() view returns(uint256)
func (_Colosseum *ColosseumSession) BISECTIONTIMEOUT() (*big.Int, error) {
	return _Colosseum.Contract.BISECTIONTIMEOUT(&_Colosseum.CallOpts)
}

// BISECTIONTIMEOUT is a free data retrieval call binding the contract method 0x4394c584.
//
// Solidity: function BISECTION_TIMEOUT() view returns(uint256)
func (_Colosseum *ColosseumCallerSession) BISECTIONTIMEOUT() (*big.Int, error) {
	return _Colosseum.Contract.BISECTIONTIMEOUT(&_Colosseum.CallOpts)
}

// CREATIONPERIODSECONDS is a free data retrieval call binding the contract method 0x8f3a6c88.
//
// Solidity: function CREATION_PERIOD_SECONDS() view returns(uint256)
func (_Colosseum *ColosseumCaller) CREATIONPERIODSECONDS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "CREATION_PERIOD_SECONDS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CREATIONPERIODSECONDS is a free data retrieval call binding the contract method 0x8f3a6c88.
//
// Solidity: function CREATION_PERIOD_SECONDS() view returns(uint256)
func (_Colosseum *ColosseumSession) CREATIONPERIODSECONDS() (*big.Int, error) {
	return _Colosseum.Contract.CREATIONPERIODSECONDS(&_Colosseum.CallOpts)
}

// CREATIONPERIODSECONDS is a free data retrieval call binding the contract method 0x8f3a6c88.
//
// Solidity: function CREATION_PERIOD_SECONDS() view returns(uint256)
func (_Colosseum *ColosseumCallerSession) CREATIONPERIODSECONDS() (*big.Int, error) {
	return _Colosseum.Contract.CREATIONPERIODSECONDS(&_Colosseum.CallOpts)
}

// DUMMYHASH is a free data retrieval call binding the contract method 0xd5145ebc.
//
// Solidity: function DUMMY_HASH() view returns(bytes32)
func (_Colosseum *ColosseumCaller) DUMMYHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "DUMMY_HASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DUMMYHASH is a free data retrieval call binding the contract method 0xd5145ebc.
//
// Solidity: function DUMMY_HASH() view returns(bytes32)
func (_Colosseum *ColosseumSession) DUMMYHASH() ([32]byte, error) {
	return _Colosseum.Contract.DUMMYHASH(&_Colosseum.CallOpts)
}

// DUMMYHASH is a free data retrieval call binding the contract method 0xd5145ebc.
//
// Solidity: function DUMMY_HASH() view returns(bytes32)
func (_Colosseum *ColosseumCallerSession) DUMMYHASH() ([32]byte, error) {
	return _Colosseum.Contract.DUMMYHASH(&_Colosseum.CallOpts)
}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_Colosseum *ColosseumCaller) L2ORACLE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "L2_ORACLE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_Colosseum *ColosseumSession) L2ORACLE() (common.Address, error) {
	return _Colosseum.Contract.L2ORACLE(&_Colosseum.CallOpts)
}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_Colosseum *ColosseumCallerSession) L2ORACLE() (common.Address, error) {
	return _Colosseum.Contract.L2ORACLE(&_Colosseum.CallOpts)
}

// L2ORACLESUBMISSIONINTERVAL is a free data retrieval call binding the contract method 0xcfb4474d.
//
// Solidity: function L2_ORACLE_SUBMISSION_INTERVAL() view returns(uint256)
func (_Colosseum *ColosseumCaller) L2ORACLESUBMISSIONINTERVAL(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "L2_ORACLE_SUBMISSION_INTERVAL")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// L2ORACLESUBMISSIONINTERVAL is a free data retrieval call binding the contract method 0xcfb4474d.
//
// Solidity: function L2_ORACLE_SUBMISSION_INTERVAL() view returns(uint256)
func (_Colosseum *ColosseumSession) L2ORACLESUBMISSIONINTERVAL() (*big.Int, error) {
	return _Colosseum.Contract.L2ORACLESUBMISSIONINTERVAL(&_Colosseum.CallOpts)
}

// L2ORACLESUBMISSIONINTERVAL is a free data retrieval call binding the contract method 0xcfb4474d.
//
// Solidity: function L2_ORACLE_SUBMISSION_INTERVAL() view returns(uint256)
func (_Colosseum *ColosseumCallerSession) L2ORACLESUBMISSIONINTERVAL() (*big.Int, error) {
	return _Colosseum.Contract.L2ORACLESUBMISSIONINTERVAL(&_Colosseum.CallOpts)
}

// MAXTXS is a free data retrieval call binding the contract method 0x5375b891.
//
// Solidity: function MAX_TXS() view returns(uint256)
func (_Colosseum *ColosseumCaller) MAXTXS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "MAX_TXS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXTXS is a free data retrieval call binding the contract method 0x5375b891.
//
// Solidity: function MAX_TXS() view returns(uint256)
func (_Colosseum *ColosseumSession) MAXTXS() (*big.Int, error) {
	return _Colosseum.Contract.MAXTXS(&_Colosseum.CallOpts)
}

// MAXTXS is a free data retrieval call binding the contract method 0x5375b891.
//
// Solidity: function MAX_TXS() view returns(uint256)
func (_Colosseum *ColosseumCallerSession) MAXTXS() (*big.Int, error) {
	return _Colosseum.Contract.MAXTXS(&_Colosseum.CallOpts)
}

// PROVINGTIMEOUT is a free data retrieval call binding the contract method 0xd2ee3075.
//
// Solidity: function PROVING_TIMEOUT() view returns(uint256)
func (_Colosseum *ColosseumCaller) PROVINGTIMEOUT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "PROVING_TIMEOUT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PROVINGTIMEOUT is a free data retrieval call binding the contract method 0xd2ee3075.
//
// Solidity: function PROVING_TIMEOUT() view returns(uint256)
func (_Colosseum *ColosseumSession) PROVINGTIMEOUT() (*big.Int, error) {
	return _Colosseum.Contract.PROVINGTIMEOUT(&_Colosseum.CallOpts)
}

// PROVINGTIMEOUT is a free data retrieval call binding the contract method 0xd2ee3075.
//
// Solidity: function PROVING_TIMEOUT() view returns(uint256)
func (_Colosseum *ColosseumCallerSession) PROVINGTIMEOUT() (*big.Int, error) {
	return _Colosseum.Contract.PROVINGTIMEOUT(&_Colosseum.CallOpts)
}

// SECURITYCOUNCIL is a free data retrieval call binding the contract method 0x36086417.
//
// Solidity: function SECURITY_COUNCIL() view returns(address)
func (_Colosseum *ColosseumCaller) SECURITYCOUNCIL(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "SECURITY_COUNCIL")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SECURITYCOUNCIL is a free data retrieval call binding the contract method 0x36086417.
//
// Solidity: function SECURITY_COUNCIL() view returns(address)
func (_Colosseum *ColosseumSession) SECURITYCOUNCIL() (common.Address, error) {
	return _Colosseum.Contract.SECURITYCOUNCIL(&_Colosseum.CallOpts)
}

// SECURITYCOUNCIL is a free data retrieval call binding the contract method 0x36086417.
//
// Solidity: function SECURITY_COUNCIL() view returns(address)
func (_Colosseum *ColosseumCallerSession) SECURITYCOUNCIL() (common.Address, error) {
	return _Colosseum.Contract.SECURITYCOUNCIL(&_Colosseum.CallOpts)
}

// ZKMERKLETRIE is a free data retrieval call binding the contract method 0x5865b607.
//
// Solidity: function ZK_MERKLE_TRIE() view returns(address)
func (_Colosseum *ColosseumCaller) ZKMERKLETRIE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "ZK_MERKLE_TRIE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZKMERKLETRIE is a free data retrieval call binding the contract method 0x5865b607.
//
// Solidity: function ZK_MERKLE_TRIE() view returns(address)
func (_Colosseum *ColosseumSession) ZKMERKLETRIE() (common.Address, error) {
	return _Colosseum.Contract.ZKMERKLETRIE(&_Colosseum.CallOpts)
}

// ZKMERKLETRIE is a free data retrieval call binding the contract method 0x5865b607.
//
// Solidity: function ZK_MERKLE_TRIE() view returns(address)
func (_Colosseum *ColosseumCallerSession) ZKMERKLETRIE() (common.Address, error) {
	return _Colosseum.Contract.ZKMERKLETRIE(&_Colosseum.CallOpts)
}

// ZKVERIFIER is a free data retrieval call binding the contract method 0x9ded3952.
//
// Solidity: function ZK_VERIFIER() view returns(address)
func (_Colosseum *ColosseumCaller) ZKVERIFIER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "ZK_VERIFIER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZKVERIFIER is a free data retrieval call binding the contract method 0x9ded3952.
//
// Solidity: function ZK_VERIFIER() view returns(address)
func (_Colosseum *ColosseumSession) ZKVERIFIER() (common.Address, error) {
	return _Colosseum.Contract.ZKVERIFIER(&_Colosseum.CallOpts)
}

// ZKVERIFIER is a free data retrieval call binding the contract method 0x9ded3952.
//
// Solidity: function ZK_VERIFIER() view returns(address)
func (_Colosseum *ColosseumCallerSession) ZKVERIFIER() (common.Address, error) {
	return _Colosseum.Contract.ZKVERIFIER(&_Colosseum.CallOpts)
}

// Challenges is a free data retrieval call binding the contract method 0x2df27fa5.
//
// Solidity: function challenges(uint256 , address ) view returns(uint8 turn, uint64 timeoutAt, address asserter, address challenger, uint256 segSize, uint256 segStart)
func (_Colosseum *ColosseumCaller) Challenges(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (struct {
	Turn       uint8
	TimeoutAt  uint64
	Asserter   common.Address
	Challenger common.Address
	SegSize    *big.Int
	SegStart   *big.Int
}, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "challenges", arg0, arg1)

	outstruct := new(struct {
		Turn       uint8
		TimeoutAt  uint64
		Asserter   common.Address
		Challenger common.Address
		SegSize    *big.Int
		SegStart   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Turn = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.TimeoutAt = *abi.ConvertType(out[1], new(uint64)).(*uint64)
	outstruct.Asserter = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Challenger = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.SegSize = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.SegStart = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Challenges is a free data retrieval call binding the contract method 0x2df27fa5.
//
// Solidity: function challenges(uint256 , address ) view returns(uint8 turn, uint64 timeoutAt, address asserter, address challenger, uint256 segSize, uint256 segStart)
func (_Colosseum *ColosseumSession) Challenges(arg0 *big.Int, arg1 common.Address) (struct {
	Turn       uint8
	TimeoutAt  uint64
	Asserter   common.Address
	Challenger common.Address
	SegSize    *big.Int
	SegStart   *big.Int
}, error) {
	return _Colosseum.Contract.Challenges(&_Colosseum.CallOpts, arg0, arg1)
}

// Challenges is a free data retrieval call binding the contract method 0x2df27fa5.
//
// Solidity: function challenges(uint256 , address ) view returns(uint8 turn, uint64 timeoutAt, address asserter, address challenger, uint256 segSize, uint256 segStart)
func (_Colosseum *ColosseumCallerSession) Challenges(arg0 *big.Int, arg1 common.Address) (struct {
	Turn       uint8
	TimeoutAt  uint64
	Asserter   common.Address
	Challenger common.Address
	SegSize    *big.Int
	SegStart   *big.Int
}, error) {
	return _Colosseum.Contract.Challenges(&_Colosseum.CallOpts, arg0, arg1)
}

// DeletedOutputs is a free data retrieval call binding the contract method 0x5a6b011f.
//
// Solidity: function deletedOutputs(uint256 ) view returns(address submitter, bytes32 outputRoot, uint128 timestamp, uint128 l2BlockNumber)
func (_Colosseum *ColosseumCaller) DeletedOutputs(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Submitter     common.Address
	OutputRoot    [32]byte
	Timestamp     *big.Int
	L2BlockNumber *big.Int
}, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "deletedOutputs", arg0)

	outstruct := new(struct {
		Submitter     common.Address
		OutputRoot    [32]byte
		Timestamp     *big.Int
		L2BlockNumber *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Submitter = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.OutputRoot = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Timestamp = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.L2BlockNumber = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// DeletedOutputs is a free data retrieval call binding the contract method 0x5a6b011f.
//
// Solidity: function deletedOutputs(uint256 ) view returns(address submitter, bytes32 outputRoot, uint128 timestamp, uint128 l2BlockNumber)
func (_Colosseum *ColosseumSession) DeletedOutputs(arg0 *big.Int) (struct {
	Submitter     common.Address
	OutputRoot    [32]byte
	Timestamp     *big.Int
	L2BlockNumber *big.Int
}, error) {
	return _Colosseum.Contract.DeletedOutputs(&_Colosseum.CallOpts, arg0)
}

// DeletedOutputs is a free data retrieval call binding the contract method 0x5a6b011f.
//
// Solidity: function deletedOutputs(uint256 ) view returns(address submitter, bytes32 outputRoot, uint128 timestamp, uint128 l2BlockNumber)
func (_Colosseum *ColosseumCallerSession) DeletedOutputs(arg0 *big.Int) (struct {
	Submitter     common.Address
	OutputRoot    [32]byte
	Timestamp     *big.Int
	L2BlockNumber *big.Int
}, error) {
	return _Colosseum.Contract.DeletedOutputs(&_Colosseum.CallOpts, arg0)
}

// GetSegments is a free data retrieval call binding the contract method 0xb3e7766d.
//
// Solidity: function getSegments(uint256 _outputIndex, address _challenger) view returns(bytes32[])
func (_Colosseum *ColosseumCaller) GetSegments(opts *bind.CallOpts, _outputIndex *big.Int, _challenger common.Address) ([][32]byte, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "getSegments", _outputIndex, _challenger)

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// GetSegments is a free data retrieval call binding the contract method 0xb3e7766d.
//
// Solidity: function getSegments(uint256 _outputIndex, address _challenger) view returns(bytes32[])
func (_Colosseum *ColosseumSession) GetSegments(_outputIndex *big.Int, _challenger common.Address) ([][32]byte, error) {
	return _Colosseum.Contract.GetSegments(&_Colosseum.CallOpts, _outputIndex, _challenger)
}

// GetSegments is a free data retrieval call binding the contract method 0xb3e7766d.
//
// Solidity: function getSegments(uint256 _outputIndex, address _challenger) view returns(bytes32[])
func (_Colosseum *ColosseumCallerSession) GetSegments(_outputIndex *big.Int, _challenger common.Address) ([][32]byte, error) {
	return _Colosseum.Contract.GetSegments(&_Colosseum.CallOpts, _outputIndex, _challenger)
}

// GetStatus is a free data retrieval call binding the contract method 0xe9371a2c.
//
// Solidity: function getStatus(uint256 _outputIndex, address _challenger) view returns(uint8)
func (_Colosseum *ColosseumCaller) GetStatus(opts *bind.CallOpts, _outputIndex *big.Int, _challenger common.Address) (uint8, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "getStatus", _outputIndex, _challenger)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetStatus is a free data retrieval call binding the contract method 0xe9371a2c.
//
// Solidity: function getStatus(uint256 _outputIndex, address _challenger) view returns(uint8)
func (_Colosseum *ColosseumSession) GetStatus(_outputIndex *big.Int, _challenger common.Address) (uint8, error) {
	return _Colosseum.Contract.GetStatus(&_Colosseum.CallOpts, _outputIndex, _challenger)
}

// GetStatus is a free data retrieval call binding the contract method 0xe9371a2c.
//
// Solidity: function getStatus(uint256 _outputIndex, address _challenger) view returns(uint8)
func (_Colosseum *ColosseumCallerSession) GetStatus(_outputIndex *big.Int, _challenger common.Address) (uint8, error) {
	return _Colosseum.Contract.GetStatus(&_Colosseum.CallOpts, _outputIndex, _challenger)
}

// IsInCreationPeriod is a free data retrieval call binding the contract method 0x461569b8.
//
// Solidity: function isInCreationPeriod(uint256 _outputIndex) view returns(bool)
func (_Colosseum *ColosseumCaller) IsInCreationPeriod(opts *bind.CallOpts, _outputIndex *big.Int) (bool, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "isInCreationPeriod", _outputIndex)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsInCreationPeriod is a free data retrieval call binding the contract method 0x461569b8.
//
// Solidity: function isInCreationPeriod(uint256 _outputIndex) view returns(bool)
func (_Colosseum *ColosseumSession) IsInCreationPeriod(_outputIndex *big.Int) (bool, error) {
	return _Colosseum.Contract.IsInCreationPeriod(&_Colosseum.CallOpts, _outputIndex)
}

// IsInCreationPeriod is a free data retrieval call binding the contract method 0x461569b8.
//
// Solidity: function isInCreationPeriod(uint256 _outputIndex) view returns(bool)
func (_Colosseum *ColosseumCallerSession) IsInCreationPeriod(_outputIndex *big.Int) (bool, error) {
	return _Colosseum.Contract.IsInCreationPeriod(&_Colosseum.CallOpts, _outputIndex)
}

// SegmentsLengths is a free data retrieval call binding the contract method 0x8f86c803.
//
// Solidity: function segmentsLengths(uint256 ) view returns(uint256)
func (_Colosseum *ColosseumCaller) SegmentsLengths(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "segmentsLengths", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SegmentsLengths is a free data retrieval call binding the contract method 0x8f86c803.
//
// Solidity: function segmentsLengths(uint256 ) view returns(uint256)
func (_Colosseum *ColosseumSession) SegmentsLengths(arg0 *big.Int) (*big.Int, error) {
	return _Colosseum.Contract.SegmentsLengths(&_Colosseum.CallOpts, arg0)
}

// SegmentsLengths is a free data retrieval call binding the contract method 0x8f86c803.
//
// Solidity: function segmentsLengths(uint256 ) view returns(uint256)
func (_Colosseum *ColosseumCallerSession) SegmentsLengths(arg0 *big.Int) (*big.Int, error) {
	return _Colosseum.Contract.SegmentsLengths(&_Colosseum.CallOpts, arg0)
}

// VerifiedPublicInputs is a free data retrieval call binding the contract method 0x1be4e27e.
//
// Solidity: function verifiedPublicInputs(bytes32 ) view returns(bool)
func (_Colosseum *ColosseumCaller) VerifiedPublicInputs(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "verifiedPublicInputs", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifiedPublicInputs is a free data retrieval call binding the contract method 0x1be4e27e.
//
// Solidity: function verifiedPublicInputs(bytes32 ) view returns(bool)
func (_Colosseum *ColosseumSession) VerifiedPublicInputs(arg0 [32]byte) (bool, error) {
	return _Colosseum.Contract.VerifiedPublicInputs(&_Colosseum.CallOpts, arg0)
}

// VerifiedPublicInputs is a free data retrieval call binding the contract method 0x1be4e27e.
//
// Solidity: function verifiedPublicInputs(bytes32 ) view returns(bool)
func (_Colosseum *ColosseumCallerSession) VerifiedPublicInputs(arg0 [32]byte) (bool, error) {
	return _Colosseum.Contract.VerifiedPublicInputs(&_Colosseum.CallOpts, arg0)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_Colosseum *ColosseumCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_Colosseum *ColosseumSession) Version() (string, error) {
	return _Colosseum.Contract.Version(&_Colosseum.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_Colosseum *ColosseumCallerSession) Version() (string, error) {
	return _Colosseum.Contract.Version(&_Colosseum.CallOpts)
}

// Bisect is a paid mutator transaction binding the contract method 0xa6ade11f.
//
// Solidity: function bisect(uint256 _outputIndex, address _challenger, uint256 _pos, bytes32[] _segments) returns()
func (_Colosseum *ColosseumTransactor) Bisect(opts *bind.TransactOpts, _outputIndex *big.Int, _challenger common.Address, _pos *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "bisect", _outputIndex, _challenger, _pos, _segments)
}

// Bisect is a paid mutator transaction binding the contract method 0xa6ade11f.
//
// Solidity: function bisect(uint256 _outputIndex, address _challenger, uint256 _pos, bytes32[] _segments) returns()
func (_Colosseum *ColosseumSession) Bisect(_outputIndex *big.Int, _challenger common.Address, _pos *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _Colosseum.Contract.Bisect(&_Colosseum.TransactOpts, _outputIndex, _challenger, _pos, _segments)
}

// Bisect is a paid mutator transaction binding the contract method 0xa6ade11f.
//
// Solidity: function bisect(uint256 _outputIndex, address _challenger, uint256 _pos, bytes32[] _segments) returns()
func (_Colosseum *ColosseumTransactorSession) Bisect(_outputIndex *big.Int, _challenger common.Address, _pos *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _Colosseum.Contract.Bisect(&_Colosseum.TransactOpts, _outputIndex, _challenger, _pos, _segments)
}

// CancelChallenge is a paid mutator transaction binding the contract method 0xa41483e3.
//
// Solidity: function cancelChallenge(uint256 _outputIndex) returns()
func (_Colosseum *ColosseumTransactor) CancelChallenge(opts *bind.TransactOpts, _outputIndex *big.Int) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "cancelChallenge", _outputIndex)
}

// CancelChallenge is a paid mutator transaction binding the contract method 0xa41483e3.
//
// Solidity: function cancelChallenge(uint256 _outputIndex) returns()
func (_Colosseum *ColosseumSession) CancelChallenge(_outputIndex *big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.CancelChallenge(&_Colosseum.TransactOpts, _outputIndex)
}

// CancelChallenge is a paid mutator transaction binding the contract method 0xa41483e3.
//
// Solidity: function cancelChallenge(uint256 _outputIndex) returns()
func (_Colosseum *ColosseumTransactorSession) CancelChallenge(_outputIndex *big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.CancelChallenge(&_Colosseum.TransactOpts, _outputIndex)
}

// ChallengerTimeout is a paid mutator transaction binding the contract method 0x1db1b672.
//
// Solidity: function challengerTimeout(uint256 _outputIndex, address _challenger) returns()
func (_Colosseum *ColosseumTransactor) ChallengerTimeout(opts *bind.TransactOpts, _outputIndex *big.Int, _challenger common.Address) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "challengerTimeout", _outputIndex, _challenger)
}

// ChallengerTimeout is a paid mutator transaction binding the contract method 0x1db1b672.
//
// Solidity: function challengerTimeout(uint256 _outputIndex, address _challenger) returns()
func (_Colosseum *ColosseumSession) ChallengerTimeout(_outputIndex *big.Int, _challenger common.Address) (*types.Transaction, error) {
	return _Colosseum.Contract.ChallengerTimeout(&_Colosseum.TransactOpts, _outputIndex, _challenger)
}

// ChallengerTimeout is a paid mutator transaction binding the contract method 0x1db1b672.
//
// Solidity: function challengerTimeout(uint256 _outputIndex, address _challenger) returns()
func (_Colosseum *ColosseumTransactorSession) ChallengerTimeout(_outputIndex *big.Int, _challenger common.Address) (*types.Transaction, error) {
	return _Colosseum.Contract.ChallengerTimeout(&_Colosseum.TransactOpts, _outputIndex, _challenger)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0xfc9d84df.
//
// Solidity: function createChallenge(uint256 _outputIndex, bytes32 _l1BlockHash, uint256 _l1BlockNumber, bytes32[] _segments) returns()
func (_Colosseum *ColosseumTransactor) CreateChallenge(opts *bind.TransactOpts, _outputIndex *big.Int, _l1BlockHash [32]byte, _l1BlockNumber *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "createChallenge", _outputIndex, _l1BlockHash, _l1BlockNumber, _segments)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0xfc9d84df.
//
// Solidity: function createChallenge(uint256 _outputIndex, bytes32 _l1BlockHash, uint256 _l1BlockNumber, bytes32[] _segments) returns()
func (_Colosseum *ColosseumSession) CreateChallenge(_outputIndex *big.Int, _l1BlockHash [32]byte, _l1BlockNumber *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _Colosseum.Contract.CreateChallenge(&_Colosseum.TransactOpts, _outputIndex, _l1BlockHash, _l1BlockNumber, _segments)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0xfc9d84df.
//
// Solidity: function createChallenge(uint256 _outputIndex, bytes32 _l1BlockHash, uint256 _l1BlockNumber, bytes32[] _segments) returns()
func (_Colosseum *ColosseumTransactorSession) CreateChallenge(_outputIndex *big.Int, _l1BlockHash [32]byte, _l1BlockNumber *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _Colosseum.Contract.CreateChallenge(&_Colosseum.TransactOpts, _outputIndex, _l1BlockHash, _l1BlockNumber, _segments)
}

// DismissChallenge is a paid mutator transaction binding the contract method 0x62fc00db.
//
// Solidity: function dismissChallenge(uint256 _outputIndex, address _challenger, address _asserter, bytes32 _outputRoot, bytes32 _publicInputHash) returns()
func (_Colosseum *ColosseumTransactor) DismissChallenge(opts *bind.TransactOpts, _outputIndex *big.Int, _challenger common.Address, _asserter common.Address, _outputRoot [32]byte, _publicInputHash [32]byte) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "dismissChallenge", _outputIndex, _challenger, _asserter, _outputRoot, _publicInputHash)
}

// DismissChallenge is a paid mutator transaction binding the contract method 0x62fc00db.
//
// Solidity: function dismissChallenge(uint256 _outputIndex, address _challenger, address _asserter, bytes32 _outputRoot, bytes32 _publicInputHash) returns()
func (_Colosseum *ColosseumSession) DismissChallenge(_outputIndex *big.Int, _challenger common.Address, _asserter common.Address, _outputRoot [32]byte, _publicInputHash [32]byte) (*types.Transaction, error) {
	return _Colosseum.Contract.DismissChallenge(&_Colosseum.TransactOpts, _outputIndex, _challenger, _asserter, _outputRoot, _publicInputHash)
}

// DismissChallenge is a paid mutator transaction binding the contract method 0x62fc00db.
//
// Solidity: function dismissChallenge(uint256 _outputIndex, address _challenger, address _asserter, bytes32 _outputRoot, bytes32 _publicInputHash) returns()
func (_Colosseum *ColosseumTransactorSession) DismissChallenge(_outputIndex *big.Int, _challenger common.Address, _asserter common.Address, _outputRoot [32]byte, _publicInputHash [32]byte) (*types.Transaction, error) {
	return _Colosseum.Contract.DismissChallenge(&_Colosseum.TransactOpts, _outputIndex, _challenger, _asserter, _outputRoot, _publicInputHash)
}

// ForceDeleteOutput is a paid mutator transaction binding the contract method 0xe39a219c.
//
// Solidity: function forceDeleteOutput(uint256 _outputIndex) returns()
func (_Colosseum *ColosseumTransactor) ForceDeleteOutput(opts *bind.TransactOpts, _outputIndex *big.Int) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "forceDeleteOutput", _outputIndex)
}

// ForceDeleteOutput is a paid mutator transaction binding the contract method 0xe39a219c.
//
// Solidity: function forceDeleteOutput(uint256 _outputIndex) returns()
func (_Colosseum *ColosseumSession) ForceDeleteOutput(_outputIndex *big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.ForceDeleteOutput(&_Colosseum.TransactOpts, _outputIndex)
}

// ForceDeleteOutput is a paid mutator transaction binding the contract method 0xe39a219c.
//
// Solidity: function forceDeleteOutput(uint256 _outputIndex) returns()
func (_Colosseum *ColosseumTransactorSession) ForceDeleteOutput(_outputIndex *big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.ForceDeleteOutput(&_Colosseum.TransactOpts, _outputIndex)
}

// Initialize is a paid mutator transaction binding the contract method 0x6fe0e559.
//
// Solidity: function initialize(uint256[] _segmentsLengths) returns()
func (_Colosseum *ColosseumTransactor) Initialize(opts *bind.TransactOpts, _segmentsLengths []*big.Int) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "initialize", _segmentsLengths)
}

// Initialize is a paid mutator transaction binding the contract method 0x6fe0e559.
//
// Solidity: function initialize(uint256[] _segmentsLengths) returns()
func (_Colosseum *ColosseumSession) Initialize(_segmentsLengths []*big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.Initialize(&_Colosseum.TransactOpts, _segmentsLengths)
}

// Initialize is a paid mutator transaction binding the contract method 0x6fe0e559.
//
// Solidity: function initialize(uint256[] _segmentsLengths) returns()
func (_Colosseum *ColosseumTransactorSession) Initialize(_segmentsLengths []*big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.Initialize(&_Colosseum.TransactOpts, _segmentsLengths)
}

// ProveFault is a paid mutator transaction binding the contract method 0x80ab1313.
//
// Solidity: function proveFault(uint256 _outputIndex, uint256 _pos, ((bytes32,bytes32,bytes32,bytes32,bytes32),(bytes32,bytes32,bytes32,bytes32,bytes32),(bytes32,bytes32,uint64,uint64,uint64,uint256,bytes32,bytes32,bytes32,bytes32[],uint64,uint64,bytes32),(bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes32,bytes32,bytes[]) _proof, uint256[] _zkproof, uint256[] _pair) returns()
func (_Colosseum *ColosseumTransactor) ProveFault(opts *bind.TransactOpts, _outputIndex *big.Int, _pos *big.Int, _proof TypesPublicInputProof, _zkproof []*big.Int, _pair []*big.Int) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "proveFault", _outputIndex, _pos, _proof, _zkproof, _pair)
}

// ProveFault is a paid mutator transaction binding the contract method 0x80ab1313.
//
// Solidity: function proveFault(uint256 _outputIndex, uint256 _pos, ((bytes32,bytes32,bytes32,bytes32,bytes32),(bytes32,bytes32,bytes32,bytes32,bytes32),(bytes32,bytes32,uint64,uint64,uint64,uint256,bytes32,bytes32,bytes32,bytes32[],uint64,uint64,bytes32),(bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes32,bytes32,bytes[]) _proof, uint256[] _zkproof, uint256[] _pair) returns()
func (_Colosseum *ColosseumSession) ProveFault(_outputIndex *big.Int, _pos *big.Int, _proof TypesPublicInputProof, _zkproof []*big.Int, _pair []*big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.ProveFault(&_Colosseum.TransactOpts, _outputIndex, _pos, _proof, _zkproof, _pair)
}

// ProveFault is a paid mutator transaction binding the contract method 0x80ab1313.
//
// Solidity: function proveFault(uint256 _outputIndex, uint256 _pos, ((bytes32,bytes32,bytes32,bytes32,bytes32),(bytes32,bytes32,bytes32,bytes32,bytes32),(bytes32,bytes32,uint64,uint64,uint64,uint256,bytes32,bytes32,bytes32,bytes32[],uint64,uint64,bytes32),(bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes32,bytes32,bytes[]) _proof, uint256[] _zkproof, uint256[] _pair) returns()
func (_Colosseum *ColosseumTransactorSession) ProveFault(_outputIndex *big.Int, _pos *big.Int, _proof TypesPublicInputProof, _zkproof []*big.Int, _pair []*big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.ProveFault(&_Colosseum.TransactOpts, _outputIndex, _pos, _proof, _zkproof, _pair)
}

// ColosseumBisectedIterator is returned from FilterBisected and is used to iterate over the raw logs and unpacked data for Bisected events raised by the Colosseum contract.
type ColosseumBisectedIterator struct {
	Event *ColosseumBisected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumBisectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumBisected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumBisected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumBisectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumBisectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumBisected represents a Bisected event raised by the Colosseum contract.
type ColosseumBisected struct {
	OutputIndex *big.Int
	Challenger  common.Address
	Turn        uint8
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBisected is a free log retrieval operation binding the contract event 0xcadef6622777415b0589e491bdbf6baf11242f676f77055fd03bf1658c17a145.
//
// Solidity: event Bisected(uint256 indexed outputIndex, address indexed challenger, uint8 turn, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) FilterBisected(opts *bind.FilterOpts, outputIndex []*big.Int, challenger []common.Address) (*ColosseumBisectedIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "Bisected", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return &ColosseumBisectedIterator{contract: _Colosseum.contract, event: "Bisected", logs: logs, sub: sub}, nil
}

// WatchBisected is a free log subscription operation binding the contract event 0xcadef6622777415b0589e491bdbf6baf11242f676f77055fd03bf1658c17a145.
//
// Solidity: event Bisected(uint256 indexed outputIndex, address indexed challenger, uint8 turn, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) WatchBisected(opts *bind.WatchOpts, sink chan<- *ColosseumBisected, outputIndex []*big.Int, challenger []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "Bisected", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumBisected)
				if err := _Colosseum.contract.UnpackLog(event, "Bisected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBisected is a log parse operation binding the contract event 0xcadef6622777415b0589e491bdbf6baf11242f676f77055fd03bf1658c17a145.
//
// Solidity: event Bisected(uint256 indexed outputIndex, address indexed challenger, uint8 turn, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) ParseBisected(log types.Log) (*ColosseumBisected, error) {
	event := new(ColosseumBisected)
	if err := _Colosseum.contract.UnpackLog(event, "Bisected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ColosseumChallengeCanceledIterator is returned from FilterChallengeCanceled and is used to iterate over the raw logs and unpacked data for ChallengeCanceled events raised by the Colosseum contract.
type ColosseumChallengeCanceledIterator struct {
	Event *ColosseumChallengeCanceled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumChallengeCanceledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumChallengeCanceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumChallengeCanceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumChallengeCanceledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumChallengeCanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumChallengeCanceled represents a ChallengeCanceled event raised by the Colosseum contract.
type ColosseumChallengeCanceled struct {
	OutputIndex *big.Int
	Challenger  common.Address
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterChallengeCanceled is a free log retrieval operation binding the contract event 0x6f3468a095154788e69ed719ee418416c1e338ac2348ccb3531bb97a0ed6ed9d.
//
// Solidity: event ChallengeCanceled(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) FilterChallengeCanceled(opts *bind.FilterOpts, outputIndex []*big.Int, challenger []common.Address) (*ColosseumChallengeCanceledIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "ChallengeCanceled", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return &ColosseumChallengeCanceledIterator{contract: _Colosseum.contract, event: "ChallengeCanceled", logs: logs, sub: sub}, nil
}

// WatchChallengeCanceled is a free log subscription operation binding the contract event 0x6f3468a095154788e69ed719ee418416c1e338ac2348ccb3531bb97a0ed6ed9d.
//
// Solidity: event ChallengeCanceled(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) WatchChallengeCanceled(opts *bind.WatchOpts, sink chan<- *ColosseumChallengeCanceled, outputIndex []*big.Int, challenger []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "ChallengeCanceled", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumChallengeCanceled)
				if err := _Colosseum.contract.UnpackLog(event, "ChallengeCanceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeCanceled is a log parse operation binding the contract event 0x6f3468a095154788e69ed719ee418416c1e338ac2348ccb3531bb97a0ed6ed9d.
//
// Solidity: event ChallengeCanceled(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) ParseChallengeCanceled(log types.Log) (*ColosseumChallengeCanceled, error) {
	event := new(ColosseumChallengeCanceled)
	if err := _Colosseum.contract.UnpackLog(event, "ChallengeCanceled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ColosseumChallengeCreatedIterator is returned from FilterChallengeCreated and is used to iterate over the raw logs and unpacked data for ChallengeCreated events raised by the Colosseum contract.
type ColosseumChallengeCreatedIterator struct {
	Event *ColosseumChallengeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumChallengeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumChallengeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumChallengeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumChallengeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumChallengeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumChallengeCreated represents a ChallengeCreated event raised by the Colosseum contract.
type ColosseumChallengeCreated struct {
	OutputIndex *big.Int
	Asserter    common.Address
	Challenger  common.Address
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterChallengeCreated is a free log retrieval operation binding the contract event 0xd2f7931a802085b3d0234d4c320ce7ee0041da96678ce2bf5c93e8d3d7e65f52.
//
// Solidity: event ChallengeCreated(uint256 indexed outputIndex, address indexed asserter, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) FilterChallengeCreated(opts *bind.FilterOpts, outputIndex []*big.Int, asserter []common.Address, challenger []common.Address) (*ColosseumChallengeCreatedIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var asserterRule []interface{}
	for _, asserterItem := range asserter {
		asserterRule = append(asserterRule, asserterItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "ChallengeCreated", outputIndexRule, asserterRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return &ColosseumChallengeCreatedIterator{contract: _Colosseum.contract, event: "ChallengeCreated", logs: logs, sub: sub}, nil
}

// WatchChallengeCreated is a free log subscription operation binding the contract event 0xd2f7931a802085b3d0234d4c320ce7ee0041da96678ce2bf5c93e8d3d7e65f52.
//
// Solidity: event ChallengeCreated(uint256 indexed outputIndex, address indexed asserter, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) WatchChallengeCreated(opts *bind.WatchOpts, sink chan<- *ColosseumChallengeCreated, outputIndex []*big.Int, asserter []common.Address, challenger []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var asserterRule []interface{}
	for _, asserterItem := range asserter {
		asserterRule = append(asserterRule, asserterItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "ChallengeCreated", outputIndexRule, asserterRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumChallengeCreated)
				if err := _Colosseum.contract.UnpackLog(event, "ChallengeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeCreated is a log parse operation binding the contract event 0xd2f7931a802085b3d0234d4c320ce7ee0041da96678ce2bf5c93e8d3d7e65f52.
//
// Solidity: event ChallengeCreated(uint256 indexed outputIndex, address indexed asserter, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) ParseChallengeCreated(log types.Log) (*ColosseumChallengeCreated, error) {
	event := new(ColosseumChallengeCreated)
	if err := _Colosseum.contract.UnpackLog(event, "ChallengeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ColosseumChallengeDismissedIterator is returned from FilterChallengeDismissed and is used to iterate over the raw logs and unpacked data for ChallengeDismissed events raised by the Colosseum contract.
type ColosseumChallengeDismissedIterator struct {
	Event *ColosseumChallengeDismissed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumChallengeDismissedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumChallengeDismissed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumChallengeDismissed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumChallengeDismissedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumChallengeDismissedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumChallengeDismissed represents a ChallengeDismissed event raised by the Colosseum contract.
type ColosseumChallengeDismissed struct {
	OutputIndex *big.Int
	Challenger  common.Address
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterChallengeDismissed is a free log retrieval operation binding the contract event 0xdca9fa9b51a5ba03938c6a0cd5489011630370fc481ef2b0cb771ad904a73053.
//
// Solidity: event ChallengeDismissed(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) FilterChallengeDismissed(opts *bind.FilterOpts, outputIndex []*big.Int, challenger []common.Address) (*ColosseumChallengeDismissedIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "ChallengeDismissed", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return &ColosseumChallengeDismissedIterator{contract: _Colosseum.contract, event: "ChallengeDismissed", logs: logs, sub: sub}, nil
}

// WatchChallengeDismissed is a free log subscription operation binding the contract event 0xdca9fa9b51a5ba03938c6a0cd5489011630370fc481ef2b0cb771ad904a73053.
//
// Solidity: event ChallengeDismissed(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) WatchChallengeDismissed(opts *bind.WatchOpts, sink chan<- *ColosseumChallengeDismissed, outputIndex []*big.Int, challenger []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "ChallengeDismissed", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumChallengeDismissed)
				if err := _Colosseum.contract.UnpackLog(event, "ChallengeDismissed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeDismissed is a log parse operation binding the contract event 0xdca9fa9b51a5ba03938c6a0cd5489011630370fc481ef2b0cb771ad904a73053.
//
// Solidity: event ChallengeDismissed(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) ParseChallengeDismissed(log types.Log) (*ColosseumChallengeDismissed, error) {
	event := new(ColosseumChallengeDismissed)
	if err := _Colosseum.contract.UnpackLog(event, "ChallengeDismissed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ColosseumChallengerTimedOutIterator is returned from FilterChallengerTimedOut and is used to iterate over the raw logs and unpacked data for ChallengerTimedOut events raised by the Colosseum contract.
type ColosseumChallengerTimedOutIterator struct {
	Event *ColosseumChallengerTimedOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumChallengerTimedOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumChallengerTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumChallengerTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumChallengerTimedOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumChallengerTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumChallengerTimedOut represents a ChallengerTimedOut event raised by the Colosseum contract.
type ColosseumChallengerTimedOut struct {
	OutputIndex *big.Int
	Challenger  common.Address
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterChallengerTimedOut is a free log retrieval operation binding the contract event 0xbf4506ef5d06ecb6168f37bc9e69dd473089eb9e3f2675322d01b4d466cff051.
//
// Solidity: event ChallengerTimedOut(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) FilterChallengerTimedOut(opts *bind.FilterOpts, outputIndex []*big.Int, challenger []common.Address) (*ColosseumChallengerTimedOutIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "ChallengerTimedOut", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return &ColosseumChallengerTimedOutIterator{contract: _Colosseum.contract, event: "ChallengerTimedOut", logs: logs, sub: sub}, nil
}

// WatchChallengerTimedOut is a free log subscription operation binding the contract event 0xbf4506ef5d06ecb6168f37bc9e69dd473089eb9e3f2675322d01b4d466cff051.
//
// Solidity: event ChallengerTimedOut(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) WatchChallengerTimedOut(opts *bind.WatchOpts, sink chan<- *ColosseumChallengerTimedOut, outputIndex []*big.Int, challenger []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "ChallengerTimedOut", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumChallengerTimedOut)
				if err := _Colosseum.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengerTimedOut is a log parse operation binding the contract event 0xbf4506ef5d06ecb6168f37bc9e69dd473089eb9e3f2675322d01b4d466cff051.
//
// Solidity: event ChallengerTimedOut(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) ParseChallengerTimedOut(log types.Log) (*ColosseumChallengerTimedOut, error) {
	event := new(ColosseumChallengerTimedOut)
	if err := _Colosseum.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ColosseumInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Colosseum contract.
type ColosseumInitializedIterator struct {
	Event *ColosseumInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumInitialized represents a Initialized event raised by the Colosseum contract.
type ColosseumInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Colosseum *ColosseumFilterer) FilterInitialized(opts *bind.FilterOpts) (*ColosseumInitializedIterator, error) {

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ColosseumInitializedIterator{contract: _Colosseum.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Colosseum *ColosseumFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ColosseumInitialized) (event.Subscription, error) {

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumInitialized)
				if err := _Colosseum.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Colosseum *ColosseumFilterer) ParseInitialized(log types.Log) (*ColosseumInitialized, error) {
	event := new(ColosseumInitialized)
	if err := _Colosseum.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ColosseumOutputForceDeletedIterator is returned from FilterOutputForceDeleted and is used to iterate over the raw logs and unpacked data for OutputForceDeleted events raised by the Colosseum contract.
type ColosseumOutputForceDeletedIterator struct {
	Event *ColosseumOutputForceDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumOutputForceDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumOutputForceDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumOutputForceDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumOutputForceDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumOutputForceDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumOutputForceDeleted represents a OutputForceDeleted event raised by the Colosseum contract.
type ColosseumOutputForceDeleted struct {
	OutputIndex *big.Int
	Asseter     common.Address
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterOutputForceDeleted is a free log retrieval operation binding the contract event 0xa620f04b65b1d538481626bf41dc5ee321b5c48e0cc1a7daae213cf7c254b54e.
//
// Solidity: event OutputForceDeleted(uint256 indexed outputIndex, address indexed asseter, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) FilterOutputForceDeleted(opts *bind.FilterOpts, outputIndex []*big.Int, asseter []common.Address) (*ColosseumOutputForceDeletedIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var asseterRule []interface{}
	for _, asseterItem := range asseter {
		asseterRule = append(asseterRule, asseterItem)
	}

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "OutputForceDeleted", outputIndexRule, asseterRule)
	if err != nil {
		return nil, err
	}
	return &ColosseumOutputForceDeletedIterator{contract: _Colosseum.contract, event: "OutputForceDeleted", logs: logs, sub: sub}, nil
}

// WatchOutputForceDeleted is a free log subscription operation binding the contract event 0xa620f04b65b1d538481626bf41dc5ee321b5c48e0cc1a7daae213cf7c254b54e.
//
// Solidity: event OutputForceDeleted(uint256 indexed outputIndex, address indexed asseter, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) WatchOutputForceDeleted(opts *bind.WatchOpts, sink chan<- *ColosseumOutputForceDeleted, outputIndex []*big.Int, asseter []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var asseterRule []interface{}
	for _, asseterItem := range asseter {
		asseterRule = append(asseterRule, asseterItem)
	}

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "OutputForceDeleted", outputIndexRule, asseterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumOutputForceDeleted)
				if err := _Colosseum.contract.UnpackLog(event, "OutputForceDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOutputForceDeleted is a log parse operation binding the contract event 0xa620f04b65b1d538481626bf41dc5ee321b5c48e0cc1a7daae213cf7c254b54e.
//
// Solidity: event OutputForceDeleted(uint256 indexed outputIndex, address indexed asseter, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) ParseOutputForceDeleted(log types.Log) (*ColosseumOutputForceDeleted, error) {
	event := new(ColosseumOutputForceDeleted)
	if err := _Colosseum.contract.UnpackLog(event, "OutputForceDeleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ColosseumProvenIterator is returned from FilterProven and is used to iterate over the raw logs and unpacked data for Proven events raised by the Colosseum contract.
type ColosseumProvenIterator struct {
	Event *ColosseumProven // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumProvenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumProven)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumProven)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumProvenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumProvenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumProven represents a Proven event raised by the Colosseum contract.
type ColosseumProven struct {
	OutputIndex *big.Int
	Challenger  common.Address
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterProven is a free log retrieval operation binding the contract event 0x0431864ed2609170587bbc7c198abd8caee4c55943dfb16fd42ec6f59c91c5f7.
//
// Solidity: event Proven(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) FilterProven(opts *bind.FilterOpts, outputIndex []*big.Int, challenger []common.Address) (*ColosseumProvenIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "Proven", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return &ColosseumProvenIterator{contract: _Colosseum.contract, event: "Proven", logs: logs, sub: sub}, nil
}

// WatchProven is a free log subscription operation binding the contract event 0x0431864ed2609170587bbc7c198abd8caee4c55943dfb16fd42ec6f59c91c5f7.
//
// Solidity: event Proven(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) WatchProven(opts *bind.WatchOpts, sink chan<- *ColosseumProven, outputIndex []*big.Int, challenger []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "Proven", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumProven)
				if err := _Colosseum.contract.UnpackLog(event, "Proven", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProven is a log parse operation binding the contract event 0x0431864ed2609170587bbc7c198abd8caee4c55943dfb16fd42ec6f59c91c5f7.
//
// Solidity: event Proven(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) ParseProven(log types.Log) (*ColosseumProven, error) {
	event := new(ColosseumProven)
	if err := _Colosseum.contract.UnpackLog(event, "Proven", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ColosseumReadyToProveIterator is returned from FilterReadyToProve and is used to iterate over the raw logs and unpacked data for ReadyToProve events raised by the Colosseum contract.
type ColosseumReadyToProveIterator struct {
	Event *ColosseumReadyToProve // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumReadyToProveIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumReadyToProve)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumReadyToProve)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumReadyToProveIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumReadyToProveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumReadyToProve represents a ReadyToProve event raised by the Colosseum contract.
type ColosseumReadyToProve struct {
	OutputIndex *big.Int
	Challenger  common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterReadyToProve is a free log retrieval operation binding the contract event 0x5c4528cbb38a169d24837617d3fd3d5c70a47769a4e9af6f384720b359b716c8.
//
// Solidity: event ReadyToProve(uint256 indexed outputIndex, address indexed challenger)
func (_Colosseum *ColosseumFilterer) FilterReadyToProve(opts *bind.FilterOpts, outputIndex []*big.Int, challenger []common.Address) (*ColosseumReadyToProveIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "ReadyToProve", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return &ColosseumReadyToProveIterator{contract: _Colosseum.contract, event: "ReadyToProve", logs: logs, sub: sub}, nil
}

// WatchReadyToProve is a free log subscription operation binding the contract event 0x5c4528cbb38a169d24837617d3fd3d5c70a47769a4e9af6f384720b359b716c8.
//
// Solidity: event ReadyToProve(uint256 indexed outputIndex, address indexed challenger)
func (_Colosseum *ColosseumFilterer) WatchReadyToProve(opts *bind.WatchOpts, sink chan<- *ColosseumReadyToProve, outputIndex []*big.Int, challenger []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "ReadyToProve", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumReadyToProve)
				if err := _Colosseum.contract.UnpackLog(event, "ReadyToProve", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReadyToProve is a log parse operation binding the contract event 0x5c4528cbb38a169d24837617d3fd3d5c70a47769a4e9af6f384720b359b716c8.
//
// Solidity: event ReadyToProve(uint256 indexed outputIndex, address indexed challenger)
func (_Colosseum *ColosseumFilterer) ParseReadyToProve(log types.Log) (*ColosseumReadyToProve, error) {
	event := new(ColosseumReadyToProve)
	if err := _Colosseum.contract.UnpackLog(event, "ReadyToProve", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
