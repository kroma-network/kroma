// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ColosseumMetaData contains all meta data concerning the Colosseum contract.
var ColosseumMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractL2OutputOracle\",\"name\":\"_l2Oracle\",\"type\":\"address\"},{\"internalType\":\"contractZKVerifier\",\"name\":\"_zkVerifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_submissionInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_creationPeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bisectionTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_provingTimeout\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_dummyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maxTxs\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_segmentsLengths\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_securityCouncil\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zkMerkleTrie\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"outputIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"turn\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Bisected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"outputIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ChallengeCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"outputIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ChallengeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"outputIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ChallengeDismissed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"outputIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ChallengerTimedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"outputIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Proven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"outputIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"name\":\"ReadyToProve\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BISECTION_TIMEOUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CREATION_PERIOD_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DUMMY_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L2_ORACLE\",\"outputs\":[{\"internalType\":\"contractL2OutputOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L2_ORACLE_SUBMISSION_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TXS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROVING_TIMEOUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECURITY_COUNCIL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZK_MERKLE_TRIE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZK_VERIFIER\",\"outputs\":[{\"internalType\":\"contractZKVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pos\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_segments\",\"type\":\"bytes32[]\"}],\"name\":\"bisect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputIndex\",\"type\":\"uint256\"}],\"name\":\"cancelChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"}],\"name\":\"challengerTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"challenges\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"turn\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"timeoutAt\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"segSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"segStart\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_l1BlockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_l1BlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_segments\",\"type\":\"bytes32[]\"}],\"name\":\"createChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asserter\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_outputRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_publicInputHash\",\"type\":\"bytes32\"}],\"name\":\"dismissChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputIndex\",\"type\":\"uint256\"}],\"name\":\"forceDeleteOutput\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"}],\"name\":\"getChallenge\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"turn\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"timeoutAt\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"segments\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"segSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"segStart\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.Challenge\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_turn\",\"type\":\"uint8\"}],\"name\":\"getSegmentsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enumColosseum.ChallengeStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_segmentsLengths\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"}],\"name\":\"isAbleToBisect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputIndex\",\"type\":\"uint256\"}],\"name\":\"isInCreationPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pos\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"version\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"messagePasserStorageRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextBlockHash\",\"type\":\"bytes32\"}],\"internalType\":\"structTypes.OutputRootProof\",\"name\":\"srcOutputRootProof\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"version\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"messagePasserStorageRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextBlockHash\",\"type\":\"bytes32\"}],\"internalType\":\"structTypes.OutputRootProof\",\"name\":\"dstOutputRootProof\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parentHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"number\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"baseFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"withdrawalsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"txHashes\",\"type\":\"bytes32[]\"}],\"internalType\":\"structTypes.PublicInput\",\"name\":\"publicInput\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"uncleHash\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"coinbase\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"receiptsRoot\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"logsBloom\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"difficulty\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"gasUsed\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"mixHash\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"}],\"internalType\":\"structTypes.BlockHeaderRLP\",\"name\":\"rlps\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"l2ToL1MessagePasserBalance\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"l2ToL1MessagePasserCodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"merkleProof\",\"type\":\"bytes[]\"}],\"internalType\":\"structTypes.PublicInputProof\",\"name\":\"_proof\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"_zkproof\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_pair\",\"type\":\"uint256[]\"}],\"name\":\"proveFault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"verifiedPublicInputs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6101c06040523480156200001257600080fd5b5060405162005ed638038062005ed6833981016040819052620000359162000427565b6001600160a01b03808c166080528a811660a05260c089905260e08890526101008790526101208a90526101408690526101608590528281166101805281166101a052620000838362000094565b505050505050505050505062000580565b600054610100900460ff1615808015620000b55750600054600160ff909116105b80620000e55750620000d230620001c860201b62002a001760201c565b158015620000e5575060005460ff166001145b6200014e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801562000172576000805461ff0019166101001790555b6200017d82620001d7565b8015620001c4576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6001600160a01b03163b151590565b60028151620001e79190620004f5565b156200025c5760405162461bcd60e51b815260206004820152603a60248201527f436f6c6f737365756d3a206c656e677468206f66207365676d656e7473206c6560448201527f6e677468732063616e6e6f74206265206f6464206e756d626572000000000000606482015260840162000145565b600160005b8251811015620002e15782818151811062000280576200028062000518565b602002602001015160016000838152602001908152602001600020819055506001838281518110620002b657620002b662000518565b6020026020010151620002ca919062000544565b620002d690836200055e565b915060010162000261565b50610120518114620001c45760405162461bcd60e51b815260206004820152602360248201527f436f6c6f737365756d3a20696e76616c6964207365676d656e7473206c656e6760448201526274687360e81b606482015260840162000145565b6001600160a01b03811681146200035857600080fd5b50565b8051620003688162000342565b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200039557600080fd5b815160206001600160401b0380831115620003b457620003b46200036d565b8260051b604051601f19603f83011681018181108482111715620003dc57620003dc6200036d565b604052938452858101830193838101925087851115620003fb57600080fd5b83870191505b848210156200041c5781518352918301919083019062000401565b979650505050505050565b60008060008060008060008060008060006101608c8e0312156200044a57600080fd5b8b51620004578162000342565b60208d0151909b506200046a8162000342565b809a505060408c0151985060608c0151975060808c0151965060a08c0151955060c08c0151945060e08c015193506101008c015160018060401b03811115620004b257600080fd5b620004c08e828f0162000383565b935050620004d26101208d016200035b565b9150620004e36101408d016200035b565b90509295989b509295989b9093969950565b6000826200051357634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156200055957620005596200052e565b500390565b60008160001904831182151516156200057b576200057b6200052e565b500290565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516157d062000706600039600081816103d5015261380a0152600081816102f60152818161076f0152818161129e01528181611bb90152611ee601526000818161036501528181613928015261399601526000818161051d01526139620152600081816104cf015281816128dd015281816129160152612fe20152600081816104f601528181612a700152613bf701526000818161031d0152613c5e0152600081816104480152818161071b01526123f201526000818161046f0152610ff30152600081816101b7015281816106ab015281816108a701528181610a0b01528181610c5d0152818161112e01528181611432015281816114900152818161173e01528181611c7d01528181611dbb01528181611f0e015281816120d90152818161237a01528181612659015281816127a001528181612bf101528181612c9b01528181612d1201528181612dec015281816130b101526132f901526157d06000f3fe608060405234801561001057600080fd5b50600436106101ad5760003560e01c8063887c560f116100ee578063cfb4474d11610097578063e39a219c11610071578063e39a219c1461053f578063e58932b314610552578063e9371a2c14610572578063fc9d84df1461059257600080fd5b8063cfb4474d146104ca578063d2ee3075146104f1578063d5145ebc1461051857600080fd5b8063a41483e3116100c8578063a41483e314610491578063a6ade11f146104a4578063b8b1a27c146104b757600080fd5b8063887c560f146104305780638f3a6c88146104435780639ded39521461046a57600080fd5b8063461569b81161015b5780635865b607116101355780635865b607146103d057806362fc00db146103f75780636fe0e5591461040a57806379c2575a1461041d57600080fd5b8063461569b81461034d5780635375b8911461036057806354fd4d501461038757600080fd5b80632df27fa51161018c5780632df27fa51461023e57806336086417146102f15780634394c5841461031857600080fd5b80621c2ff6146101b25780631be4e27e146101f65780631db1b67214610229575b600080fd5b6101d97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61021961020436600461473e565b60036020526000908152604090205460ff1681565b60405190151581526020016101ed565b61023c61023736600461476c565b6105a5565b005b6102aa61024c36600461476c565b6002602090815260009283526040808420909152908252902080546001820154600383015460049093015460ff83169367ffffffffffffffff610100850416936001600160a01b036901000000000000000000909104811693169186565b6040805160ff909716875267ffffffffffffffff90951660208701526001600160a01b039384169486019490945291166060840152608083015260a082015260c0016101ed565b6101d97f000000000000000000000000000000000000000000000000000000000000000081565b61033f7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016101ed565b61021961035b36600461473e565b61066f565b61033f7f000000000000000000000000000000000000000000000000000000000000000081565b6103c36040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b6040516101ed91906147f4565b6101d97f000000000000000000000000000000000000000000000000000000000000000081565b61023c610405366004614807565b610764565b61023c61041836600461492b565b610ab2565b61023c61042b366004614a0d565b610c2c565b61021961043e36600461476c565b61159b565b61033f7f000000000000000000000000000000000000000000000000000000000000000081565b6101d97f000000000000000000000000000000000000000000000000000000000000000081565b61023c61049f36600461473e565b6115d0565b61023c6104b2366004614abe565b61170d565b61033f6104c5366004614b28565b611b31565b61033f7f000000000000000000000000000000000000000000000000000000000000000081565b61033f7f000000000000000000000000000000000000000000000000000000000000000081565b61033f7f000000000000000000000000000000000000000000000000000000000000000081565b61023c61054d36600461473e565b611bae565b61056561056036600461476c565b611f70565b6040516101ed9190614b4b565b61058561058036600461476c565b61207d565b6040516101ed9190614c2a565b61023c6105a0366004614c6b565b6120a8565b60008281526002602090815260408083206001600160a01b03851684529091528120906105d182612a0f565b905060038160058111156105e7576105e7614bfb565b1461065f5760405162461bcd60e51b815260206004820152603c60248201527f436f6c6f737365756d3a2063616e206f6e6c792062652063616c6c656420696660448201527f20746865206368616c6c656e67657220697320696e2074696d6f75740000000060648201526084015b60405180910390fd5b6106698484612aec565b50505050565b6040517fa25ae5570000000000000000000000000000000000000000000000000000000081526004810182905260009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a25ae55790602401608060405180830381865afa1580156106f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107169190614ccf565b9050427f000000000000000000000000000000000000000000000000000000000000000082604001516fffffffffffffffffffffffffffffffff1661075b9190614d76565b10159392505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108025760405162461bcd60e51b815260206004820152602d60248201527f436f6c6f737365756d3a2073656e646572206973206e6f74207468652073656360448201527f757269747920636f756e63696c000000000000000000000000000000000000006064820152608401610656565b816108755760405162461bcd60e51b815260206004820152602e60248201527f436f6c6f737365756d3a2063616e6e6f7420726f6c6c6261636b206f7574707560448201527f7420746f207a65726f20686173680000000000000000000000000000000000006064820152608401610656565b6040517fa25ae557000000000000000000000000000000000000000000000000000000008152600481018690526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a25ae55790602401608060405180830381865afa1580156108f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091a9190614ccf565b60200151146109915760405162461bcd60e51b815260206004820152603b60248201527f436f6c6f737365756d3a206f6e6c792063616e20726f6c6c6261636b2069662060448201527f746865206f757470757420686173206265656e2064656c6574656400000000006064820152608401610656565b6000818152600360205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055517fe664672300000000000000000000000000000000000000000000000000000000815260048101869052602481018390526001600160a01b0384811660448301527f0000000000000000000000000000000000000000000000000000000000000000169063e664672390606401600060405180830381600087803b158015610a4f57600080fd5b505af1158015610a63573d6000803e3d6000fd5b50505050836001600160a01b0316857fdca9fa9b51a5ba03938c6a0cd5489011630370fc481ef2b0cb771ad904a7305342604051610aa391815260200190565b60405180910390a35050505050565b600054610100900460ff1615808015610ad25750600054600160ff909116105b80610aec5750303b158015610aec575060005460ff166001145b610b5e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610656565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610bbc57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610bc582612ee5565b8015610c2857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6040517f33727c4d0000000000000000000000000000000000000000000000000000000081526004810188905287907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906333727c4d90602401602060405180830381865afa158015610cac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd09190614d8e565b15610d695760405162461bcd60e51b815260206004820152604b60248201527f436f6c6f737365756d3a2063616e6e6f742070726f6772657373206368616c6c60448201527f656e67652070726f636573732061626f757420616c72656164792066696e616c60648201527f697a6564206f7574707574000000000000000000000000000000000000000000608482015260a401610656565b6000888152600260209081526040808320338452909152812090610d8c82612a0f565b6001830154909150610da9908b906001600160a01b031683613075565b15610db5575050611591565b6005816005811115610dc957610dc9614bfb565b1480610de657506004816005811115610de457610de4614bfb565b145b610e585760405162461bcd60e51b815260206004820152603a60248201527f436f6c6f737365756d3a20696d706f737369626c6520746f2070726f7665207460448201527f6865206661756c7420696e2063757272656e74207374617475730000000000006064820152608401610656565b6000610e71610e6c368b90038b018b614db0565b613406565b90506000610e8a610e6c368c90038c0160a08d01614db0565b9050610e9d8b8584848e60a081016134db565b610ec68a60a08101610eb3610140830183614e20565b610ec16101608f018f614e5e565b613697565b610ef8610ed76101c08c018c614e92565b8c61018001358d6101a001358e60a001604001358f60a001602001356137b2565b6000610f1560208c0135610f106101408e018e614e20565b613922565b60008181526003602052604090205490915060ff1615610fc35760405162461bcd60e51b815260206004820152604c60248201527f436f6c6f737365756d3a207075626c696320696e70757420746861742068617360448201527f20616c7265616479206265656e2076616c6964617465642063616e6e6f74206260648201527f65207573656420616761696e0000000000000000000000000000000000000000608482015260a401610656565b6040517f4292dc3e0000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634292dc3e90611030908d908d908d908d908890600401614f49565b602060405180830381865afa15801561104d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110719190614d8e565b6110bd5760405162461bcd60e51b815260206004820152601860248201527f436f6c6f737365756d3a20696e76616c69642070726f6f6600000000000000006044820152606401610656565b60405142815233908e907f0431864ed2609170587bbc7c198abd8caee4c55943dfb16fd42ec6f59c91c5f79060200160405180910390a36040517fa25ae557000000000000000000000000000000000000000000000000000000008152600481018e90526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a25ae55790602401608060405180830381865afa158015611175573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111999190614ccf565b905060006362fc00db60e01b8f338960000160099054906101000a90046001600160a01b03168560200151876040516024016112039594939291909485526001600160a01b0393841660208601529190921660408401526060830191909152608082015260a00190565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009095169490941790935291840151606085015192517f080b91ee0000000000000000000000000000000000000000000000000000000081529193506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263080b91ee926112d59291908690600401614f83565b600060405180830381600087803b1580156112ef57600080fd5b505af1158015611303573d6000803e3d6000fd5b50505050505060016003600083815260200190815260200160002060006101000a81548160ff021916908315150217905550600260008e81526020019081526020016000206000336001600160a01b03166001600160a01b03168152602001908152602001600020600080820160006101000a81549060ff02191690556000820160016101000a81549067ffffffffffffffff02191690556000820160096101000a8154906001600160a01b0302191690556001820160006101000a8154906001600160a01b0302191690556002820160006113df91906146c0565b5060006003820181905560049182018190556040517fe66467230000000000000000000000000000000000000000000000000000000081529182018f905260248201523360448201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e664672390606401600060405180830381600087803b15801561147657600080fd5b505af115801561148a573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b98debbf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115109190614fbd565b6040517fdd215c5d000000000000000000000000000000000000000000000000000000008152600481018f90523360248201526001600160a01b03919091169063dd215c5d90604401600060405180830381600087803b15801561157357600080fd5b505af1158015611587573d6000803e3d6000fd5b5050505050505050505b5050505050505050565b60008281526002602090815260408083206001600160a01b038516845290915281206115c6816139d5565b9150505b92915050565b60008181526002602090815260408083203384529091528120906115f382612a0f565b9050600081600581111561160957611609614bfb565b0361167c5760405162461bcd60e51b815260206004820152602760248201527f436f6c6f737365756d3a20746865206368616c6c656e676520646f6573206e6f60448201527f74206578697374000000000000000000000000000000000000000000000000006064820152608401610656565b60018201546116969084906001600160a01b031683613075565b6117085760405162461bcd60e51b815260206004820152602860248201527f436f6c6f737365756d3a206368616c6c656e67652063616e6e6f74206265206360448201527f616e63656c6c65640000000000000000000000000000000000000000000000006064820152608401610656565b505050565b6040517f33727c4d0000000000000000000000000000000000000000000000000000000081526004810186905285907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906333727c4d90602401602060405180830381865afa15801561178d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b19190614d8e565b1561184a5760405162461bcd60e51b815260206004820152604b60248201527f436f6c6f737365756d3a2063616e6e6f742070726f6772657373206368616c6c60448201527f656e67652070726f636573732061626f757420616c72656164792066696e616c60648201527f697a6564206f7574707574000000000000000000000000000000000000000000608482015260a401610656565b60008681526002602090815260408083206001600160a01b038916845290915281209061187682612a0f565b60018301549091506118939089906001600160a01b031683613075565b1561189f575050611b29565b600060018260058111156118b5576118b5614bfb565b036118ce575060018201546001600160a01b0316611901565b60028260058111156118e2576118e2614bfb565b0361190157508154690100000000000000000090046001600160a01b03165b336001600160a01b038216146119595760405162461bcd60e51b815260206004820152601860248201527f436f6c6f737365756d3a206e6f7420796f7572207475726e00000000000000006044820152606401610656565b825460009061196c9060ff166001614fda565b90506119f781856002018a8154811061198757611987614fff565b9060005260206000200154866002018b60016119a39190614d76565b815481106119b3576119b3614fff565b90600052602060002001548a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506139e992505050565b6000611a0285613b8f565b90506000611a10828b61502e565b8660040154611a1f9190614d76565b9050611a62868a8a80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250869250879150613bbb9050565b85547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff8416178655611a9686613be5565b6040805160ff851681524260208201526001600160a01b038d16918e917fcadef6622777415b0589e491bdbf6baf11242f676f77055fd03bf1658c17a145910160405180910390a3611ae7866139d5565b611b22576040516001600160a01b038c16908d907f5c4528cbb38a169d24837617d3fd3d5c70a47769a4e9af6f384720b359b716c890600090a35b5050505050505b505050505050565b6000600160ff83161015611b875760405162461bcd60e51b815260206004820152601760248201527f436f6c6f737365756d3a20696e76616c6964207475726e0000000000000000006044820152606401610656565b60016000611b95828561506b565b60ff168152602001908152602001600020549050919050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611c4c5760405162461bcd60e51b815260206004820152602d60248201527f436f6c6f737365756d3a2073656e646572206973206e6f74207468652073656360448201527f757269747920636f756e63696c000000000000000000000000000000000000006064820152608401610656565b6040517f33727c4d0000000000000000000000000000000000000000000000000000000081526004810182905281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906333727c4d90602401602060405180830381865afa158015611ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf09190614d8e565b15611d895760405162461bcd60e51b815260206004820152604b60248201527f436f6c6f737365756d3a2063616e6e6f742070726f6772657373206368616c6c60448201527f656e67652070726f636573732061626f757420616c72656164792066696e616c60648201527f697a6564206f7574707574000000000000000000000000000000000000000000608482015260a401610656565b6040517fa25ae557000000000000000000000000000000000000000000000000000000008152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a25ae55790602401608060405180830381865afa158015611e0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2e9190614ccf565b6020810151909150611ea85760405162461bcd60e51b815260206004820152602e60248201527f436f6c6f737365756d3a20746865206f75747075742068617320616c7265616460448201527f79206265656e2064656c657465640000000000000000000000000000000000006064820152608401610656565b6040517fe664672300000000000000000000000000000000000000000000000000000000815260048101849052600060248201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660448301527f0000000000000000000000000000000000000000000000000000000000000000169063e6646723906064015b600060405180830381600087803b158015611f5357600080fd5b505af1158015611f67573d6000803e3d6000fd5b50505050505050565b6040805160e0810182526000808252602082018190529181018290526060808201839052608082015260a0810182905260c081019190915260008381526002602081815260408084206001600160a01b03808816865290835293819020815160e081018352815460ff8116825267ffffffffffffffff6101008204168286015269010000000000000000009004861681840152600182015490951660608601529283018054825181850281018501909352808352608086019383018282801561205857602002820191906000526020600020905b815481526020019060010190808311612044575b5050505050815260200160038201548152602001600482015481525050905092915050565b60008281526002602090815260408083206001600160a01b038516845290915281206115c681612a0f565b6040517f33727c4d0000000000000000000000000000000000000000000000000000000081526004810186905285907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906333727c4d90602401602060405180830381865afa158015612128573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214c9190614d8e565b156121e55760405162461bcd60e51b815260206004820152604b60248201527f436f6c6f737365756d3a2063616e6e6f742070726f6772657373206368616c6c60448201527f656e67652070726f636573732061626f757420616c72656164792066696e616c60648201527f697a6564206f7574707574000000000000000000000000000000000000000000608482015260a401610656565b6000861161225b5760405162461bcd60e51b815260206004820152603660248201527f436f6c6f737365756d3a206368616c6c656e676520666f722067656e6573697360448201527f206f7574707574206973206e6f7420616c6c6f776564000000000000000000006064820152608401610656565b600086815260026020908152604080832033845290915290208054600160ff9091161061234857600061228d82612a0f565b905060038160058111156122a3576122a3614bfb565b1461233c5760405162461bcd60e51b815260206004820152604660248201527f436f6c6f737365756d3a20746865206368616c6c656e676520666f722067697660448201527f656e206f757470757420696e64657820697320616c726561647920696e20707260648201527f6f67726573730000000000000000000000000000000000000000000000000000608482015260a401610656565b6123468833612aec565b505b6040517fa25ae557000000000000000000000000000000000000000000000000000000008152600481018890526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a25ae55790602401608060405180830381865afa1580156123c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ed9190614ccf565b9050427f000000000000000000000000000000000000000000000000000000000000000082604001516fffffffffffffffffffffffffffffffff166124329190614d76565b10156124a65760405162461bcd60e51b815260206004820152603e60248201527f436f6c6f737365756d3a2063616e6e6f74206372656174652061206368616c6c60448201527f656e676520616674657220746865206372656174696f6e20706572696f6400006064820152608401610656565b602081015161251d5760405162461bcd60e51b815260206004820152603660248201527f436f6c6f737365756d3a206368616c6c656e676520666f722064656c6574656460448201527f206f7574707574206973206e6f7420616c6c6f776564000000000000000000006064820152608401610656565b80516001600160a01b0316330361259c5760405162461bcd60e51b815260206004820152603860248201527f436f6c6f737365756d3a2074686520617373657274657220616e64206368616c60448201527f6c656e676572206d75737420626520646966666572656e7400000000000000006064820152608401610656565b86158015906125ab5750854015155b1561264d578686401461264d5760405162461bcd60e51b8152602060048201526044602482018190527f436f6c6f737365756d3a20626c6f636b206861736820646f6573206e6f74206d908201527f617463682074686520686173682061742074686520657870656374656420686560648201527f6967687400000000000000000000000000000000000000000000000000000000608482015260a401610656565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a25ae55761268960018c61508e565b6040518263ffffffff1660e01b81526004016126a791815260200190565b608060405180830381865afa1580156126c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e89190614ccf565b60208101519091506127565761275160018787600081811061270c5761270c614fff565b9050602002013584602001518989808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506139e992505050565b61279e565b61279e6001826020015184602001518989808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506139e992505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b98debbf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128209190614fbd565b6040517f5a544742000000000000000000000000000000000000000000000000000000008152600481018b90523360248201526001600160a01b039190911690635a54474290604401600060405180830381600087803b15801561288357600080fd5b505af1158015612897573d6000803e3d6000fd5b5050505061293a838787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505050606086015161291491507f0000000000000000000000000000000000000000000000000000000000000000906fffffffffffffffffffffffffffffffff1661508e565b7f0000000000000000000000000000000000000000000000000000000000000000613bbb565b825482516001600160a01b03166901000000000000000000027fffffff0000000000000000000000000000000000000000ffffffffffffffff009091161760019081178455830180547fffffffffffffffffffffffff000000000000000000000000000000000000000016331790556129b283613be5565b815160405142815233916001600160a01b0316908b907fd2f7931a802085b3d0234d4c320ce7ee0041da96678ce2bf5c93e8d3d7e65f529060200160405180910390a4505050505050505050565b6001600160a01b03163b151590565b8054600090600160ff9091161015612a2957506000919050565b8154600090612a3a9060ff16613c86565b8354909150610100900467ffffffffffffffff16421115612ac0578015612a645750600392915050565b8254612aa990612aa4907f000000000000000000000000000000000000000000000000000000000000000090610100900467ffffffffffffffff16614d76565b421190565b15612ab75750600392915050565b50600492915050565b612ac9836139d5565b612ad65750600592915050565b80612ae2576002612ae5565b60015b9392505050565b60008281526002602081815260408084206001600160a01b0386168552909152822080547fffffff00000000000000000000000000000000000000000000000000000000001681556001810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690559190612b6c908301826146c0565b600382016000905560048201600090555050806001600160a01b0316827fbf4506ef5d06ecb6168f37bc9e69dd473089eb9e3f2675322d01b4d466cff05142604051612bba91815260200190565b60405180910390a36040517f33727c4d000000000000000000000000000000000000000000000000000000008152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906333727c4d90602401602060405180830381865afa158015612c40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c649190614d8e565b15612dea576040517fa25ae557000000000000000000000000000000000000000000000000000000008152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a25ae55790602401608060405180830381865afa158015612cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d0e9190614ccf565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b98debbf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d929190614fbd565b81516040517f36b83469000000000000000000000000000000000000000000000000000000008152600481018690526001600160a01b03858116602483015291821660448201529116906336b8346990606401611f39565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b98debbf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e6c9190614fbd565b6040517fdd215c5d000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b038381166024830152919091169063dd215c5d90604401600060405180830381600087803b158015612ed157600080fd5b505af1158015611b29573d6000803e3d6000fd5b60028151612ef391906150d4565b15612f665760405162461bcd60e51b815260206004820152603a60248201527f436f6c6f737365756d3a206c656e677468206f66207365676d656e7473206c6560448201527f6e677468732063616e6e6f74206265206f6464206e756d6265720000000000006064820152608401610656565b600160005b8251811015612fdf57828181518110612f8657612f86614fff565b602002602001015160016000838152602001908152602001600020819055506001838281518110612fb957612fb9614fff565b6020026020010151612fcb919061508e565b612fd5908361502e565b9150600101612f6b565b507f00000000000000000000000000000000000000000000000000000000000000008114610c285760405162461bcd60e51b815260206004820152602360248201527f436f6c6f737365756d3a20696e76616c6964207365676d656e7473206c656e6760448201527f74687300000000000000000000000000000000000000000000000000000000006064820152608401610656565b6040517fa25ae5570000000000000000000000000000000000000000000000000000000081526004810184905260009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a25ae55790602401608060405180830381865afa1580156130f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061311c9190614ccf565b6020015190508015613132576000915050612ae5565b336001600160a01b038516146131b05760405162461bcd60e51b815260206004820152602560248201527f436f6c6f737365756d3a2073656e646572206973206e6f742061206368616c6c60448201527f656e6765720000000000000000000000000000000000000000000000000000006064820152608401610656565b60038360058111156131c4576131c4614bfb565b03613239576040805162461bcd60e51b81526020600482015260248101919091527f436f6c6f737365756d3a206368616c6c656e67652063616e6e6f74206265206360448201527f616e63656c6c6564206966206368616c6c656e6765722074696d6564206f75746064820152608401610656565b6000858152600260208181526040808420338552909152822080547fffffff00000000000000000000000000000000000000000000000000000000001681556001810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905591906132b0908301826146c0565b50600060038201819055600490910155604051428152339086907f6f3468a095154788e69ed719ee418416c1e338ac2348ccb3531bb97a0ed6ed9d9060200160405180910390a37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b98debbf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613355573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133799190614fbd565b6040517f36b8346900000000000000000000000000000000000000000000000000000000815260048101879052336024820181905260448201526001600160a01b0391909116906336b8346990606401600060405180830381600087803b1580156133e357600080fd5b505af11580156133f7573d6000803e3d6000fd5b50600198975050505050505050565b80516000906134685781516020808401516040808601516060808801516080808a0151855180890199909952888601969096529187019290925285015260a0808501929092528051808503909201825260c090930190925281519101206115ca565b60405162461bcd60e51b815260206004820152602a60248201527f48617368696e673a20756e6b6e6f776e206f757470757420726f6f742070726f60448201527f6f662076657273696f6e000000000000000000000000000000000000000000006064820152608401610656565b919050565b838560020187815481106134f1576134f1614fff565b90600052602060002001541461356f5760405162461bcd60e51b815260206004820152602d60248201527f436f6c6f737365756d3a2074686520736f75726365207365676d656e74206d7560448201527f7374206265206d617463686564000000000000000000000000000000000000006064820152608401610656565b613578856139d5565b61361a57826002860161358c886001614d76565b8154811061359c5761359c614fff565b90600052602060002001540361361a5760405162461bcd60e51b815260206004820152603660248201527f436f6c6f737365756d3a207468652064657374696e6174696f6e207365676d6560448201527f6e74206d757374206e6f74206265206d617463686564000000000000000000006064820152608401610656565b8060600135826080013514611b295760405162461bcd60e51b815260206004820152602960248201527f436f6c6f737365756d3a2074686520626c6f636b2068617368206d757374206260448201527f65206d61746368656400000000000000000000000000000000000000000000006064820152608401610656565b82602001358260e00135146137145760405162461bcd60e51b815260206004820152602960248201527f436f6c6f737365756d3a2074686520737461746520726f6f74206d757374206260448201527f65206d61746368656400000000000000000000000000000000000000000000006064820152608401610656565b600061373061372284615166565b61372b84615292565b613c9d565b9050808560800135146137ab5760405162461bcd60e51b815260206004820152603b60248201527f436f6c6f737365756d3a2074686520626c6f636b20686173682066726f6d207060448201527f75626c696320696e707574206d757374206265206d61746368656400000000006064820152608401610656565b5050505050565b60408051600060208201528082018690526060810185905260808082018590528251808303909101815260a08201928390527f12e64a72000000000000000000000000000000000000000000000000000000009092527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906312e64a729061386f907f42000000000000000000000000000000000000030000000000000000000000009085908c908c90899060a401615433565b602060405180830381865afa15801561388c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138b09190614d8e565b611f675760405162461bcd60e51b815260206004820152603660248201527f436f6c6f737365756d3a20696e76616c6964204c32546f4c314d65737361676560448201527f50617373657220696e636c7573696f6e2070726f6f66000000000000000000006064820152608401610656565b600060607f0000000000000000000000000000000000000000000000000000000000000000613955610120850185614e92565b905010156139c2576139bf7f000000000000000000000000000000000000000000000000000000000000000061398f610120860186614e92565b6139ba91507f000000000000000000000000000000000000000000000000000000000000000061508e565b613d41565b90505b6115c6846139cf85615166565b83613dcd565b600060016139e283613b8f565b1192915050565b8051806139f586611b31565b14613a685760405162461bcd60e51b815260206004820152602260248201527f436f6c6f737365756d3a20696e76616c6964207365676d656e7473206c656e6760448201527f74680000000000000000000000000000000000000000000000000000000000006064820152608401610656565b81600081518110613a7b57613a7b614fff565b60200260200101518414613af75760405162461bcd60e51b815260206004820152602c60248201527f436f6c6f737365756d3a20746865206669727374207365676d656e74206d757360448201527f74206265206d61746368656400000000000000000000000000000000000000006064820152608401610656565b81613b0360018361508e565b81518110613b1357613b13614fff565b602002602001015183036137ab5760405162461bcd60e51b815260206004820152602f60248201527f436f6c6f737365756d3a20746865206c617374207365676d656e74206d75737460448201527f206e6f74206265206d61746368656400000000000000000000000000000000006064820152608401610656565b805460009060ff166001613ba282611b31565b613bac919061508e565b8360030154612ae5919061550e565b8251613bd090600286019060208601906146de565b50600484019190915560039092019190915550565b613bee816139d5565b613c5957613c1c7f000000000000000000000000000000000000000000000000000000000000000042614d76565b815467ffffffffffffffff91909116610100027fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000ff90911617815550565b613c1c7f000000000000000000000000000000000000000000000000000000000000000042614d76565b50565b6000613c93600283615522565b60ff161592915050565b6040805160118082526102408201909252600091829190816020015b6060815260200190600190039081613cb9579050509050613cdb848483613e3f565b613d0a846101000151604051602001613cf691815260200190565b6040516020818303038152906040526140f2565b81601081518110613d1d57613d1d614fff565b6020026020010181905250613d3181614161565b8051906020012091505092915050565b606060008267ffffffffffffffff811115613d5e57613d5e614859565b604051908082528060200260200182016040528015613d87578160200160208202803683370190505b50905060005b83811015613dc55784828281518110613da857613da8614fff565b602090810291909101015280613dbd81615544565b915050613d8d565b509392505050565b6000838360e001516000801b85600001518660200151876060015188604001518960a001518a608001518b6101200151518c61012001518c604051602001613e209c9b9a999897969594939291906155af565b6040516020818303038152906040528051906020012090509392505050565b613e598360200151604051602001613cf691815260200190565b81600081518110613e6c57613e6c614fff565b6020026020010181905250816000015181600181518110613e8f57613e8f614fff565b6020026020010181905250816020015181600281518110613eb257613eb2614fff565b6020026020010181905250613ed78360e00151604051602001613cf691815260200190565b81600381518110613eea57613eea614fff565b6020026020010181905250613f0f8360c00151604051602001613cf691815260200190565b81600481518110613f2257613f22614fff565b6020026020010181905250816040015181600581518110613f4557613f45614fff565b6020026020010181905250816060015181600681518110613f6857613f68614fff565b6020026020010181905250816080015181600781518110613f8b57613f8b614fff565b6020026020010181905250613fad836060015167ffffffffffffffff166141a5565b81600881518110613fc057613fc0614fff565b6020026020010181905250613fe2836080015167ffffffffffffffff166141a5565b81600981518110613ff557613ff5614fff565b60200260200101819052508160a0015181600a8151811061401857614018614fff565b602002602001018190525061403a836040015167ffffffffffffffff166141a5565b81600b8151811061404d5761404d614fff565b60200260200101819052508160c0015181600c8151811061407057614070614fff565b60200260200101819052508160e0015181600d8151811061409357614093614fff565b602002602001018190525081610100015181600e815181106140b7576140b7614fff565b60200260200101819052506140cf8360a001516141a5565b81600f815181106140e2576140e2614fff565b6020026020010181905250505050565b60608082516001148015614120575060808360008151811061411657614116614fff565b016020015160f81c105b1561412c5750816115ca565b614138835160806141b8565b8360405160200161414a929190615668565b604051602081830303815290604052905092915050565b6060600061416e836143ae565b905061417c815160c06141b8565b8160405160200161418e929190615668565b604051602081830303815290604052915050919050565b60606115ca6141b3836144e6565b6140f2565b606080603884101561423757604080516001808252818301909252906020820181803683370190505090506141ed8385614fda565b60f81b8160008151811061420357614203614fff565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612ae5565b600060015b614246818761550e565b1561426c578161425581615544565b925061426590506101008261502e565b905061423c565b614277826001614d76565b67ffffffffffffffff81111561428f5761428f614859565b6040519080825280601f01601f1916602001820160405280156142b9576020820181803683370190505b5092506142c68583614fda565b6142d1906037614fda565b60f81b836000815181106142e7576142e7614fff565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600190505b8181116143a55761010061432f828461508e565b61433b906101006157b7565b614345908861550e565b61434f91906150d4565b60f81b83828151811061436457614364614fff565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061439d81615544565b91505061431b565b50509392505050565b606081516000036143cd57505060408051600081526020810190915290565b6000805b8351811015614414578381815181106143ec576143ec614fff565b602002602001015151826144009190614d76565b91508061440c81615544565b9150506143d1565b60008267ffffffffffffffff81111561442f5761442f614859565b6040519080825280601f01601f191660200182016040528015614459576020820181803683370190505b50600092509050602081015b85518310156144dd57600086848151811061448257614482614fff565b6020026020010151905060006020820190506144a083828451614645565b8785815181106144b2576144b2614fff565b602002602001015151836144c69190614d76565b9250505082806144d590615544565b935050614465565b50949350505050565b60606000826040516020016144fd91815260200190565b604051602081830303815290604052905060005b602081101561456c5781818151811061452c5761452c614fff565b01602001517fff000000000000000000000000000000000000000000000000000000000000001660000361456c578061456481615544565b915050614511565b600061457982602061508e565b67ffffffffffffffff81111561459157614591614859565b6040519080825280601f01601f1916602001820160405280156145bb576020820181803683370190505b50905060005b81518110156144dd5783836145d581615544565b9450815181106145e7576145e7614fff565b602001015160f81c60f81b82828151811061460457614604614fff565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061463d81615544565b9150506145c1565b8282825b602081106146815781518352614660602084614d76565b925061466d602083614d76565b915061467a60208261508e565b9050614649565b905182516020929092036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0180199091169116179052505050565b5080546000825590600052602060002090810190613c839190614729565b828054828255906000526020600020908101928215614719579160200282015b828111156147195782518255916020019190600101906146fe565b50614725929150614729565b5090565b5b80821115614725576000815560010161472a565b60006020828403121561475057600080fd5b5035919050565b6001600160a01b0381168114613c8357600080fd5b6000806040838503121561477f57600080fd5b82359150602083013561479181614757565b809150509250929050565b60005b838110156147b757818101518382015260200161479f565b838111156106695750506000910152565b600081518084526147e081602086016020860161479c565b601f01601f19169290920160200192915050565b602081526000612ae560208301846147c8565b600080600080600060a0868803121561481f57600080fd5b85359450602086013561483181614757565b9350604086013561484181614757565b94979396509394606081013594506080013592915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610140810167ffffffffffffffff811182821017156148ac576148ac614859565b60405290565b604051610120810167ffffffffffffffff811182821017156148ac576148ac614859565b604051601f8201601f1916810167ffffffffffffffff811182821017156148ff576148ff614859565b604052919050565b600067ffffffffffffffff82111561492157614921614859565b5060051b60200190565b6000602080838503121561493e57600080fd5b823567ffffffffffffffff81111561495557600080fd5b8301601f8101851361496657600080fd5b803561497961497482614907565b6148d6565b81815260059190911b8201830190838101908783111561499857600080fd5b928401925b828410156149b65783358252928401929084019061499d565b979650505050505050565b60008083601f8401126149d357600080fd5b50813567ffffffffffffffff8111156149eb57600080fd5b6020830191508360208260051b8501011115614a0657600080fd5b9250929050565b600080600080600080600060a0888a031215614a2857600080fd5b8735965060208801359550604088013567ffffffffffffffff80821115614a4e57600080fd5b908901906101e0828c031215614a6357600080fd5b90955060608901359080821115614a7957600080fd5b614a858b838c016149c1565b909650945060808a0135915080821115614a9e57600080fd5b50614aab8a828b016149c1565b989b979a50959850939692959293505050565b600080600080600060808688031215614ad657600080fd5b853594506020860135614ae881614757565b935060408601359250606086013567ffffffffffffffff811115614b0b57600080fd5b614b17888289016149c1565b969995985093965092949392505050565b600060208284031215614b3a57600080fd5b813560ff81168114612ae557600080fd5b60006020808352610100830160ff8551168285015267ffffffffffffffff8286015116604085015260408501516001600160a01b0380821660608701528060608801511660808701525050608085015160e060a0860152818151808452610120870191508483019350600092505b80831015614bd95783518252928401926001929092019190840190614bb9565b5060a087015160c087015260c087015160e08701528094505050505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6020810160068310614c65577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b600080600080600060808688031215614c8357600080fd5b853594506020860135935060408601359250606086013567ffffffffffffffff811115614b0b57600080fd5b80516fffffffffffffffffffffffffffffffff811681146134d657600080fd5b600060808284031215614ce157600080fd5b6040516080810181811067ffffffffffffffff82111715614d0457614d04614859565b6040528251614d1281614757565b815260208381015190820152614d2a60408401614caf565b6040820152614d3b60608401614caf565b60608201529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115614d8957614d89614d47565b500190565b600060208284031215614da057600080fd5b81518015158114612ae557600080fd5b600060a08284031215614dc257600080fd5b60405160a0810181811067ffffffffffffffff82111715614de557614de5614859565b806040525082358152602083013560208201526040830135604082015260608301356060820152608083013560808201528091505092915050565b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec1833603018112614e5457600080fd5b9190910192915050565b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee1833603018112614e5457600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112614ec757600080fd5b83018035915067ffffffffffffffff821115614ee257600080fd5b6020019150600581901b3603821315614a0657600080fd5b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115614f2c57600080fd5b8260051b8083602087013760009401602001938452509192915050565b606081526000614f5d606083018789614efa565b8281036020840152614f70818688614efa565b9150508260408301529695505050505050565b8381526fffffffffffffffffffffffffffffffff83166020820152606060408201526000614fb460608301846147c8565b95945050505050565b600060208284031215614fcf57600080fd5b8151612ae581614757565b600060ff821660ff84168060ff03821115614ff757614ff7614d47565b019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561506657615066614d47565b500290565b600060ff821660ff84168082101561508557615085614d47565b90039392505050565b6000828210156150a0576150a0614d47565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826150e3576150e36150a5565b500690565b803567ffffffffffffffff811681146134d657600080fd5b600082601f83011261511157600080fd5b8135602061512161497483614907565b82815260059290921b8401810191818101908684111561514057600080fd5b8286015b8481101561515b5780358352918301918301615144565b509695505050505050565b6000610140823603121561517957600080fd5b615181614888565b823581526020830135602082015261519b604084016150e8565b60408201526151ac606084016150e8565b60608201526151bd608084016150e8565b608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013581830152506101208084013567ffffffffffffffff81111561520857600080fd5b61521436828701615100565b918301919091525092915050565b600082601f83011261523357600080fd5b813567ffffffffffffffff81111561524d5761524d614859565b6152606020601f19601f840116016148d6565b81815284602083860101111561527557600080fd5b816020850160208301376000918101602001919091529392505050565b600061012082360312156152a557600080fd5b6152ad6148b2565b823567ffffffffffffffff808211156152c557600080fd5b6152d136838701615222565b835260208501359150808211156152e757600080fd5b6152f336838701615222565b6020840152604085013591508082111561530c57600080fd5b61531836838701615222565b6040840152606085013591508082111561533157600080fd5b61533d36838701615222565b6060840152608085013591508082111561535657600080fd5b61536236838701615222565b608084015260a085013591508082111561537b57600080fd5b61538736838701615222565b60a084015260c08501359150808211156153a057600080fd5b6153ac36838701615222565b60c084015260e08501359150808211156153c557600080fd5b6153d136838701615222565b60e0840152610100915081850135818111156153ec57600080fd5b6153f836828801615222565b8385015250505080915050919050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b8581526000602060808184015261544d60808401886147c8565b8381036040850152858152818101600587901b820183018860005b898110156154f557601f1985840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18c36030181126154ab57600080fd5b8b01868101903567ffffffffffffffff8111156154c757600080fd5b8036038213156154d657600080fd5b6154e1858284615408565b958801959450505090850190600101615468565b5050809450505050508260608301529695505050505050565b60008261551d5761551d6150a5565b500490565b600060ff831680615535576155356150a5565b8060ff84160691505092915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361557557615575614d47565b5060010190565b60008151602080840160005b838110156155a457815187529582019590820190600101615588565b509495945050505050565b8c81528b60208201528a604082015289606082015288608082015260007fffffffffffffffff000000000000000000000000000000000000000000000000808a60c01b1660a0840152808960c01b1660a88401528760b0840152808760c01b1660d0840152507fffff0000000000000000000000000000000000000000000000000000000000008560f01b1660d883015261565661565060da84018661557c565b8461557c565b9e9d5050505050505050505050505050565b6000835161567a81846020880161479c565b83519083019061568e81836020880161479c565b01949350505050565b600181815b808511156156f057817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156156d6576156d6614d47565b808516156156e357918102915b93841c939080029061569c565b509250929050565b600082615707575060016115ca565b81615714575060006115ca565b816001811461572a576002811461573457615750565b60019150506115ca565b60ff84111561574557615745614d47565b50506001821b6115ca565b5060208310610133831016604e8410600b8410161715615773575081810a6115ca565b61577d8383615697565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156157af576157af614d47565b029392505050565b6000612ae583836156f856fea164736f6c634300080f000a",
}

// ColosseumABI is the input ABI used to generate the binding from.
// Deprecated: Use ColosseumMetaData.ABI instead.
var ColosseumABI = ColosseumMetaData.ABI

// ColosseumBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ColosseumMetaData.Bin instead.
var ColosseumBin = ColosseumMetaData.Bin

// DeployColosseum deploys a new Ethereum contract, binding an instance of Colosseum to it.
func DeployColosseum(auth *bind.TransactOpts, backend bind.ContractBackend, _l2Oracle common.Address, _zkVerifier common.Address, _submissionInterval *big.Int, _creationPeriodSeconds *big.Int, _bisectionTimeout *big.Int, _provingTimeout *big.Int, _dummyHash [32]byte, _maxTxs *big.Int, _segmentsLengths []*big.Int, _securityCouncil common.Address, _zkMerkleTrie common.Address) (common.Address, *types.Transaction, *Colosseum, error) {
	parsed, err := ColosseumMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ColosseumBin), backend, _l2Oracle, _zkVerifier, _submissionInterval, _creationPeriodSeconds, _bisectionTimeout, _provingTimeout, _dummyHash, _maxTxs, _segmentsLengths, _securityCouncil, _zkMerkleTrie)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Colosseum{ColosseumCaller: ColosseumCaller{contract: contract}, ColosseumTransactor: ColosseumTransactor{contract: contract}, ColosseumFilterer: ColosseumFilterer{contract: contract}}, nil
}

// Colosseum is an auto generated Go binding around an Ethereum contract.
type Colosseum struct {
	ColosseumCaller     // Read-only binding to the contract
	ColosseumTransactor // Write-only binding to the contract
	ColosseumFilterer   // Log filterer for contract events
}

// ColosseumCaller is an auto generated read-only Go binding around an Ethereum contract.
type ColosseumCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ColosseumTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ColosseumTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ColosseumFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ColosseumFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ColosseumSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ColosseumSession struct {
	Contract     *Colosseum        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ColosseumCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ColosseumCallerSession struct {
	Contract *ColosseumCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ColosseumTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ColosseumTransactorSession struct {
	Contract     *ColosseumTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ColosseumRaw is an auto generated low-level Go binding around an Ethereum contract.
type ColosseumRaw struct {
	Contract *Colosseum // Generic contract binding to access the raw methods on
}

// ColosseumCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ColosseumCallerRaw struct {
	Contract *ColosseumCaller // Generic read-only contract binding to access the raw methods on
}

// ColosseumTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ColosseumTransactorRaw struct {
	Contract *ColosseumTransactor // Generic write-only contract binding to access the raw methods on
}

// NewColosseum creates a new instance of Colosseum, bound to a specific deployed contract.
func NewColosseum(address common.Address, backend bind.ContractBackend) (*Colosseum, error) {
	contract, err := bindColosseum(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Colosseum{ColosseumCaller: ColosseumCaller{contract: contract}, ColosseumTransactor: ColosseumTransactor{contract: contract}, ColosseumFilterer: ColosseumFilterer{contract: contract}}, nil
}

// NewColosseumCaller creates a new read-only instance of Colosseum, bound to a specific deployed contract.
func NewColosseumCaller(address common.Address, caller bind.ContractCaller) (*ColosseumCaller, error) {
	contract, err := bindColosseum(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ColosseumCaller{contract: contract}, nil
}

// NewColosseumTransactor creates a new write-only instance of Colosseum, bound to a specific deployed contract.
func NewColosseumTransactor(address common.Address, transactor bind.ContractTransactor) (*ColosseumTransactor, error) {
	contract, err := bindColosseum(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ColosseumTransactor{contract: contract}, nil
}

// NewColosseumFilterer creates a new log filterer instance of Colosseum, bound to a specific deployed contract.
func NewColosseumFilterer(address common.Address, filterer bind.ContractFilterer) (*ColosseumFilterer, error) {
	contract, err := bindColosseum(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ColosseumFilterer{contract: contract}, nil
}

// bindColosseum binds a generic wrapper to an already deployed contract.
func bindColosseum(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ColosseumMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Colosseum *ColosseumRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Colosseum.Contract.ColosseumCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Colosseum *ColosseumRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Colosseum.Contract.ColosseumTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Colosseum *ColosseumRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Colosseum.Contract.ColosseumTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Colosseum *ColosseumCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Colosseum.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Colosseum *ColosseumTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Colosseum.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Colosseum *ColosseumTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Colosseum.Contract.contract.Transact(opts, method, params...)
}

// BISECTIONTIMEOUT is a free data retrieval call binding the contract method 0x4394c584.
//
// Solidity: function BISECTION_TIMEOUT() view returns(uint256)
func (_Colosseum *ColosseumCaller) BISECTIONTIMEOUT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "BISECTION_TIMEOUT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BISECTIONTIMEOUT is a free data retrieval call binding the contract method 0x4394c584.
//
// Solidity: function BISECTION_TIMEOUT() view returns(uint256)
func (_Colosseum *ColosseumSession) BISECTIONTIMEOUT() (*big.Int, error) {
	return _Colosseum.Contract.BISECTIONTIMEOUT(&_Colosseum.CallOpts)
}

// BISECTIONTIMEOUT is a free data retrieval call binding the contract method 0x4394c584.
//
// Solidity: function BISECTION_TIMEOUT() view returns(uint256)
func (_Colosseum *ColosseumCallerSession) BISECTIONTIMEOUT() (*big.Int, error) {
	return _Colosseum.Contract.BISECTIONTIMEOUT(&_Colosseum.CallOpts)
}

// CREATIONPERIODSECONDS is a free data retrieval call binding the contract method 0x8f3a6c88.
//
// Solidity: function CREATION_PERIOD_SECONDS() view returns(uint256)
func (_Colosseum *ColosseumCaller) CREATIONPERIODSECONDS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "CREATION_PERIOD_SECONDS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CREATIONPERIODSECONDS is a free data retrieval call binding the contract method 0x8f3a6c88.
//
// Solidity: function CREATION_PERIOD_SECONDS() view returns(uint256)
func (_Colosseum *ColosseumSession) CREATIONPERIODSECONDS() (*big.Int, error) {
	return _Colosseum.Contract.CREATIONPERIODSECONDS(&_Colosseum.CallOpts)
}

// CREATIONPERIODSECONDS is a free data retrieval call binding the contract method 0x8f3a6c88.
//
// Solidity: function CREATION_PERIOD_SECONDS() view returns(uint256)
func (_Colosseum *ColosseumCallerSession) CREATIONPERIODSECONDS() (*big.Int, error) {
	return _Colosseum.Contract.CREATIONPERIODSECONDS(&_Colosseum.CallOpts)
}

// DUMMYHASH is a free data retrieval call binding the contract method 0xd5145ebc.
//
// Solidity: function DUMMY_HASH() view returns(bytes32)
func (_Colosseum *ColosseumCaller) DUMMYHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "DUMMY_HASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DUMMYHASH is a free data retrieval call binding the contract method 0xd5145ebc.
//
// Solidity: function DUMMY_HASH() view returns(bytes32)
func (_Colosseum *ColosseumSession) DUMMYHASH() ([32]byte, error) {
	return _Colosseum.Contract.DUMMYHASH(&_Colosseum.CallOpts)
}

// DUMMYHASH is a free data retrieval call binding the contract method 0xd5145ebc.
//
// Solidity: function DUMMY_HASH() view returns(bytes32)
func (_Colosseum *ColosseumCallerSession) DUMMYHASH() ([32]byte, error) {
	return _Colosseum.Contract.DUMMYHASH(&_Colosseum.CallOpts)
}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_Colosseum *ColosseumCaller) L2ORACLE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "L2_ORACLE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_Colosseum *ColosseumSession) L2ORACLE() (common.Address, error) {
	return _Colosseum.Contract.L2ORACLE(&_Colosseum.CallOpts)
}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_Colosseum *ColosseumCallerSession) L2ORACLE() (common.Address, error) {
	return _Colosseum.Contract.L2ORACLE(&_Colosseum.CallOpts)
}

// L2ORACLESUBMISSIONINTERVAL is a free data retrieval call binding the contract method 0xcfb4474d.
//
// Solidity: function L2_ORACLE_SUBMISSION_INTERVAL() view returns(uint256)
func (_Colosseum *ColosseumCaller) L2ORACLESUBMISSIONINTERVAL(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "L2_ORACLE_SUBMISSION_INTERVAL")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// L2ORACLESUBMISSIONINTERVAL is a free data retrieval call binding the contract method 0xcfb4474d.
//
// Solidity: function L2_ORACLE_SUBMISSION_INTERVAL() view returns(uint256)
func (_Colosseum *ColosseumSession) L2ORACLESUBMISSIONINTERVAL() (*big.Int, error) {
	return _Colosseum.Contract.L2ORACLESUBMISSIONINTERVAL(&_Colosseum.CallOpts)
}

// L2ORACLESUBMISSIONINTERVAL is a free data retrieval call binding the contract method 0xcfb4474d.
//
// Solidity: function L2_ORACLE_SUBMISSION_INTERVAL() view returns(uint256)
func (_Colosseum *ColosseumCallerSession) L2ORACLESUBMISSIONINTERVAL() (*big.Int, error) {
	return _Colosseum.Contract.L2ORACLESUBMISSIONINTERVAL(&_Colosseum.CallOpts)
}

// MAXTXS is a free data retrieval call binding the contract method 0x5375b891.
//
// Solidity: function MAX_TXS() view returns(uint256)
func (_Colosseum *ColosseumCaller) MAXTXS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "MAX_TXS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXTXS is a free data retrieval call binding the contract method 0x5375b891.
//
// Solidity: function MAX_TXS() view returns(uint256)
func (_Colosseum *ColosseumSession) MAXTXS() (*big.Int, error) {
	return _Colosseum.Contract.MAXTXS(&_Colosseum.CallOpts)
}

// MAXTXS is a free data retrieval call binding the contract method 0x5375b891.
//
// Solidity: function MAX_TXS() view returns(uint256)
func (_Colosseum *ColosseumCallerSession) MAXTXS() (*big.Int, error) {
	return _Colosseum.Contract.MAXTXS(&_Colosseum.CallOpts)
}

// PROVINGTIMEOUT is a free data retrieval call binding the contract method 0xd2ee3075.
//
// Solidity: function PROVING_TIMEOUT() view returns(uint256)
func (_Colosseum *ColosseumCaller) PROVINGTIMEOUT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "PROVING_TIMEOUT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PROVINGTIMEOUT is a free data retrieval call binding the contract method 0xd2ee3075.
//
// Solidity: function PROVING_TIMEOUT() view returns(uint256)
func (_Colosseum *ColosseumSession) PROVINGTIMEOUT() (*big.Int, error) {
	return _Colosseum.Contract.PROVINGTIMEOUT(&_Colosseum.CallOpts)
}

// PROVINGTIMEOUT is a free data retrieval call binding the contract method 0xd2ee3075.
//
// Solidity: function PROVING_TIMEOUT() view returns(uint256)
func (_Colosseum *ColosseumCallerSession) PROVINGTIMEOUT() (*big.Int, error) {
	return _Colosseum.Contract.PROVINGTIMEOUT(&_Colosseum.CallOpts)
}

// SECURITYCOUNCIL is a free data retrieval call binding the contract method 0x36086417.
//
// Solidity: function SECURITY_COUNCIL() view returns(address)
func (_Colosseum *ColosseumCaller) SECURITYCOUNCIL(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "SECURITY_COUNCIL")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SECURITYCOUNCIL is a free data retrieval call binding the contract method 0x36086417.
//
// Solidity: function SECURITY_COUNCIL() view returns(address)
func (_Colosseum *ColosseumSession) SECURITYCOUNCIL() (common.Address, error) {
	return _Colosseum.Contract.SECURITYCOUNCIL(&_Colosseum.CallOpts)
}

// SECURITYCOUNCIL is a free data retrieval call binding the contract method 0x36086417.
//
// Solidity: function SECURITY_COUNCIL() view returns(address)
func (_Colosseum *ColosseumCallerSession) SECURITYCOUNCIL() (common.Address, error) {
	return _Colosseum.Contract.SECURITYCOUNCIL(&_Colosseum.CallOpts)
}

// ZKMERKLETRIE is a free data retrieval call binding the contract method 0x5865b607.
//
// Solidity: function ZK_MERKLE_TRIE() view returns(address)
func (_Colosseum *ColosseumCaller) ZKMERKLETRIE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "ZK_MERKLE_TRIE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZKMERKLETRIE is a free data retrieval call binding the contract method 0x5865b607.
//
// Solidity: function ZK_MERKLE_TRIE() view returns(address)
func (_Colosseum *ColosseumSession) ZKMERKLETRIE() (common.Address, error) {
	return _Colosseum.Contract.ZKMERKLETRIE(&_Colosseum.CallOpts)
}

// ZKMERKLETRIE is a free data retrieval call binding the contract method 0x5865b607.
//
// Solidity: function ZK_MERKLE_TRIE() view returns(address)
func (_Colosseum *ColosseumCallerSession) ZKMERKLETRIE() (common.Address, error) {
	return _Colosseum.Contract.ZKMERKLETRIE(&_Colosseum.CallOpts)
}

// ZKVERIFIER is a free data retrieval call binding the contract method 0x9ded3952.
//
// Solidity: function ZK_VERIFIER() view returns(address)
func (_Colosseum *ColosseumCaller) ZKVERIFIER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "ZK_VERIFIER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZKVERIFIER is a free data retrieval call binding the contract method 0x9ded3952.
//
// Solidity: function ZK_VERIFIER() view returns(address)
func (_Colosseum *ColosseumSession) ZKVERIFIER() (common.Address, error) {
	return _Colosseum.Contract.ZKVERIFIER(&_Colosseum.CallOpts)
}

// ZKVERIFIER is a free data retrieval call binding the contract method 0x9ded3952.
//
// Solidity: function ZK_VERIFIER() view returns(address)
func (_Colosseum *ColosseumCallerSession) ZKVERIFIER() (common.Address, error) {
	return _Colosseum.Contract.ZKVERIFIER(&_Colosseum.CallOpts)
}

// Challenges is a free data retrieval call binding the contract method 0x2df27fa5.
//
// Solidity: function challenges(uint256 , address ) view returns(uint8 turn, uint64 timeoutAt, address asserter, address challenger, uint256 segSize, uint256 segStart)
func (_Colosseum *ColosseumCaller) Challenges(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (struct {
	Turn       uint8
	TimeoutAt  uint64
	Asserter   common.Address
	Challenger common.Address
	SegSize    *big.Int
	SegStart   *big.Int
}, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "challenges", arg0, arg1)

	outstruct := new(struct {
		Turn       uint8
		TimeoutAt  uint64
		Asserter   common.Address
		Challenger common.Address
		SegSize    *big.Int
		SegStart   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Turn = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.TimeoutAt = *abi.ConvertType(out[1], new(uint64)).(*uint64)
	outstruct.Asserter = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Challenger = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.SegSize = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.SegStart = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Challenges is a free data retrieval call binding the contract method 0x2df27fa5.
//
// Solidity: function challenges(uint256 , address ) view returns(uint8 turn, uint64 timeoutAt, address asserter, address challenger, uint256 segSize, uint256 segStart)
func (_Colosseum *ColosseumSession) Challenges(arg0 *big.Int, arg1 common.Address) (struct {
	Turn       uint8
	TimeoutAt  uint64
	Asserter   common.Address
	Challenger common.Address
	SegSize    *big.Int
	SegStart   *big.Int
}, error) {
	return _Colosseum.Contract.Challenges(&_Colosseum.CallOpts, arg0, arg1)
}

// Challenges is a free data retrieval call binding the contract method 0x2df27fa5.
//
// Solidity: function challenges(uint256 , address ) view returns(uint8 turn, uint64 timeoutAt, address asserter, address challenger, uint256 segSize, uint256 segStart)
func (_Colosseum *ColosseumCallerSession) Challenges(arg0 *big.Int, arg1 common.Address) (struct {
	Turn       uint8
	TimeoutAt  uint64
	Asserter   common.Address
	Challenger common.Address
	SegSize    *big.Int
	SegStart   *big.Int
}, error) {
	return _Colosseum.Contract.Challenges(&_Colosseum.CallOpts, arg0, arg1)
}

// GetChallenge is a free data retrieval call binding the contract method 0xe58932b3.
//
// Solidity: function getChallenge(uint256 _outputIndex, address _challenger) view returns((uint8,uint64,address,address,bytes32[],uint256,uint256))
func (_Colosseum *ColosseumCaller) GetChallenge(opts *bind.CallOpts, _outputIndex *big.Int, _challenger common.Address) (TypesChallenge, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "getChallenge", _outputIndex, _challenger)

	if err != nil {
		return *new(TypesChallenge), err
	}

	out0 := *abi.ConvertType(out[0], new(TypesChallenge)).(*TypesChallenge)

	return out0, err

}

// GetChallenge is a free data retrieval call binding the contract method 0xe58932b3.
//
// Solidity: function getChallenge(uint256 _outputIndex, address _challenger) view returns((uint8,uint64,address,address,bytes32[],uint256,uint256))
func (_Colosseum *ColosseumSession) GetChallenge(_outputIndex *big.Int, _challenger common.Address) (TypesChallenge, error) {
	return _Colosseum.Contract.GetChallenge(&_Colosseum.CallOpts, _outputIndex, _challenger)
}

// GetChallenge is a free data retrieval call binding the contract method 0xe58932b3.
//
// Solidity: function getChallenge(uint256 _outputIndex, address _challenger) view returns((uint8,uint64,address,address,bytes32[],uint256,uint256))
func (_Colosseum *ColosseumCallerSession) GetChallenge(_outputIndex *big.Int, _challenger common.Address) (TypesChallenge, error) {
	return _Colosseum.Contract.GetChallenge(&_Colosseum.CallOpts, _outputIndex, _challenger)
}

// GetSegmentsLength is a free data retrieval call binding the contract method 0xb8b1a27c.
//
// Solidity: function getSegmentsLength(uint8 _turn) view returns(uint256)
func (_Colosseum *ColosseumCaller) GetSegmentsLength(opts *bind.CallOpts, _turn uint8) (*big.Int, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "getSegmentsLength", _turn)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSegmentsLength is a free data retrieval call binding the contract method 0xb8b1a27c.
//
// Solidity: function getSegmentsLength(uint8 _turn) view returns(uint256)
func (_Colosseum *ColosseumSession) GetSegmentsLength(_turn uint8) (*big.Int, error) {
	return _Colosseum.Contract.GetSegmentsLength(&_Colosseum.CallOpts, _turn)
}

// GetSegmentsLength is a free data retrieval call binding the contract method 0xb8b1a27c.
//
// Solidity: function getSegmentsLength(uint8 _turn) view returns(uint256)
func (_Colosseum *ColosseumCallerSession) GetSegmentsLength(_turn uint8) (*big.Int, error) {
	return _Colosseum.Contract.GetSegmentsLength(&_Colosseum.CallOpts, _turn)
}

// GetStatus is a free data retrieval call binding the contract method 0xe9371a2c.
//
// Solidity: function getStatus(uint256 _outputIndex, address _challenger) view returns(uint8)
func (_Colosseum *ColosseumCaller) GetStatus(opts *bind.CallOpts, _outputIndex *big.Int, _challenger common.Address) (uint8, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "getStatus", _outputIndex, _challenger)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetStatus is a free data retrieval call binding the contract method 0xe9371a2c.
//
// Solidity: function getStatus(uint256 _outputIndex, address _challenger) view returns(uint8)
func (_Colosseum *ColosseumSession) GetStatus(_outputIndex *big.Int, _challenger common.Address) (uint8, error) {
	return _Colosseum.Contract.GetStatus(&_Colosseum.CallOpts, _outputIndex, _challenger)
}

// GetStatus is a free data retrieval call binding the contract method 0xe9371a2c.
//
// Solidity: function getStatus(uint256 _outputIndex, address _challenger) view returns(uint8)
func (_Colosseum *ColosseumCallerSession) GetStatus(_outputIndex *big.Int, _challenger common.Address) (uint8, error) {
	return _Colosseum.Contract.GetStatus(&_Colosseum.CallOpts, _outputIndex, _challenger)
}

// IsAbleToBisect is a free data retrieval call binding the contract method 0x887c560f.
//
// Solidity: function isAbleToBisect(uint256 _outputIndex, address _challenger) view returns(bool)
func (_Colosseum *ColosseumCaller) IsAbleToBisect(opts *bind.CallOpts, _outputIndex *big.Int, _challenger common.Address) (bool, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "isAbleToBisect", _outputIndex, _challenger)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAbleToBisect is a free data retrieval call binding the contract method 0x887c560f.
//
// Solidity: function isAbleToBisect(uint256 _outputIndex, address _challenger) view returns(bool)
func (_Colosseum *ColosseumSession) IsAbleToBisect(_outputIndex *big.Int, _challenger common.Address) (bool, error) {
	return _Colosseum.Contract.IsAbleToBisect(&_Colosseum.CallOpts, _outputIndex, _challenger)
}

// IsAbleToBisect is a free data retrieval call binding the contract method 0x887c560f.
//
// Solidity: function isAbleToBisect(uint256 _outputIndex, address _challenger) view returns(bool)
func (_Colosseum *ColosseumCallerSession) IsAbleToBisect(_outputIndex *big.Int, _challenger common.Address) (bool, error) {
	return _Colosseum.Contract.IsAbleToBisect(&_Colosseum.CallOpts, _outputIndex, _challenger)
}

// IsInCreationPeriod is a free data retrieval call binding the contract method 0x461569b8.
//
// Solidity: function isInCreationPeriod(uint256 _outputIndex) view returns(bool)
func (_Colosseum *ColosseumCaller) IsInCreationPeriod(opts *bind.CallOpts, _outputIndex *big.Int) (bool, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "isInCreationPeriod", _outputIndex)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsInCreationPeriod is a free data retrieval call binding the contract method 0x461569b8.
//
// Solidity: function isInCreationPeriod(uint256 _outputIndex) view returns(bool)
func (_Colosseum *ColosseumSession) IsInCreationPeriod(_outputIndex *big.Int) (bool, error) {
	return _Colosseum.Contract.IsInCreationPeriod(&_Colosseum.CallOpts, _outputIndex)
}

// IsInCreationPeriod is a free data retrieval call binding the contract method 0x461569b8.
//
// Solidity: function isInCreationPeriod(uint256 _outputIndex) view returns(bool)
func (_Colosseum *ColosseumCallerSession) IsInCreationPeriod(_outputIndex *big.Int) (bool, error) {
	return _Colosseum.Contract.IsInCreationPeriod(&_Colosseum.CallOpts, _outputIndex)
}

// VerifiedPublicInputs is a free data retrieval call binding the contract method 0x1be4e27e.
//
// Solidity: function verifiedPublicInputs(bytes32 ) view returns(bool)
func (_Colosseum *ColosseumCaller) VerifiedPublicInputs(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "verifiedPublicInputs", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifiedPublicInputs is a free data retrieval call binding the contract method 0x1be4e27e.
//
// Solidity: function verifiedPublicInputs(bytes32 ) view returns(bool)
func (_Colosseum *ColosseumSession) VerifiedPublicInputs(arg0 [32]byte) (bool, error) {
	return _Colosseum.Contract.VerifiedPublicInputs(&_Colosseum.CallOpts, arg0)
}

// VerifiedPublicInputs is a free data retrieval call binding the contract method 0x1be4e27e.
//
// Solidity: function verifiedPublicInputs(bytes32 ) view returns(bool)
func (_Colosseum *ColosseumCallerSession) VerifiedPublicInputs(arg0 [32]byte) (bool, error) {
	return _Colosseum.Contract.VerifiedPublicInputs(&_Colosseum.CallOpts, arg0)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_Colosseum *ColosseumCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_Colosseum *ColosseumSession) Version() (string, error) {
	return _Colosseum.Contract.Version(&_Colosseum.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_Colosseum *ColosseumCallerSession) Version() (string, error) {
	return _Colosseum.Contract.Version(&_Colosseum.CallOpts)
}

// Bisect is a paid mutator transaction binding the contract method 0xa6ade11f.
//
// Solidity: function bisect(uint256 _outputIndex, address _challenger, uint256 _pos, bytes32[] _segments) returns()
func (_Colosseum *ColosseumTransactor) Bisect(opts *bind.TransactOpts, _outputIndex *big.Int, _challenger common.Address, _pos *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "bisect", _outputIndex, _challenger, _pos, _segments)
}

// Bisect is a paid mutator transaction binding the contract method 0xa6ade11f.
//
// Solidity: function bisect(uint256 _outputIndex, address _challenger, uint256 _pos, bytes32[] _segments) returns()
func (_Colosseum *ColosseumSession) Bisect(_outputIndex *big.Int, _challenger common.Address, _pos *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _Colosseum.Contract.Bisect(&_Colosseum.TransactOpts, _outputIndex, _challenger, _pos, _segments)
}

// Bisect is a paid mutator transaction binding the contract method 0xa6ade11f.
//
// Solidity: function bisect(uint256 _outputIndex, address _challenger, uint256 _pos, bytes32[] _segments) returns()
func (_Colosseum *ColosseumTransactorSession) Bisect(_outputIndex *big.Int, _challenger common.Address, _pos *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _Colosseum.Contract.Bisect(&_Colosseum.TransactOpts, _outputIndex, _challenger, _pos, _segments)
}

// CancelChallenge is a paid mutator transaction binding the contract method 0xa41483e3.
//
// Solidity: function cancelChallenge(uint256 _outputIndex) returns()
func (_Colosseum *ColosseumTransactor) CancelChallenge(opts *bind.TransactOpts, _outputIndex *big.Int) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "cancelChallenge", _outputIndex)
}

// CancelChallenge is a paid mutator transaction binding the contract method 0xa41483e3.
//
// Solidity: function cancelChallenge(uint256 _outputIndex) returns()
func (_Colosseum *ColosseumSession) CancelChallenge(_outputIndex *big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.CancelChallenge(&_Colosseum.TransactOpts, _outputIndex)
}

// CancelChallenge is a paid mutator transaction binding the contract method 0xa41483e3.
//
// Solidity: function cancelChallenge(uint256 _outputIndex) returns()
func (_Colosseum *ColosseumTransactorSession) CancelChallenge(_outputIndex *big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.CancelChallenge(&_Colosseum.TransactOpts, _outputIndex)
}

// ChallengerTimeout is a paid mutator transaction binding the contract method 0x1db1b672.
//
// Solidity: function challengerTimeout(uint256 _outputIndex, address _challenger) returns()
func (_Colosseum *ColosseumTransactor) ChallengerTimeout(opts *bind.TransactOpts, _outputIndex *big.Int, _challenger common.Address) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "challengerTimeout", _outputIndex, _challenger)
}

// ChallengerTimeout is a paid mutator transaction binding the contract method 0x1db1b672.
//
// Solidity: function challengerTimeout(uint256 _outputIndex, address _challenger) returns()
func (_Colosseum *ColosseumSession) ChallengerTimeout(_outputIndex *big.Int, _challenger common.Address) (*types.Transaction, error) {
	return _Colosseum.Contract.ChallengerTimeout(&_Colosseum.TransactOpts, _outputIndex, _challenger)
}

// ChallengerTimeout is a paid mutator transaction binding the contract method 0x1db1b672.
//
// Solidity: function challengerTimeout(uint256 _outputIndex, address _challenger) returns()
func (_Colosseum *ColosseumTransactorSession) ChallengerTimeout(_outputIndex *big.Int, _challenger common.Address) (*types.Transaction, error) {
	return _Colosseum.Contract.ChallengerTimeout(&_Colosseum.TransactOpts, _outputIndex, _challenger)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0xfc9d84df.
//
// Solidity: function createChallenge(uint256 _outputIndex, bytes32 _l1BlockHash, uint256 _l1BlockNumber, bytes32[] _segments) returns()
func (_Colosseum *ColosseumTransactor) CreateChallenge(opts *bind.TransactOpts, _outputIndex *big.Int, _l1BlockHash [32]byte, _l1BlockNumber *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "createChallenge", _outputIndex, _l1BlockHash, _l1BlockNumber, _segments)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0xfc9d84df.
//
// Solidity: function createChallenge(uint256 _outputIndex, bytes32 _l1BlockHash, uint256 _l1BlockNumber, bytes32[] _segments) returns()
func (_Colosseum *ColosseumSession) CreateChallenge(_outputIndex *big.Int, _l1BlockHash [32]byte, _l1BlockNumber *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _Colosseum.Contract.CreateChallenge(&_Colosseum.TransactOpts, _outputIndex, _l1BlockHash, _l1BlockNumber, _segments)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0xfc9d84df.
//
// Solidity: function createChallenge(uint256 _outputIndex, bytes32 _l1BlockHash, uint256 _l1BlockNumber, bytes32[] _segments) returns()
func (_Colosseum *ColosseumTransactorSession) CreateChallenge(_outputIndex *big.Int, _l1BlockHash [32]byte, _l1BlockNumber *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _Colosseum.Contract.CreateChallenge(&_Colosseum.TransactOpts, _outputIndex, _l1BlockHash, _l1BlockNumber, _segments)
}

// DismissChallenge is a paid mutator transaction binding the contract method 0x62fc00db.
//
// Solidity: function dismissChallenge(uint256 _outputIndex, address _challenger, address _asserter, bytes32 _outputRoot, bytes32 _publicInputHash) returns()
func (_Colosseum *ColosseumTransactor) DismissChallenge(opts *bind.TransactOpts, _outputIndex *big.Int, _challenger common.Address, _asserter common.Address, _outputRoot [32]byte, _publicInputHash [32]byte) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "dismissChallenge", _outputIndex, _challenger, _asserter, _outputRoot, _publicInputHash)
}

// DismissChallenge is a paid mutator transaction binding the contract method 0x62fc00db.
//
// Solidity: function dismissChallenge(uint256 _outputIndex, address _challenger, address _asserter, bytes32 _outputRoot, bytes32 _publicInputHash) returns()
func (_Colosseum *ColosseumSession) DismissChallenge(_outputIndex *big.Int, _challenger common.Address, _asserter common.Address, _outputRoot [32]byte, _publicInputHash [32]byte) (*types.Transaction, error) {
	return _Colosseum.Contract.DismissChallenge(&_Colosseum.TransactOpts, _outputIndex, _challenger, _asserter, _outputRoot, _publicInputHash)
}

// DismissChallenge is a paid mutator transaction binding the contract method 0x62fc00db.
//
// Solidity: function dismissChallenge(uint256 _outputIndex, address _challenger, address _asserter, bytes32 _outputRoot, bytes32 _publicInputHash) returns()
func (_Colosseum *ColosseumTransactorSession) DismissChallenge(_outputIndex *big.Int, _challenger common.Address, _asserter common.Address, _outputRoot [32]byte, _publicInputHash [32]byte) (*types.Transaction, error) {
	return _Colosseum.Contract.DismissChallenge(&_Colosseum.TransactOpts, _outputIndex, _challenger, _asserter, _outputRoot, _publicInputHash)
}

// ForceDeleteOutput is a paid mutator transaction binding the contract method 0xe39a219c.
//
// Solidity: function forceDeleteOutput(uint256 _outputIndex) returns()
func (_Colosseum *ColosseumTransactor) ForceDeleteOutput(opts *bind.TransactOpts, _outputIndex *big.Int) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "forceDeleteOutput", _outputIndex)
}

// ForceDeleteOutput is a paid mutator transaction binding the contract method 0xe39a219c.
//
// Solidity: function forceDeleteOutput(uint256 _outputIndex) returns()
func (_Colosseum *ColosseumSession) ForceDeleteOutput(_outputIndex *big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.ForceDeleteOutput(&_Colosseum.TransactOpts, _outputIndex)
}

// ForceDeleteOutput is a paid mutator transaction binding the contract method 0xe39a219c.
//
// Solidity: function forceDeleteOutput(uint256 _outputIndex) returns()
func (_Colosseum *ColosseumTransactorSession) ForceDeleteOutput(_outputIndex *big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.ForceDeleteOutput(&_Colosseum.TransactOpts, _outputIndex)
}

// Initialize is a paid mutator transaction binding the contract method 0x6fe0e559.
//
// Solidity: function initialize(uint256[] _segmentsLengths) returns()
func (_Colosseum *ColosseumTransactor) Initialize(opts *bind.TransactOpts, _segmentsLengths []*big.Int) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "initialize", _segmentsLengths)
}

// Initialize is a paid mutator transaction binding the contract method 0x6fe0e559.
//
// Solidity: function initialize(uint256[] _segmentsLengths) returns()
func (_Colosseum *ColosseumSession) Initialize(_segmentsLengths []*big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.Initialize(&_Colosseum.TransactOpts, _segmentsLengths)
}

// Initialize is a paid mutator transaction binding the contract method 0x6fe0e559.
//
// Solidity: function initialize(uint256[] _segmentsLengths) returns()
func (_Colosseum *ColosseumTransactorSession) Initialize(_segmentsLengths []*big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.Initialize(&_Colosseum.TransactOpts, _segmentsLengths)
}

// ProveFault is a paid mutator transaction binding the contract method 0x79c2575a.
//
// Solidity: function proveFault(uint256 _outputIndex, uint256 _pos, ((bytes32,bytes32,bytes32,bytes32,bytes32),(bytes32,bytes32,bytes32,bytes32,bytes32),(bytes32,bytes32,uint64,uint64,uint64,uint256,bytes32,bytes32,bytes32,bytes32[]),(bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes32,bytes32,bytes[]) _proof, uint256[] _zkproof, uint256[] _pair) returns()
func (_Colosseum *ColosseumTransactor) ProveFault(opts *bind.TransactOpts, _outputIndex *big.Int, _pos *big.Int, _proof TypesPublicInputProof, _zkproof []*big.Int, _pair []*big.Int) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "proveFault", _outputIndex, _pos, _proof, _zkproof, _pair)
}

// ProveFault is a paid mutator transaction binding the contract method 0x79c2575a.
//
// Solidity: function proveFault(uint256 _outputIndex, uint256 _pos, ((bytes32,bytes32,bytes32,bytes32,bytes32),(bytes32,bytes32,bytes32,bytes32,bytes32),(bytes32,bytes32,uint64,uint64,uint64,uint256,bytes32,bytes32,bytes32,bytes32[]),(bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes32,bytes32,bytes[]) _proof, uint256[] _zkproof, uint256[] _pair) returns()
func (_Colosseum *ColosseumSession) ProveFault(_outputIndex *big.Int, _pos *big.Int, _proof TypesPublicInputProof, _zkproof []*big.Int, _pair []*big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.ProveFault(&_Colosseum.TransactOpts, _outputIndex, _pos, _proof, _zkproof, _pair)
}

// ProveFault is a paid mutator transaction binding the contract method 0x79c2575a.
//
// Solidity: function proveFault(uint256 _outputIndex, uint256 _pos, ((bytes32,bytes32,bytes32,bytes32,bytes32),(bytes32,bytes32,bytes32,bytes32,bytes32),(bytes32,bytes32,uint64,uint64,uint64,uint256,bytes32,bytes32,bytes32,bytes32[]),(bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes32,bytes32,bytes[]) _proof, uint256[] _zkproof, uint256[] _pair) returns()
func (_Colosseum *ColosseumTransactorSession) ProveFault(_outputIndex *big.Int, _pos *big.Int, _proof TypesPublicInputProof, _zkproof []*big.Int, _pair []*big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.ProveFault(&_Colosseum.TransactOpts, _outputIndex, _pos, _proof, _zkproof, _pair)
}

// ColosseumBisectedIterator is returned from FilterBisected and is used to iterate over the raw logs and unpacked data for Bisected events raised by the Colosseum contract.
type ColosseumBisectedIterator struct {
	Event *ColosseumBisected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumBisectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumBisected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumBisected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumBisectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumBisectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumBisected represents a Bisected event raised by the Colosseum contract.
type ColosseumBisected struct {
	OutputIndex *big.Int
	Challenger  common.Address
	Turn        uint8
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBisected is a free log retrieval operation binding the contract event 0xcadef6622777415b0589e491bdbf6baf11242f676f77055fd03bf1658c17a145.
//
// Solidity: event Bisected(uint256 indexed outputIndex, address indexed challenger, uint8 turn, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) FilterBisected(opts *bind.FilterOpts, outputIndex []*big.Int, challenger []common.Address) (*ColosseumBisectedIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "Bisected", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return &ColosseumBisectedIterator{contract: _Colosseum.contract, event: "Bisected", logs: logs, sub: sub}, nil
}

// WatchBisected is a free log subscription operation binding the contract event 0xcadef6622777415b0589e491bdbf6baf11242f676f77055fd03bf1658c17a145.
//
// Solidity: event Bisected(uint256 indexed outputIndex, address indexed challenger, uint8 turn, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) WatchBisected(opts *bind.WatchOpts, sink chan<- *ColosseumBisected, outputIndex []*big.Int, challenger []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "Bisected", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumBisected)
				if err := _Colosseum.contract.UnpackLog(event, "Bisected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBisected is a log parse operation binding the contract event 0xcadef6622777415b0589e491bdbf6baf11242f676f77055fd03bf1658c17a145.
//
// Solidity: event Bisected(uint256 indexed outputIndex, address indexed challenger, uint8 turn, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) ParseBisected(log types.Log) (*ColosseumBisected, error) {
	event := new(ColosseumBisected)
	if err := _Colosseum.contract.UnpackLog(event, "Bisected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ColosseumChallengeCanceledIterator is returned from FilterChallengeCanceled and is used to iterate over the raw logs and unpacked data for ChallengeCanceled events raised by the Colosseum contract.
type ColosseumChallengeCanceledIterator struct {
	Event *ColosseumChallengeCanceled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumChallengeCanceledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumChallengeCanceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumChallengeCanceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumChallengeCanceledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumChallengeCanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumChallengeCanceled represents a ChallengeCanceled event raised by the Colosseum contract.
type ColosseumChallengeCanceled struct {
	OutputIndex *big.Int
	Challenger  common.Address
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterChallengeCanceled is a free log retrieval operation binding the contract event 0x6f3468a095154788e69ed719ee418416c1e338ac2348ccb3531bb97a0ed6ed9d.
//
// Solidity: event ChallengeCanceled(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) FilterChallengeCanceled(opts *bind.FilterOpts, outputIndex []*big.Int, challenger []common.Address) (*ColosseumChallengeCanceledIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "ChallengeCanceled", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return &ColosseumChallengeCanceledIterator{contract: _Colosseum.contract, event: "ChallengeCanceled", logs: logs, sub: sub}, nil
}

// WatchChallengeCanceled is a free log subscription operation binding the contract event 0x6f3468a095154788e69ed719ee418416c1e338ac2348ccb3531bb97a0ed6ed9d.
//
// Solidity: event ChallengeCanceled(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) WatchChallengeCanceled(opts *bind.WatchOpts, sink chan<- *ColosseumChallengeCanceled, outputIndex []*big.Int, challenger []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "ChallengeCanceled", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumChallengeCanceled)
				if err := _Colosseum.contract.UnpackLog(event, "ChallengeCanceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeCanceled is a log parse operation binding the contract event 0x6f3468a095154788e69ed719ee418416c1e338ac2348ccb3531bb97a0ed6ed9d.
//
// Solidity: event ChallengeCanceled(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) ParseChallengeCanceled(log types.Log) (*ColosseumChallengeCanceled, error) {
	event := new(ColosseumChallengeCanceled)
	if err := _Colosseum.contract.UnpackLog(event, "ChallengeCanceled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ColosseumChallengeCreatedIterator is returned from FilterChallengeCreated and is used to iterate over the raw logs and unpacked data for ChallengeCreated events raised by the Colosseum contract.
type ColosseumChallengeCreatedIterator struct {
	Event *ColosseumChallengeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumChallengeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumChallengeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumChallengeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumChallengeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumChallengeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumChallengeCreated represents a ChallengeCreated event raised by the Colosseum contract.
type ColosseumChallengeCreated struct {
	OutputIndex *big.Int
	Asserter    common.Address
	Challenger  common.Address
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterChallengeCreated is a free log retrieval operation binding the contract event 0xd2f7931a802085b3d0234d4c320ce7ee0041da96678ce2bf5c93e8d3d7e65f52.
//
// Solidity: event ChallengeCreated(uint256 indexed outputIndex, address indexed asserter, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) FilterChallengeCreated(opts *bind.FilterOpts, outputIndex []*big.Int, asserter []common.Address, challenger []common.Address) (*ColosseumChallengeCreatedIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var asserterRule []interface{}
	for _, asserterItem := range asserter {
		asserterRule = append(asserterRule, asserterItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "ChallengeCreated", outputIndexRule, asserterRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return &ColosseumChallengeCreatedIterator{contract: _Colosseum.contract, event: "ChallengeCreated", logs: logs, sub: sub}, nil
}

// WatchChallengeCreated is a free log subscription operation binding the contract event 0xd2f7931a802085b3d0234d4c320ce7ee0041da96678ce2bf5c93e8d3d7e65f52.
//
// Solidity: event ChallengeCreated(uint256 indexed outputIndex, address indexed asserter, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) WatchChallengeCreated(opts *bind.WatchOpts, sink chan<- *ColosseumChallengeCreated, outputIndex []*big.Int, asserter []common.Address, challenger []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var asserterRule []interface{}
	for _, asserterItem := range asserter {
		asserterRule = append(asserterRule, asserterItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "ChallengeCreated", outputIndexRule, asserterRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumChallengeCreated)
				if err := _Colosseum.contract.UnpackLog(event, "ChallengeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeCreated is a log parse operation binding the contract event 0xd2f7931a802085b3d0234d4c320ce7ee0041da96678ce2bf5c93e8d3d7e65f52.
//
// Solidity: event ChallengeCreated(uint256 indexed outputIndex, address indexed asserter, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) ParseChallengeCreated(log types.Log) (*ColosseumChallengeCreated, error) {
	event := new(ColosseumChallengeCreated)
	if err := _Colosseum.contract.UnpackLog(event, "ChallengeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ColosseumChallengeDismissedIterator is returned from FilterChallengeDismissed and is used to iterate over the raw logs and unpacked data for ChallengeDismissed events raised by the Colosseum contract.
type ColosseumChallengeDismissedIterator struct {
	Event *ColosseumChallengeDismissed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumChallengeDismissedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumChallengeDismissed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumChallengeDismissed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumChallengeDismissedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumChallengeDismissedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumChallengeDismissed represents a ChallengeDismissed event raised by the Colosseum contract.
type ColosseumChallengeDismissed struct {
	OutputIndex *big.Int
	Challenger  common.Address
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterChallengeDismissed is a free log retrieval operation binding the contract event 0xdca9fa9b51a5ba03938c6a0cd5489011630370fc481ef2b0cb771ad904a73053.
//
// Solidity: event ChallengeDismissed(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) FilterChallengeDismissed(opts *bind.FilterOpts, outputIndex []*big.Int, challenger []common.Address) (*ColosseumChallengeDismissedIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "ChallengeDismissed", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return &ColosseumChallengeDismissedIterator{contract: _Colosseum.contract, event: "ChallengeDismissed", logs: logs, sub: sub}, nil
}

// WatchChallengeDismissed is a free log subscription operation binding the contract event 0xdca9fa9b51a5ba03938c6a0cd5489011630370fc481ef2b0cb771ad904a73053.
//
// Solidity: event ChallengeDismissed(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) WatchChallengeDismissed(opts *bind.WatchOpts, sink chan<- *ColosseumChallengeDismissed, outputIndex []*big.Int, challenger []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "ChallengeDismissed", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumChallengeDismissed)
				if err := _Colosseum.contract.UnpackLog(event, "ChallengeDismissed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeDismissed is a log parse operation binding the contract event 0xdca9fa9b51a5ba03938c6a0cd5489011630370fc481ef2b0cb771ad904a73053.
//
// Solidity: event ChallengeDismissed(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) ParseChallengeDismissed(log types.Log) (*ColosseumChallengeDismissed, error) {
	event := new(ColosseumChallengeDismissed)
	if err := _Colosseum.contract.UnpackLog(event, "ChallengeDismissed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ColosseumChallengerTimedOutIterator is returned from FilterChallengerTimedOut and is used to iterate over the raw logs and unpacked data for ChallengerTimedOut events raised by the Colosseum contract.
type ColosseumChallengerTimedOutIterator struct {
	Event *ColosseumChallengerTimedOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumChallengerTimedOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumChallengerTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumChallengerTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumChallengerTimedOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumChallengerTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumChallengerTimedOut represents a ChallengerTimedOut event raised by the Colosseum contract.
type ColosseumChallengerTimedOut struct {
	OutputIndex *big.Int
	Challenger  common.Address
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterChallengerTimedOut is a free log retrieval operation binding the contract event 0xbf4506ef5d06ecb6168f37bc9e69dd473089eb9e3f2675322d01b4d466cff051.
//
// Solidity: event ChallengerTimedOut(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) FilterChallengerTimedOut(opts *bind.FilterOpts, outputIndex []*big.Int, challenger []common.Address) (*ColosseumChallengerTimedOutIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "ChallengerTimedOut", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return &ColosseumChallengerTimedOutIterator{contract: _Colosseum.contract, event: "ChallengerTimedOut", logs: logs, sub: sub}, nil
}

// WatchChallengerTimedOut is a free log subscription operation binding the contract event 0xbf4506ef5d06ecb6168f37bc9e69dd473089eb9e3f2675322d01b4d466cff051.
//
// Solidity: event ChallengerTimedOut(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) WatchChallengerTimedOut(opts *bind.WatchOpts, sink chan<- *ColosseumChallengerTimedOut, outputIndex []*big.Int, challenger []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "ChallengerTimedOut", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumChallengerTimedOut)
				if err := _Colosseum.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengerTimedOut is a log parse operation binding the contract event 0xbf4506ef5d06ecb6168f37bc9e69dd473089eb9e3f2675322d01b4d466cff051.
//
// Solidity: event ChallengerTimedOut(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) ParseChallengerTimedOut(log types.Log) (*ColosseumChallengerTimedOut, error) {
	event := new(ColosseumChallengerTimedOut)
	if err := _Colosseum.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ColosseumInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Colosseum contract.
type ColosseumInitializedIterator struct {
	Event *ColosseumInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumInitialized represents a Initialized event raised by the Colosseum contract.
type ColosseumInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Colosseum *ColosseumFilterer) FilterInitialized(opts *bind.FilterOpts) (*ColosseumInitializedIterator, error) {

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ColosseumInitializedIterator{contract: _Colosseum.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Colosseum *ColosseumFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ColosseumInitialized) (event.Subscription, error) {

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumInitialized)
				if err := _Colosseum.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Colosseum *ColosseumFilterer) ParseInitialized(log types.Log) (*ColosseumInitialized, error) {
	event := new(ColosseumInitialized)
	if err := _Colosseum.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ColosseumProvenIterator is returned from FilterProven and is used to iterate over the raw logs and unpacked data for Proven events raised by the Colosseum contract.
type ColosseumProvenIterator struct {
	Event *ColosseumProven // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumProvenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumProven)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumProven)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumProvenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumProvenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumProven represents a Proven event raised by the Colosseum contract.
type ColosseumProven struct {
	OutputIndex *big.Int
	Challenger  common.Address
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterProven is a free log retrieval operation binding the contract event 0x0431864ed2609170587bbc7c198abd8caee4c55943dfb16fd42ec6f59c91c5f7.
//
// Solidity: event Proven(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) FilterProven(opts *bind.FilterOpts, outputIndex []*big.Int, challenger []common.Address) (*ColosseumProvenIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "Proven", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return &ColosseumProvenIterator{contract: _Colosseum.contract, event: "Proven", logs: logs, sub: sub}, nil
}

// WatchProven is a free log subscription operation binding the contract event 0x0431864ed2609170587bbc7c198abd8caee4c55943dfb16fd42ec6f59c91c5f7.
//
// Solidity: event Proven(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) WatchProven(opts *bind.WatchOpts, sink chan<- *ColosseumProven, outputIndex []*big.Int, challenger []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "Proven", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumProven)
				if err := _Colosseum.contract.UnpackLog(event, "Proven", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProven is a log parse operation binding the contract event 0x0431864ed2609170587bbc7c198abd8caee4c55943dfb16fd42ec6f59c91c5f7.
//
// Solidity: event Proven(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) ParseProven(log types.Log) (*ColosseumProven, error) {
	event := new(ColosseumProven)
	if err := _Colosseum.contract.UnpackLog(event, "Proven", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ColosseumReadyToProveIterator is returned from FilterReadyToProve and is used to iterate over the raw logs and unpacked data for ReadyToProve events raised by the Colosseum contract.
type ColosseumReadyToProveIterator struct {
	Event *ColosseumReadyToProve // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumReadyToProveIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumReadyToProve)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumReadyToProve)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumReadyToProveIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumReadyToProveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumReadyToProve represents a ReadyToProve event raised by the Colosseum contract.
type ColosseumReadyToProve struct {
	OutputIndex *big.Int
	Challenger  common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterReadyToProve is a free log retrieval operation binding the contract event 0x5c4528cbb38a169d24837617d3fd3d5c70a47769a4e9af6f384720b359b716c8.
//
// Solidity: event ReadyToProve(uint256 indexed outputIndex, address indexed challenger)
func (_Colosseum *ColosseumFilterer) FilterReadyToProve(opts *bind.FilterOpts, outputIndex []*big.Int, challenger []common.Address) (*ColosseumReadyToProveIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "ReadyToProve", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return &ColosseumReadyToProveIterator{contract: _Colosseum.contract, event: "ReadyToProve", logs: logs, sub: sub}, nil
}

// WatchReadyToProve is a free log subscription operation binding the contract event 0x5c4528cbb38a169d24837617d3fd3d5c70a47769a4e9af6f384720b359b716c8.
//
// Solidity: event ReadyToProve(uint256 indexed outputIndex, address indexed challenger)
func (_Colosseum *ColosseumFilterer) WatchReadyToProve(opts *bind.WatchOpts, sink chan<- *ColosseumReadyToProve, outputIndex []*big.Int, challenger []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "ReadyToProve", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumReadyToProve)
				if err := _Colosseum.contract.UnpackLog(event, "ReadyToProve", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReadyToProve is a log parse operation binding the contract event 0x5c4528cbb38a169d24837617d3fd3d5c70a47769a4e9af6f384720b359b716c8.
//
// Solidity: event ReadyToProve(uint256 indexed outputIndex, address indexed challenger)
func (_Colosseum *ColosseumFilterer) ParseReadyToProve(log types.Log) (*ColosseumReadyToProve, error) {
	event := new(ColosseumReadyToProve)
	if err := _Colosseum.contract.UnpackLog(event, "ReadyToProve", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
