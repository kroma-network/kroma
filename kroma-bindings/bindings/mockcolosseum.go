// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// MockColosseumMetaData contains all meta data concerning the MockColosseum contract.
var MockColosseumMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_l2Oracle\",\"type\":\"address\",\"internalType\":\"contractL2OutputOracle\"},{\"name\":\"_zkProofVerifier\",\"type\":\"address\",\"internalType\":\"contractZKProofVerifier\"},{\"name\":\"_submissionInterval\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_creationPeriodSeconds\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_bisectionTimeout\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_provingTimeout\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_segmentsLengths\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"},{\"name\":\"_securityCouncil\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"BISECTION_TIMEOUT\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"CREATION_PERIOD_SECONDS\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"L2_ORACLE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractL2OutputOracle\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"L2_ORACLE_SUBMISSION_INTERVAL\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"PROVING_TIMEOUT\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"SECURITY_COUNCIL\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ZK_PROOF_VERIFIER\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractZKProofVerifier\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"bisect\",\"inputs\":[{\"name\":\"_outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_challenger\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_pos\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_segments\",\"type\":\"bytes32[]\",\"internalType\":\"bytes32[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"cancelChallenge\",\"inputs\":[{\"name\":\"_outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"challengerTimeout\",\"inputs\":[{\"name\":\"_outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_challenger\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"challenges\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"turn\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"timeoutAt\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"asserter\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"challenger\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"segSize\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"segStart\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"l1Head\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"createChallenge\",\"inputs\":[{\"name\":\"_outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_l1BlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"_l1BlockNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_segments\",\"type\":\"bytes32[]\",\"internalType\":\"bytes32[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"deletedOutputs\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"submitter\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"outputRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"timestamp\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"l2BlockNumber\",\"type\":\"uint128\",\"internalType\":\"uint128\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"dismissChallenge\",\"inputs\":[{\"name\":\"_outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_challenger\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_asserter\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_outputRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"_publicInputHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"forceDeleteOutput\",\"inputs\":[{\"name\":\"_outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getChallenge\",\"inputs\":[{\"name\":\"_outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_challenger\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structTypes.Challenge\",\"components\":[{\"name\":\"turn\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"timeoutAt\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"asserter\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"challenger\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"segments\",\"type\":\"bytes32[]\",\"internalType\":\"bytes32[]\"},{\"name\":\"segSize\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"segStart\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"l1Head\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStatus\",\"inputs\":[{\"name\":\"_outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_challenger\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"enumColosseum.ChallengeStatus\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_segmentsLengths\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"isAbleToBisect\",\"inputs\":[{\"name\":\"_outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_challenger\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isInCreationPeriod\",\"inputs\":[{\"name\":\"_outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"proveFaultWithZkEvm\",\"inputs\":[{\"name\":\"_outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_pos\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_zkEvmProof\",\"type\":\"tuple\",\"internalType\":\"structTypes.ZkEvmProof\",\"components\":[{\"name\":\"publicInputProof\",\"type\":\"tuple\",\"internalType\":\"structTypes.PublicInputProof\",\"components\":[{\"name\":\"srcOutputRootProof\",\"type\":\"tuple\",\"internalType\":\"structTypes.OutputRootProof\",\"components\":[{\"name\":\"version\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"stateRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"messagePasserStorageRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"latestBlockhash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"nextBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"dstOutputRootProof\",\"type\":\"tuple\",\"internalType\":\"structTypes.OutputRootProof\",\"components\":[{\"name\":\"version\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"stateRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"messagePasserStorageRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"latestBlockhash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"nextBlockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"publicInput\",\"type\":\"tuple\",\"internalType\":\"structTypes.PublicInput\",\"components\":[{\"name\":\"blockHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"parentHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"timestamp\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"number\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"gasLimit\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"baseFee\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"transactionsRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"stateRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"withdrawalsRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"txHashes\",\"type\":\"bytes32[]\",\"internalType\":\"bytes32[]\"},{\"name\":\"blobGasUsed\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"excessBlobGas\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"parentBeaconRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"rlps\",\"type\":\"tuple\",\"internalType\":\"structTypes.BlockHeaderRLP\",\"components\":[{\"name\":\"uncleHash\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"coinbase\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"receiptsRoot\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"logsBloom\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"difficulty\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"gasUsed\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"extraData\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"mixHash\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"nonce\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"l2ToL1MessagePasserBalance\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"l2ToL1MessagePasserCodeHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"merkleProof\",\"type\":\"bytes[]\",\"internalType\":\"bytes[]\"}]},{\"name\":\"proof\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"},{\"name\":\"pair\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"proveFaultWithZkVm\",\"inputs\":[{\"name\":\"_outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_pos\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_zkVmProof\",\"type\":\"tuple\",\"internalType\":\"structTypes.ZkVmProof\",\"components\":[{\"name\":\"zkVmProgramVKey\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"publicValues\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"proofBytes\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"segmentsLengths\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"setL1Head\",\"inputs\":[{\"name\":\"_outputIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_challenger\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_l1Head\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"verifiedPublicInputs\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"version\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"Bisected\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"challenger\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"turn\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"},{\"name\":\"timestamp\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ChallengeCanceled\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"challenger\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ChallengeCreated\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"asserter\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"challenger\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ChallengeDismissed\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"challenger\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ChallengerTimedOut\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"challenger\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OutputForceDeleted\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"asseter\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Proven\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"challenger\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ReadyToProve\",\"inputs\":[{\"name\":\"outputIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"challenger\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"AlreadyVerifiedPublicInput\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"CannotCancelChallenge\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"CreationPeriodPassed\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"FirstSegmentMismatched\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ImproperChallengeStatus\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ImproperChallengeStatusToCancel\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ImproperValidatorStatus\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidAddressGiven\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidOutputGiven\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidPublicInputHash\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidSegmentsLength\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidTurn\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"L1Reorged\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"LastSegmentMatched\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotAllowedCaller\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotAllowedGenesisOutput\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OnlyChallengerCanCancel\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OutputAlreadyDeleted\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OutputAlreadyFinalized\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OutputNotDeleted\",\"inputs\":[]}]",
	Bin: "",
}

// MockColosseumABI is the input ABI used to generate the binding from.
// Deprecated: Use MockColosseumMetaData.ABI instead.
var MockColosseumABI = MockColosseumMetaData.ABI

// MockColosseumBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MockColosseumMetaData.Bin instead.
var MockColosseumBin = MockColosseumMetaData.Bin

// DeployMockColosseum deploys a new Ethereum contract, binding an instance of MockColosseum to it.
func DeployMockColosseum(auth *bind.TransactOpts, backend bind.ContractBackend, _l2Oracle common.Address, _zkProofVerifier common.Address, _submissionInterval *big.Int, _creationPeriodSeconds *big.Int, _bisectionTimeout *big.Int, _provingTimeout *big.Int, _segmentsLengths []*big.Int, _securityCouncil common.Address) (common.Address, *types.Transaction, *MockColosseum, error) {
	parsed, err := MockColosseumMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MockColosseumBin), backend, _l2Oracle, _zkProofVerifier, _submissionInterval, _creationPeriodSeconds, _bisectionTimeout, _provingTimeout, _segmentsLengths, _securityCouncil)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MockColosseum{MockColosseumCaller: MockColosseumCaller{contract: contract}, MockColosseumTransactor: MockColosseumTransactor{contract: contract}, MockColosseumFilterer: MockColosseumFilterer{contract: contract}}, nil
}

// MockColosseum is an auto generated Go binding around an Ethereum contract.
type MockColosseum struct {
	MockColosseumCaller     // Read-only binding to the contract
	MockColosseumTransactor // Write-only binding to the contract
	MockColosseumFilterer   // Log filterer for contract events
}

// MockColosseumCaller is an auto generated read-only Go binding around an Ethereum contract.
type MockColosseumCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockColosseumTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MockColosseumTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockColosseumFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MockColosseumFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockColosseumSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MockColosseumSession struct {
	Contract     *MockColosseum    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MockColosseumCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MockColosseumCallerSession struct {
	Contract *MockColosseumCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// MockColosseumTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MockColosseumTransactorSession struct {
	Contract     *MockColosseumTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// MockColosseumRaw is an auto generated low-level Go binding around an Ethereum contract.
type MockColosseumRaw struct {
	Contract *MockColosseum // Generic contract binding to access the raw methods on
}

// MockColosseumCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MockColosseumCallerRaw struct {
	Contract *MockColosseumCaller // Generic read-only contract binding to access the raw methods on
}

// MockColosseumTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MockColosseumTransactorRaw struct {
	Contract *MockColosseumTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMockColosseum creates a new instance of MockColosseum, bound to a specific deployed contract.
func NewMockColosseum(address common.Address, backend bind.ContractBackend) (*MockColosseum, error) {
	contract, err := bindMockColosseum(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MockColosseum{MockColosseumCaller: MockColosseumCaller{contract: contract}, MockColosseumTransactor: MockColosseumTransactor{contract: contract}, MockColosseumFilterer: MockColosseumFilterer{contract: contract}}, nil
}

// NewMockColosseumCaller creates a new read-only instance of MockColosseum, bound to a specific deployed contract.
func NewMockColosseumCaller(address common.Address, caller bind.ContractCaller) (*MockColosseumCaller, error) {
	contract, err := bindMockColosseum(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MockColosseumCaller{contract: contract}, nil
}

// NewMockColosseumTransactor creates a new write-only instance of MockColosseum, bound to a specific deployed contract.
func NewMockColosseumTransactor(address common.Address, transactor bind.ContractTransactor) (*MockColosseumTransactor, error) {
	contract, err := bindMockColosseum(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MockColosseumTransactor{contract: contract}, nil
}

// NewMockColosseumFilterer creates a new log filterer instance of MockColosseum, bound to a specific deployed contract.
func NewMockColosseumFilterer(address common.Address, filterer bind.ContractFilterer) (*MockColosseumFilterer, error) {
	contract, err := bindMockColosseum(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MockColosseumFilterer{contract: contract}, nil
}

// bindMockColosseum binds a generic wrapper to an already deployed contract.
func bindMockColosseum(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MockColosseumMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MockColosseum *MockColosseumRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MockColosseum.Contract.MockColosseumCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MockColosseum *MockColosseumRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MockColosseum.Contract.MockColosseumTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MockColosseum *MockColosseumRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MockColosseum.Contract.MockColosseumTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MockColosseum *MockColosseumCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MockColosseum.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MockColosseum *MockColosseumTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MockColosseum.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MockColosseum *MockColosseumTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MockColosseum.Contract.contract.Transact(opts, method, params...)
}

// BISECTIONTIMEOUT is a free data retrieval call binding the contract method 0x4394c584.
//
// Solidity: function BISECTION_TIMEOUT() view returns(uint256)
func (_MockColosseum *MockColosseumCaller) BISECTIONTIMEOUT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MockColosseum.contract.Call(opts, &out, "BISECTION_TIMEOUT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BISECTIONTIMEOUT is a free data retrieval call binding the contract method 0x4394c584.
//
// Solidity: function BISECTION_TIMEOUT() view returns(uint256)
func (_MockColosseum *MockColosseumSession) BISECTIONTIMEOUT() (*big.Int, error) {
	return _MockColosseum.Contract.BISECTIONTIMEOUT(&_MockColosseum.CallOpts)
}

// BISECTIONTIMEOUT is a free data retrieval call binding the contract method 0x4394c584.
//
// Solidity: function BISECTION_TIMEOUT() view returns(uint256)
func (_MockColosseum *MockColosseumCallerSession) BISECTIONTIMEOUT() (*big.Int, error) {
	return _MockColosseum.Contract.BISECTIONTIMEOUT(&_MockColosseum.CallOpts)
}

// CREATIONPERIODSECONDS is a free data retrieval call binding the contract method 0x8f3a6c88.
//
// Solidity: function CREATION_PERIOD_SECONDS() view returns(uint256)
func (_MockColosseum *MockColosseumCaller) CREATIONPERIODSECONDS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MockColosseum.contract.Call(opts, &out, "CREATION_PERIOD_SECONDS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CREATIONPERIODSECONDS is a free data retrieval call binding the contract method 0x8f3a6c88.
//
// Solidity: function CREATION_PERIOD_SECONDS() view returns(uint256)
func (_MockColosseum *MockColosseumSession) CREATIONPERIODSECONDS() (*big.Int, error) {
	return _MockColosseum.Contract.CREATIONPERIODSECONDS(&_MockColosseum.CallOpts)
}

// CREATIONPERIODSECONDS is a free data retrieval call binding the contract method 0x8f3a6c88.
//
// Solidity: function CREATION_PERIOD_SECONDS() view returns(uint256)
func (_MockColosseum *MockColosseumCallerSession) CREATIONPERIODSECONDS() (*big.Int, error) {
	return _MockColosseum.Contract.CREATIONPERIODSECONDS(&_MockColosseum.CallOpts)
}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_MockColosseum *MockColosseumCaller) L2ORACLE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MockColosseum.contract.Call(opts, &out, "L2_ORACLE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_MockColosseum *MockColosseumSession) L2ORACLE() (common.Address, error) {
	return _MockColosseum.Contract.L2ORACLE(&_MockColosseum.CallOpts)
}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_MockColosseum *MockColosseumCallerSession) L2ORACLE() (common.Address, error) {
	return _MockColosseum.Contract.L2ORACLE(&_MockColosseum.CallOpts)
}

// L2ORACLESUBMISSIONINTERVAL is a free data retrieval call binding the contract method 0xcfb4474d.
//
// Solidity: function L2_ORACLE_SUBMISSION_INTERVAL() view returns(uint256)
func (_MockColosseum *MockColosseumCaller) L2ORACLESUBMISSIONINTERVAL(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MockColosseum.contract.Call(opts, &out, "L2_ORACLE_SUBMISSION_INTERVAL")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// L2ORACLESUBMISSIONINTERVAL is a free data retrieval call binding the contract method 0xcfb4474d.
//
// Solidity: function L2_ORACLE_SUBMISSION_INTERVAL() view returns(uint256)
func (_MockColosseum *MockColosseumSession) L2ORACLESUBMISSIONINTERVAL() (*big.Int, error) {
	return _MockColosseum.Contract.L2ORACLESUBMISSIONINTERVAL(&_MockColosseum.CallOpts)
}

// L2ORACLESUBMISSIONINTERVAL is a free data retrieval call binding the contract method 0xcfb4474d.
//
// Solidity: function L2_ORACLE_SUBMISSION_INTERVAL() view returns(uint256)
func (_MockColosseum *MockColosseumCallerSession) L2ORACLESUBMISSIONINTERVAL() (*big.Int, error) {
	return _MockColosseum.Contract.L2ORACLESUBMISSIONINTERVAL(&_MockColosseum.CallOpts)
}

// PROVINGTIMEOUT is a free data retrieval call binding the contract method 0xd2ee3075.
//
// Solidity: function PROVING_TIMEOUT() view returns(uint256)
func (_MockColosseum *MockColosseumCaller) PROVINGTIMEOUT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MockColosseum.contract.Call(opts, &out, "PROVING_TIMEOUT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PROVINGTIMEOUT is a free data retrieval call binding the contract method 0xd2ee3075.
//
// Solidity: function PROVING_TIMEOUT() view returns(uint256)
func (_MockColosseum *MockColosseumSession) PROVINGTIMEOUT() (*big.Int, error) {
	return _MockColosseum.Contract.PROVINGTIMEOUT(&_MockColosseum.CallOpts)
}

// PROVINGTIMEOUT is a free data retrieval call binding the contract method 0xd2ee3075.
//
// Solidity: function PROVING_TIMEOUT() view returns(uint256)
func (_MockColosseum *MockColosseumCallerSession) PROVINGTIMEOUT() (*big.Int, error) {
	return _MockColosseum.Contract.PROVINGTIMEOUT(&_MockColosseum.CallOpts)
}

// SECURITYCOUNCIL is a free data retrieval call binding the contract method 0x36086417.
//
// Solidity: function SECURITY_COUNCIL() view returns(address)
func (_MockColosseum *MockColosseumCaller) SECURITYCOUNCIL(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MockColosseum.contract.Call(opts, &out, "SECURITY_COUNCIL")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SECURITYCOUNCIL is a free data retrieval call binding the contract method 0x36086417.
//
// Solidity: function SECURITY_COUNCIL() view returns(address)
func (_MockColosseum *MockColosseumSession) SECURITYCOUNCIL() (common.Address, error) {
	return _MockColosseum.Contract.SECURITYCOUNCIL(&_MockColosseum.CallOpts)
}

// SECURITYCOUNCIL is a free data retrieval call binding the contract method 0x36086417.
//
// Solidity: function SECURITY_COUNCIL() view returns(address)
func (_MockColosseum *MockColosseumCallerSession) SECURITYCOUNCIL() (common.Address, error) {
	return _MockColosseum.Contract.SECURITYCOUNCIL(&_MockColosseum.CallOpts)
}

// ZKPROOFVERIFIER is a free data retrieval call binding the contract method 0x6506e837.
//
// Solidity: function ZK_PROOF_VERIFIER() view returns(address)
func (_MockColosseum *MockColosseumCaller) ZKPROOFVERIFIER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MockColosseum.contract.Call(opts, &out, "ZK_PROOF_VERIFIER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZKPROOFVERIFIER is a free data retrieval call binding the contract method 0x6506e837.
//
// Solidity: function ZK_PROOF_VERIFIER() view returns(address)
func (_MockColosseum *MockColosseumSession) ZKPROOFVERIFIER() (common.Address, error) {
	return _MockColosseum.Contract.ZKPROOFVERIFIER(&_MockColosseum.CallOpts)
}

// ZKPROOFVERIFIER is a free data retrieval call binding the contract method 0x6506e837.
//
// Solidity: function ZK_PROOF_VERIFIER() view returns(address)
func (_MockColosseum *MockColosseumCallerSession) ZKPROOFVERIFIER() (common.Address, error) {
	return _MockColosseum.Contract.ZKPROOFVERIFIER(&_MockColosseum.CallOpts)
}

// Challenges is a free data retrieval call binding the contract method 0x2df27fa5.
//
// Solidity: function challenges(uint256 , address ) view returns(uint8 turn, uint64 timeoutAt, address asserter, address challenger, uint256 segSize, uint256 segStart, bytes32 l1Head)
func (_MockColosseum *MockColosseumCaller) Challenges(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (struct {
	Turn       uint8
	TimeoutAt  uint64
	Asserter   common.Address
	Challenger common.Address
	SegSize    *big.Int
	SegStart   *big.Int
	L1Head     [32]byte
}, error) {
	var out []interface{}
	err := _MockColosseum.contract.Call(opts, &out, "challenges", arg0, arg1)

	outstruct := new(struct {
		Turn       uint8
		TimeoutAt  uint64
		Asserter   common.Address
		Challenger common.Address
		SegSize    *big.Int
		SegStart   *big.Int
		L1Head     [32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Turn = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.TimeoutAt = *abi.ConvertType(out[1], new(uint64)).(*uint64)
	outstruct.Asserter = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Challenger = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.SegSize = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.SegStart = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.L1Head = *abi.ConvertType(out[6], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

// Challenges is a free data retrieval call binding the contract method 0x2df27fa5.
//
// Solidity: function challenges(uint256 , address ) view returns(uint8 turn, uint64 timeoutAt, address asserter, address challenger, uint256 segSize, uint256 segStart, bytes32 l1Head)
func (_MockColosseum *MockColosseumSession) Challenges(arg0 *big.Int, arg1 common.Address) (struct {
	Turn       uint8
	TimeoutAt  uint64
	Asserter   common.Address
	Challenger common.Address
	SegSize    *big.Int
	SegStart   *big.Int
	L1Head     [32]byte
}, error) {
	return _MockColosseum.Contract.Challenges(&_MockColosseum.CallOpts, arg0, arg1)
}

// Challenges is a free data retrieval call binding the contract method 0x2df27fa5.
//
// Solidity: function challenges(uint256 , address ) view returns(uint8 turn, uint64 timeoutAt, address asserter, address challenger, uint256 segSize, uint256 segStart, bytes32 l1Head)
func (_MockColosseum *MockColosseumCallerSession) Challenges(arg0 *big.Int, arg1 common.Address) (struct {
	Turn       uint8
	TimeoutAt  uint64
	Asserter   common.Address
	Challenger common.Address
	SegSize    *big.Int
	SegStart   *big.Int
	L1Head     [32]byte
}, error) {
	return _MockColosseum.Contract.Challenges(&_MockColosseum.CallOpts, arg0, arg1)
}

// DeletedOutputs is a free data retrieval call binding the contract method 0x5a6b011f.
//
// Solidity: function deletedOutputs(uint256 ) view returns(address submitter, bytes32 outputRoot, uint128 timestamp, uint128 l2BlockNumber)
func (_MockColosseum *MockColosseumCaller) DeletedOutputs(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Submitter     common.Address
	OutputRoot    [32]byte
	Timestamp     *big.Int
	L2BlockNumber *big.Int
}, error) {
	var out []interface{}
	err := _MockColosseum.contract.Call(opts, &out, "deletedOutputs", arg0)

	outstruct := new(struct {
		Submitter     common.Address
		OutputRoot    [32]byte
		Timestamp     *big.Int
		L2BlockNumber *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Submitter = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.OutputRoot = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Timestamp = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.L2BlockNumber = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// DeletedOutputs is a free data retrieval call binding the contract method 0x5a6b011f.
//
// Solidity: function deletedOutputs(uint256 ) view returns(address submitter, bytes32 outputRoot, uint128 timestamp, uint128 l2BlockNumber)
func (_MockColosseum *MockColosseumSession) DeletedOutputs(arg0 *big.Int) (struct {
	Submitter     common.Address
	OutputRoot    [32]byte
	Timestamp     *big.Int
	L2BlockNumber *big.Int
}, error) {
	return _MockColosseum.Contract.DeletedOutputs(&_MockColosseum.CallOpts, arg0)
}

// DeletedOutputs is a free data retrieval call binding the contract method 0x5a6b011f.
//
// Solidity: function deletedOutputs(uint256 ) view returns(address submitter, bytes32 outputRoot, uint128 timestamp, uint128 l2BlockNumber)
func (_MockColosseum *MockColosseumCallerSession) DeletedOutputs(arg0 *big.Int) (struct {
	Submitter     common.Address
	OutputRoot    [32]byte
	Timestamp     *big.Int
	L2BlockNumber *big.Int
}, error) {
	return _MockColosseum.Contract.DeletedOutputs(&_MockColosseum.CallOpts, arg0)
}

// GetChallenge is a free data retrieval call binding the contract method 0xe58932b3.
//
// Solidity: function getChallenge(uint256 _outputIndex, address _challenger) view returns((uint8,uint64,address,address,bytes32[],uint256,uint256,bytes32))
func (_MockColosseum *MockColosseumCaller) GetChallenge(opts *bind.CallOpts, _outputIndex *big.Int, _challenger common.Address) (TypesChallenge, error) {
	var out []interface{}
	err := _MockColosseum.contract.Call(opts, &out, "getChallenge", _outputIndex, _challenger)

	if err != nil {
		return *new(TypesChallenge), err
	}

	out0 := *abi.ConvertType(out[0], new(TypesChallenge)).(*TypesChallenge)

	return out0, err

}

// GetChallenge is a free data retrieval call binding the contract method 0xe58932b3.
//
// Solidity: function getChallenge(uint256 _outputIndex, address _challenger) view returns((uint8,uint64,address,address,bytes32[],uint256,uint256,bytes32))
func (_MockColosseum *MockColosseumSession) GetChallenge(_outputIndex *big.Int, _challenger common.Address) (TypesChallenge, error) {
	return _MockColosseum.Contract.GetChallenge(&_MockColosseum.CallOpts, _outputIndex, _challenger)
}

// GetChallenge is a free data retrieval call binding the contract method 0xe58932b3.
//
// Solidity: function getChallenge(uint256 _outputIndex, address _challenger) view returns((uint8,uint64,address,address,bytes32[],uint256,uint256,bytes32))
func (_MockColosseum *MockColosseumCallerSession) GetChallenge(_outputIndex *big.Int, _challenger common.Address) (TypesChallenge, error) {
	return _MockColosseum.Contract.GetChallenge(&_MockColosseum.CallOpts, _outputIndex, _challenger)
}

// GetStatus is a free data retrieval call binding the contract method 0xe9371a2c.
//
// Solidity: function getStatus(uint256 _outputIndex, address _challenger) view returns(uint8)
func (_MockColosseum *MockColosseumCaller) GetStatus(opts *bind.CallOpts, _outputIndex *big.Int, _challenger common.Address) (uint8, error) {
	var out []interface{}
	err := _MockColosseum.contract.Call(opts, &out, "getStatus", _outputIndex, _challenger)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetStatus is a free data retrieval call binding the contract method 0xe9371a2c.
//
// Solidity: function getStatus(uint256 _outputIndex, address _challenger) view returns(uint8)
func (_MockColosseum *MockColosseumSession) GetStatus(_outputIndex *big.Int, _challenger common.Address) (uint8, error) {
	return _MockColosseum.Contract.GetStatus(&_MockColosseum.CallOpts, _outputIndex, _challenger)
}

// GetStatus is a free data retrieval call binding the contract method 0xe9371a2c.
//
// Solidity: function getStatus(uint256 _outputIndex, address _challenger) view returns(uint8)
func (_MockColosseum *MockColosseumCallerSession) GetStatus(_outputIndex *big.Int, _challenger common.Address) (uint8, error) {
	return _MockColosseum.Contract.GetStatus(&_MockColosseum.CallOpts, _outputIndex, _challenger)
}

// IsAbleToBisect is a free data retrieval call binding the contract method 0x887c560f.
//
// Solidity: function isAbleToBisect(uint256 _outputIndex, address _challenger) view returns(bool)
func (_MockColosseum *MockColosseumCaller) IsAbleToBisect(opts *bind.CallOpts, _outputIndex *big.Int, _challenger common.Address) (bool, error) {
	var out []interface{}
	err := _MockColosseum.contract.Call(opts, &out, "isAbleToBisect", _outputIndex, _challenger)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAbleToBisect is a free data retrieval call binding the contract method 0x887c560f.
//
// Solidity: function isAbleToBisect(uint256 _outputIndex, address _challenger) view returns(bool)
func (_MockColosseum *MockColosseumSession) IsAbleToBisect(_outputIndex *big.Int, _challenger common.Address) (bool, error) {
	return _MockColosseum.Contract.IsAbleToBisect(&_MockColosseum.CallOpts, _outputIndex, _challenger)
}

// IsAbleToBisect is a free data retrieval call binding the contract method 0x887c560f.
//
// Solidity: function isAbleToBisect(uint256 _outputIndex, address _challenger) view returns(bool)
func (_MockColosseum *MockColosseumCallerSession) IsAbleToBisect(_outputIndex *big.Int, _challenger common.Address) (bool, error) {
	return _MockColosseum.Contract.IsAbleToBisect(&_MockColosseum.CallOpts, _outputIndex, _challenger)
}

// IsInCreationPeriod is a free data retrieval call binding the contract method 0x461569b8.
//
// Solidity: function isInCreationPeriod(uint256 _outputIndex) view returns(bool)
func (_MockColosseum *MockColosseumCaller) IsInCreationPeriod(opts *bind.CallOpts, _outputIndex *big.Int) (bool, error) {
	var out []interface{}
	err := _MockColosseum.contract.Call(opts, &out, "isInCreationPeriod", _outputIndex)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsInCreationPeriod is a free data retrieval call binding the contract method 0x461569b8.
//
// Solidity: function isInCreationPeriod(uint256 _outputIndex) view returns(bool)
func (_MockColosseum *MockColosseumSession) IsInCreationPeriod(_outputIndex *big.Int) (bool, error) {
	return _MockColosseum.Contract.IsInCreationPeriod(&_MockColosseum.CallOpts, _outputIndex)
}

// IsInCreationPeriod is a free data retrieval call binding the contract method 0x461569b8.
//
// Solidity: function isInCreationPeriod(uint256 _outputIndex) view returns(bool)
func (_MockColosseum *MockColosseumCallerSession) IsInCreationPeriod(_outputIndex *big.Int) (bool, error) {
	return _MockColosseum.Contract.IsInCreationPeriod(&_MockColosseum.CallOpts, _outputIndex)
}

// SegmentsLengths is a free data retrieval call binding the contract method 0x8f86c803.
//
// Solidity: function segmentsLengths(uint256 ) view returns(uint256)
func (_MockColosseum *MockColosseumCaller) SegmentsLengths(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _MockColosseum.contract.Call(opts, &out, "segmentsLengths", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SegmentsLengths is a free data retrieval call binding the contract method 0x8f86c803.
//
// Solidity: function segmentsLengths(uint256 ) view returns(uint256)
func (_MockColosseum *MockColosseumSession) SegmentsLengths(arg0 *big.Int) (*big.Int, error) {
	return _MockColosseum.Contract.SegmentsLengths(&_MockColosseum.CallOpts, arg0)
}

// SegmentsLengths is a free data retrieval call binding the contract method 0x8f86c803.
//
// Solidity: function segmentsLengths(uint256 ) view returns(uint256)
func (_MockColosseum *MockColosseumCallerSession) SegmentsLengths(arg0 *big.Int) (*big.Int, error) {
	return _MockColosseum.Contract.SegmentsLengths(&_MockColosseum.CallOpts, arg0)
}

// VerifiedPublicInputs is a free data retrieval call binding the contract method 0x1be4e27e.
//
// Solidity: function verifiedPublicInputs(bytes32 ) view returns(bool)
func (_MockColosseum *MockColosseumCaller) VerifiedPublicInputs(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _MockColosseum.contract.Call(opts, &out, "verifiedPublicInputs", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifiedPublicInputs is a free data retrieval call binding the contract method 0x1be4e27e.
//
// Solidity: function verifiedPublicInputs(bytes32 ) view returns(bool)
func (_MockColosseum *MockColosseumSession) VerifiedPublicInputs(arg0 [32]byte) (bool, error) {
	return _MockColosseum.Contract.VerifiedPublicInputs(&_MockColosseum.CallOpts, arg0)
}

// VerifiedPublicInputs is a free data retrieval call binding the contract method 0x1be4e27e.
//
// Solidity: function verifiedPublicInputs(bytes32 ) view returns(bool)
func (_MockColosseum *MockColosseumCallerSession) VerifiedPublicInputs(arg0 [32]byte) (bool, error) {
	return _MockColosseum.Contract.VerifiedPublicInputs(&_MockColosseum.CallOpts, arg0)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_MockColosseum *MockColosseumCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MockColosseum.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_MockColosseum *MockColosseumSession) Version() (string, error) {
	return _MockColosseum.Contract.Version(&_MockColosseum.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_MockColosseum *MockColosseumCallerSession) Version() (string, error) {
	return _MockColosseum.Contract.Version(&_MockColosseum.CallOpts)
}

// Bisect is a paid mutator transaction binding the contract method 0xa6ade11f.
//
// Solidity: function bisect(uint256 _outputIndex, address _challenger, uint256 _pos, bytes32[] _segments) returns()
func (_MockColosseum *MockColosseumTransactor) Bisect(opts *bind.TransactOpts, _outputIndex *big.Int, _challenger common.Address, _pos *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _MockColosseum.contract.Transact(opts, "bisect", _outputIndex, _challenger, _pos, _segments)
}

// Bisect is a paid mutator transaction binding the contract method 0xa6ade11f.
//
// Solidity: function bisect(uint256 _outputIndex, address _challenger, uint256 _pos, bytes32[] _segments) returns()
func (_MockColosseum *MockColosseumSession) Bisect(_outputIndex *big.Int, _challenger common.Address, _pos *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _MockColosseum.Contract.Bisect(&_MockColosseum.TransactOpts, _outputIndex, _challenger, _pos, _segments)
}

// Bisect is a paid mutator transaction binding the contract method 0xa6ade11f.
//
// Solidity: function bisect(uint256 _outputIndex, address _challenger, uint256 _pos, bytes32[] _segments) returns()
func (_MockColosseum *MockColosseumTransactorSession) Bisect(_outputIndex *big.Int, _challenger common.Address, _pos *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _MockColosseum.Contract.Bisect(&_MockColosseum.TransactOpts, _outputIndex, _challenger, _pos, _segments)
}

// CancelChallenge is a paid mutator transaction binding the contract method 0xa41483e3.
//
// Solidity: function cancelChallenge(uint256 _outputIndex) returns()
func (_MockColosseum *MockColosseumTransactor) CancelChallenge(opts *bind.TransactOpts, _outputIndex *big.Int) (*types.Transaction, error) {
	return _MockColosseum.contract.Transact(opts, "cancelChallenge", _outputIndex)
}

// CancelChallenge is a paid mutator transaction binding the contract method 0xa41483e3.
//
// Solidity: function cancelChallenge(uint256 _outputIndex) returns()
func (_MockColosseum *MockColosseumSession) CancelChallenge(_outputIndex *big.Int) (*types.Transaction, error) {
	return _MockColosseum.Contract.CancelChallenge(&_MockColosseum.TransactOpts, _outputIndex)
}

// CancelChallenge is a paid mutator transaction binding the contract method 0xa41483e3.
//
// Solidity: function cancelChallenge(uint256 _outputIndex) returns()
func (_MockColosseum *MockColosseumTransactorSession) CancelChallenge(_outputIndex *big.Int) (*types.Transaction, error) {
	return _MockColosseum.Contract.CancelChallenge(&_MockColosseum.TransactOpts, _outputIndex)
}

// ChallengerTimeout is a paid mutator transaction binding the contract method 0x1db1b672.
//
// Solidity: function challengerTimeout(uint256 _outputIndex, address _challenger) returns()
func (_MockColosseum *MockColosseumTransactor) ChallengerTimeout(opts *bind.TransactOpts, _outputIndex *big.Int, _challenger common.Address) (*types.Transaction, error) {
	return _MockColosseum.contract.Transact(opts, "challengerTimeout", _outputIndex, _challenger)
}

// ChallengerTimeout is a paid mutator transaction binding the contract method 0x1db1b672.
//
// Solidity: function challengerTimeout(uint256 _outputIndex, address _challenger) returns()
func (_MockColosseum *MockColosseumSession) ChallengerTimeout(_outputIndex *big.Int, _challenger common.Address) (*types.Transaction, error) {
	return _MockColosseum.Contract.ChallengerTimeout(&_MockColosseum.TransactOpts, _outputIndex, _challenger)
}

// ChallengerTimeout is a paid mutator transaction binding the contract method 0x1db1b672.
//
// Solidity: function challengerTimeout(uint256 _outputIndex, address _challenger) returns()
func (_MockColosseum *MockColosseumTransactorSession) ChallengerTimeout(_outputIndex *big.Int, _challenger common.Address) (*types.Transaction, error) {
	return _MockColosseum.Contract.ChallengerTimeout(&_MockColosseum.TransactOpts, _outputIndex, _challenger)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0xfc9d84df.
//
// Solidity: function createChallenge(uint256 _outputIndex, bytes32 _l1BlockHash, uint256 _l1BlockNumber, bytes32[] _segments) returns()
func (_MockColosseum *MockColosseumTransactor) CreateChallenge(opts *bind.TransactOpts, _outputIndex *big.Int, _l1BlockHash [32]byte, _l1BlockNumber *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _MockColosseum.contract.Transact(opts, "createChallenge", _outputIndex, _l1BlockHash, _l1BlockNumber, _segments)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0xfc9d84df.
//
// Solidity: function createChallenge(uint256 _outputIndex, bytes32 _l1BlockHash, uint256 _l1BlockNumber, bytes32[] _segments) returns()
func (_MockColosseum *MockColosseumSession) CreateChallenge(_outputIndex *big.Int, _l1BlockHash [32]byte, _l1BlockNumber *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _MockColosseum.Contract.CreateChallenge(&_MockColosseum.TransactOpts, _outputIndex, _l1BlockHash, _l1BlockNumber, _segments)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0xfc9d84df.
//
// Solidity: function createChallenge(uint256 _outputIndex, bytes32 _l1BlockHash, uint256 _l1BlockNumber, bytes32[] _segments) returns()
func (_MockColosseum *MockColosseumTransactorSession) CreateChallenge(_outputIndex *big.Int, _l1BlockHash [32]byte, _l1BlockNumber *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _MockColosseum.Contract.CreateChallenge(&_MockColosseum.TransactOpts, _outputIndex, _l1BlockHash, _l1BlockNumber, _segments)
}

// DismissChallenge is a paid mutator transaction binding the contract method 0x62fc00db.
//
// Solidity: function dismissChallenge(uint256 _outputIndex, address _challenger, address _asserter, bytes32 _outputRoot, bytes32 _publicInputHash) returns()
func (_MockColosseum *MockColosseumTransactor) DismissChallenge(opts *bind.TransactOpts, _outputIndex *big.Int, _challenger common.Address, _asserter common.Address, _outputRoot [32]byte, _publicInputHash [32]byte) (*types.Transaction, error) {
	return _MockColosseum.contract.Transact(opts, "dismissChallenge", _outputIndex, _challenger, _asserter, _outputRoot, _publicInputHash)
}

// DismissChallenge is a paid mutator transaction binding the contract method 0x62fc00db.
//
// Solidity: function dismissChallenge(uint256 _outputIndex, address _challenger, address _asserter, bytes32 _outputRoot, bytes32 _publicInputHash) returns()
func (_MockColosseum *MockColosseumSession) DismissChallenge(_outputIndex *big.Int, _challenger common.Address, _asserter common.Address, _outputRoot [32]byte, _publicInputHash [32]byte) (*types.Transaction, error) {
	return _MockColosseum.Contract.DismissChallenge(&_MockColosseum.TransactOpts, _outputIndex, _challenger, _asserter, _outputRoot, _publicInputHash)
}

// DismissChallenge is a paid mutator transaction binding the contract method 0x62fc00db.
//
// Solidity: function dismissChallenge(uint256 _outputIndex, address _challenger, address _asserter, bytes32 _outputRoot, bytes32 _publicInputHash) returns()
func (_MockColosseum *MockColosseumTransactorSession) DismissChallenge(_outputIndex *big.Int, _challenger common.Address, _asserter common.Address, _outputRoot [32]byte, _publicInputHash [32]byte) (*types.Transaction, error) {
	return _MockColosseum.Contract.DismissChallenge(&_MockColosseum.TransactOpts, _outputIndex, _challenger, _asserter, _outputRoot, _publicInputHash)
}

// ForceDeleteOutput is a paid mutator transaction binding the contract method 0xe39a219c.
//
// Solidity: function forceDeleteOutput(uint256 _outputIndex) returns()
func (_MockColosseum *MockColosseumTransactor) ForceDeleteOutput(opts *bind.TransactOpts, _outputIndex *big.Int) (*types.Transaction, error) {
	return _MockColosseum.contract.Transact(opts, "forceDeleteOutput", _outputIndex)
}

// ForceDeleteOutput is a paid mutator transaction binding the contract method 0xe39a219c.
//
// Solidity: function forceDeleteOutput(uint256 _outputIndex) returns()
func (_MockColosseum *MockColosseumSession) ForceDeleteOutput(_outputIndex *big.Int) (*types.Transaction, error) {
	return _MockColosseum.Contract.ForceDeleteOutput(&_MockColosseum.TransactOpts, _outputIndex)
}

// ForceDeleteOutput is a paid mutator transaction binding the contract method 0xe39a219c.
//
// Solidity: function forceDeleteOutput(uint256 _outputIndex) returns()
func (_MockColosseum *MockColosseumTransactorSession) ForceDeleteOutput(_outputIndex *big.Int) (*types.Transaction, error) {
	return _MockColosseum.Contract.ForceDeleteOutput(&_MockColosseum.TransactOpts, _outputIndex)
}

// Initialize is a paid mutator transaction binding the contract method 0x6fe0e559.
//
// Solidity: function initialize(uint256[] _segmentsLengths) returns()
func (_MockColosseum *MockColosseumTransactor) Initialize(opts *bind.TransactOpts, _segmentsLengths []*big.Int) (*types.Transaction, error) {
	return _MockColosseum.contract.Transact(opts, "initialize", _segmentsLengths)
}

// Initialize is a paid mutator transaction binding the contract method 0x6fe0e559.
//
// Solidity: function initialize(uint256[] _segmentsLengths) returns()
func (_MockColosseum *MockColosseumSession) Initialize(_segmentsLengths []*big.Int) (*types.Transaction, error) {
	return _MockColosseum.Contract.Initialize(&_MockColosseum.TransactOpts, _segmentsLengths)
}

// Initialize is a paid mutator transaction binding the contract method 0x6fe0e559.
//
// Solidity: function initialize(uint256[] _segmentsLengths) returns()
func (_MockColosseum *MockColosseumTransactorSession) Initialize(_segmentsLengths []*big.Int) (*types.Transaction, error) {
	return _MockColosseum.Contract.Initialize(&_MockColosseum.TransactOpts, _segmentsLengths)
}

// ProveFaultWithZkEvm is a paid mutator transaction binding the contract method 0xcbdd2814.
//
// Solidity: function proveFaultWithZkEvm(uint256 _outputIndex, uint256 _pos, (((bytes32,bytes32,bytes32,bytes32,bytes32),(bytes32,bytes32,bytes32,bytes32,bytes32),(bytes32,bytes32,uint64,uint64,uint64,uint256,bytes32,bytes32,bytes32,bytes32[],uint64,uint64,bytes32),(bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes32,bytes32,bytes[]),uint256[],uint256[]) _zkEvmProof) returns()
func (_MockColosseum *MockColosseumTransactor) ProveFaultWithZkEvm(opts *bind.TransactOpts, _outputIndex *big.Int, _pos *big.Int, _zkEvmProof TypesZkEvmProof) (*types.Transaction, error) {
	return _MockColosseum.contract.Transact(opts, "proveFaultWithZkEvm", _outputIndex, _pos, _zkEvmProof)
}

// ProveFaultWithZkEvm is a paid mutator transaction binding the contract method 0xcbdd2814.
//
// Solidity: function proveFaultWithZkEvm(uint256 _outputIndex, uint256 _pos, (((bytes32,bytes32,bytes32,bytes32,bytes32),(bytes32,bytes32,bytes32,bytes32,bytes32),(bytes32,bytes32,uint64,uint64,uint64,uint256,bytes32,bytes32,bytes32,bytes32[],uint64,uint64,bytes32),(bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes32,bytes32,bytes[]),uint256[],uint256[]) _zkEvmProof) returns()
func (_MockColosseum *MockColosseumSession) ProveFaultWithZkEvm(_outputIndex *big.Int, _pos *big.Int, _zkEvmProof TypesZkEvmProof) (*types.Transaction, error) {
	return _MockColosseum.Contract.ProveFaultWithZkEvm(&_MockColosseum.TransactOpts, _outputIndex, _pos, _zkEvmProof)
}

// ProveFaultWithZkEvm is a paid mutator transaction binding the contract method 0xcbdd2814.
//
// Solidity: function proveFaultWithZkEvm(uint256 _outputIndex, uint256 _pos, (((bytes32,bytes32,bytes32,bytes32,bytes32),(bytes32,bytes32,bytes32,bytes32,bytes32),(bytes32,bytes32,uint64,uint64,uint64,uint256,bytes32,bytes32,bytes32,bytes32[],uint64,uint64,bytes32),(bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes32,bytes32,bytes[]),uint256[],uint256[]) _zkEvmProof) returns()
func (_MockColosseum *MockColosseumTransactorSession) ProveFaultWithZkEvm(_outputIndex *big.Int, _pos *big.Int, _zkEvmProof TypesZkEvmProof) (*types.Transaction, error) {
	return _MockColosseum.Contract.ProveFaultWithZkEvm(&_MockColosseum.TransactOpts, _outputIndex, _pos, _zkEvmProof)
}

// ProveFaultWithZkVm is a paid mutator transaction binding the contract method 0x04126dd0.
//
// Solidity: function proveFaultWithZkVm(uint256 _outputIndex, uint256 _pos, (bytes32,bytes,bytes) _zkVmProof) returns()
func (_MockColosseum *MockColosseumTransactor) ProveFaultWithZkVm(opts *bind.TransactOpts, _outputIndex *big.Int, _pos *big.Int, _zkVmProof TypesZkVmProof) (*types.Transaction, error) {
	return _MockColosseum.contract.Transact(opts, "proveFaultWithZkVm", _outputIndex, _pos, _zkVmProof)
}

// ProveFaultWithZkVm is a paid mutator transaction binding the contract method 0x04126dd0.
//
// Solidity: function proveFaultWithZkVm(uint256 _outputIndex, uint256 _pos, (bytes32,bytes,bytes) _zkVmProof) returns()
func (_MockColosseum *MockColosseumSession) ProveFaultWithZkVm(_outputIndex *big.Int, _pos *big.Int, _zkVmProof TypesZkVmProof) (*types.Transaction, error) {
	return _MockColosseum.Contract.ProveFaultWithZkVm(&_MockColosseum.TransactOpts, _outputIndex, _pos, _zkVmProof)
}

// ProveFaultWithZkVm is a paid mutator transaction binding the contract method 0x04126dd0.
//
// Solidity: function proveFaultWithZkVm(uint256 _outputIndex, uint256 _pos, (bytes32,bytes,bytes) _zkVmProof) returns()
func (_MockColosseum *MockColosseumTransactorSession) ProveFaultWithZkVm(_outputIndex *big.Int, _pos *big.Int, _zkVmProof TypesZkVmProof) (*types.Transaction, error) {
	return _MockColosseum.Contract.ProveFaultWithZkVm(&_MockColosseum.TransactOpts, _outputIndex, _pos, _zkVmProof)
}

// SetL1Head is a paid mutator transaction binding the contract method 0x240226e7.
//
// Solidity: function setL1Head(uint256 _outputIndex, address _challenger, bytes32 _l1Head) returns()
func (_MockColosseum *MockColosseumTransactor) SetL1Head(opts *bind.TransactOpts, _outputIndex *big.Int, _challenger common.Address, _l1Head [32]byte) (*types.Transaction, error) {
	return _MockColosseum.contract.Transact(opts, "setL1Head", _outputIndex, _challenger, _l1Head)
}

// SetL1Head is a paid mutator transaction binding the contract method 0x240226e7.
//
// Solidity: function setL1Head(uint256 _outputIndex, address _challenger, bytes32 _l1Head) returns()
func (_MockColosseum *MockColosseumSession) SetL1Head(_outputIndex *big.Int, _challenger common.Address, _l1Head [32]byte) (*types.Transaction, error) {
	return _MockColosseum.Contract.SetL1Head(&_MockColosseum.TransactOpts, _outputIndex, _challenger, _l1Head)
}

// SetL1Head is a paid mutator transaction binding the contract method 0x240226e7.
//
// Solidity: function setL1Head(uint256 _outputIndex, address _challenger, bytes32 _l1Head) returns()
func (_MockColosseum *MockColosseumTransactorSession) SetL1Head(_outputIndex *big.Int, _challenger common.Address, _l1Head [32]byte) (*types.Transaction, error) {
	return _MockColosseum.Contract.SetL1Head(&_MockColosseum.TransactOpts, _outputIndex, _challenger, _l1Head)
}

// MockColosseumBisectedIterator is returned from FilterBisected and is used to iterate over the raw logs and unpacked data for Bisected events raised by the MockColosseum contract.
type MockColosseumBisectedIterator struct {
	Event *MockColosseumBisected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockColosseumBisectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockColosseumBisected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockColosseumBisected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockColosseumBisectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockColosseumBisectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockColosseumBisected represents a Bisected event raised by the MockColosseum contract.
type MockColosseumBisected struct {
	OutputIndex *big.Int
	Challenger  common.Address
	Turn        uint8
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBisected is a free log retrieval operation binding the contract event 0xcadef6622777415b0589e491bdbf6baf11242f676f77055fd03bf1658c17a145.
//
// Solidity: event Bisected(uint256 indexed outputIndex, address indexed challenger, uint8 turn, uint256 timestamp)
func (_MockColosseum *MockColosseumFilterer) FilterBisected(opts *bind.FilterOpts, outputIndex []*big.Int, challenger []common.Address) (*MockColosseumBisectedIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _MockColosseum.contract.FilterLogs(opts, "Bisected", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return &MockColosseumBisectedIterator{contract: _MockColosseum.contract, event: "Bisected", logs: logs, sub: sub}, nil
}

// WatchBisected is a free log subscription operation binding the contract event 0xcadef6622777415b0589e491bdbf6baf11242f676f77055fd03bf1658c17a145.
//
// Solidity: event Bisected(uint256 indexed outputIndex, address indexed challenger, uint8 turn, uint256 timestamp)
func (_MockColosseum *MockColosseumFilterer) WatchBisected(opts *bind.WatchOpts, sink chan<- *MockColosseumBisected, outputIndex []*big.Int, challenger []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _MockColosseum.contract.WatchLogs(opts, "Bisected", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockColosseumBisected)
				if err := _MockColosseum.contract.UnpackLog(event, "Bisected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBisected is a log parse operation binding the contract event 0xcadef6622777415b0589e491bdbf6baf11242f676f77055fd03bf1658c17a145.
//
// Solidity: event Bisected(uint256 indexed outputIndex, address indexed challenger, uint8 turn, uint256 timestamp)
func (_MockColosseum *MockColosseumFilterer) ParseBisected(log types.Log) (*MockColosseumBisected, error) {
	event := new(MockColosseumBisected)
	if err := _MockColosseum.contract.UnpackLog(event, "Bisected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockColosseumChallengeCanceledIterator is returned from FilterChallengeCanceled and is used to iterate over the raw logs and unpacked data for ChallengeCanceled events raised by the MockColosseum contract.
type MockColosseumChallengeCanceledIterator struct {
	Event *MockColosseumChallengeCanceled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockColosseumChallengeCanceledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockColosseumChallengeCanceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockColosseumChallengeCanceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockColosseumChallengeCanceledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockColosseumChallengeCanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockColosseumChallengeCanceled represents a ChallengeCanceled event raised by the MockColosseum contract.
type MockColosseumChallengeCanceled struct {
	OutputIndex *big.Int
	Challenger  common.Address
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterChallengeCanceled is a free log retrieval operation binding the contract event 0x6f3468a095154788e69ed719ee418416c1e338ac2348ccb3531bb97a0ed6ed9d.
//
// Solidity: event ChallengeCanceled(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_MockColosseum *MockColosseumFilterer) FilterChallengeCanceled(opts *bind.FilterOpts, outputIndex []*big.Int, challenger []common.Address) (*MockColosseumChallengeCanceledIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _MockColosseum.contract.FilterLogs(opts, "ChallengeCanceled", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return &MockColosseumChallengeCanceledIterator{contract: _MockColosseum.contract, event: "ChallengeCanceled", logs: logs, sub: sub}, nil
}

// WatchChallengeCanceled is a free log subscription operation binding the contract event 0x6f3468a095154788e69ed719ee418416c1e338ac2348ccb3531bb97a0ed6ed9d.
//
// Solidity: event ChallengeCanceled(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_MockColosseum *MockColosseumFilterer) WatchChallengeCanceled(opts *bind.WatchOpts, sink chan<- *MockColosseumChallengeCanceled, outputIndex []*big.Int, challenger []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _MockColosseum.contract.WatchLogs(opts, "ChallengeCanceled", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockColosseumChallengeCanceled)
				if err := _MockColosseum.contract.UnpackLog(event, "ChallengeCanceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeCanceled is a log parse operation binding the contract event 0x6f3468a095154788e69ed719ee418416c1e338ac2348ccb3531bb97a0ed6ed9d.
//
// Solidity: event ChallengeCanceled(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_MockColosseum *MockColosseumFilterer) ParseChallengeCanceled(log types.Log) (*MockColosseumChallengeCanceled, error) {
	event := new(MockColosseumChallengeCanceled)
	if err := _MockColosseum.contract.UnpackLog(event, "ChallengeCanceled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockColosseumChallengeCreatedIterator is returned from FilterChallengeCreated and is used to iterate over the raw logs and unpacked data for ChallengeCreated events raised by the MockColosseum contract.
type MockColosseumChallengeCreatedIterator struct {
	Event *MockColosseumChallengeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockColosseumChallengeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockColosseumChallengeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockColosseumChallengeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockColosseumChallengeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockColosseumChallengeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockColosseumChallengeCreated represents a ChallengeCreated event raised by the MockColosseum contract.
type MockColosseumChallengeCreated struct {
	OutputIndex *big.Int
	Asserter    common.Address
	Challenger  common.Address
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterChallengeCreated is a free log retrieval operation binding the contract event 0xd2f7931a802085b3d0234d4c320ce7ee0041da96678ce2bf5c93e8d3d7e65f52.
//
// Solidity: event ChallengeCreated(uint256 indexed outputIndex, address indexed asserter, address indexed challenger, uint256 timestamp)
func (_MockColosseum *MockColosseumFilterer) FilterChallengeCreated(opts *bind.FilterOpts, outputIndex []*big.Int, asserter []common.Address, challenger []common.Address) (*MockColosseumChallengeCreatedIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var asserterRule []interface{}
	for _, asserterItem := range asserter {
		asserterRule = append(asserterRule, asserterItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _MockColosseum.contract.FilterLogs(opts, "ChallengeCreated", outputIndexRule, asserterRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return &MockColosseumChallengeCreatedIterator{contract: _MockColosseum.contract, event: "ChallengeCreated", logs: logs, sub: sub}, nil
}

// WatchChallengeCreated is a free log subscription operation binding the contract event 0xd2f7931a802085b3d0234d4c320ce7ee0041da96678ce2bf5c93e8d3d7e65f52.
//
// Solidity: event ChallengeCreated(uint256 indexed outputIndex, address indexed asserter, address indexed challenger, uint256 timestamp)
func (_MockColosseum *MockColosseumFilterer) WatchChallengeCreated(opts *bind.WatchOpts, sink chan<- *MockColosseumChallengeCreated, outputIndex []*big.Int, asserter []common.Address, challenger []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var asserterRule []interface{}
	for _, asserterItem := range asserter {
		asserterRule = append(asserterRule, asserterItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _MockColosseum.contract.WatchLogs(opts, "ChallengeCreated", outputIndexRule, asserterRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockColosseumChallengeCreated)
				if err := _MockColosseum.contract.UnpackLog(event, "ChallengeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeCreated is a log parse operation binding the contract event 0xd2f7931a802085b3d0234d4c320ce7ee0041da96678ce2bf5c93e8d3d7e65f52.
//
// Solidity: event ChallengeCreated(uint256 indexed outputIndex, address indexed asserter, address indexed challenger, uint256 timestamp)
func (_MockColosseum *MockColosseumFilterer) ParseChallengeCreated(log types.Log) (*MockColosseumChallengeCreated, error) {
	event := new(MockColosseumChallengeCreated)
	if err := _MockColosseum.contract.UnpackLog(event, "ChallengeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockColosseumChallengeDismissedIterator is returned from FilterChallengeDismissed and is used to iterate over the raw logs and unpacked data for ChallengeDismissed events raised by the MockColosseum contract.
type MockColosseumChallengeDismissedIterator struct {
	Event *MockColosseumChallengeDismissed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockColosseumChallengeDismissedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockColosseumChallengeDismissed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockColosseumChallengeDismissed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockColosseumChallengeDismissedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockColosseumChallengeDismissedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockColosseumChallengeDismissed represents a ChallengeDismissed event raised by the MockColosseum contract.
type MockColosseumChallengeDismissed struct {
	OutputIndex *big.Int
	Challenger  common.Address
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterChallengeDismissed is a free log retrieval operation binding the contract event 0xdca9fa9b51a5ba03938c6a0cd5489011630370fc481ef2b0cb771ad904a73053.
//
// Solidity: event ChallengeDismissed(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_MockColosseum *MockColosseumFilterer) FilterChallengeDismissed(opts *bind.FilterOpts, outputIndex []*big.Int, challenger []common.Address) (*MockColosseumChallengeDismissedIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _MockColosseum.contract.FilterLogs(opts, "ChallengeDismissed", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return &MockColosseumChallengeDismissedIterator{contract: _MockColosseum.contract, event: "ChallengeDismissed", logs: logs, sub: sub}, nil
}

// WatchChallengeDismissed is a free log subscription operation binding the contract event 0xdca9fa9b51a5ba03938c6a0cd5489011630370fc481ef2b0cb771ad904a73053.
//
// Solidity: event ChallengeDismissed(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_MockColosseum *MockColosseumFilterer) WatchChallengeDismissed(opts *bind.WatchOpts, sink chan<- *MockColosseumChallengeDismissed, outputIndex []*big.Int, challenger []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _MockColosseum.contract.WatchLogs(opts, "ChallengeDismissed", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockColosseumChallengeDismissed)
				if err := _MockColosseum.contract.UnpackLog(event, "ChallengeDismissed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeDismissed is a log parse operation binding the contract event 0xdca9fa9b51a5ba03938c6a0cd5489011630370fc481ef2b0cb771ad904a73053.
//
// Solidity: event ChallengeDismissed(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_MockColosseum *MockColosseumFilterer) ParseChallengeDismissed(log types.Log) (*MockColosseumChallengeDismissed, error) {
	event := new(MockColosseumChallengeDismissed)
	if err := _MockColosseum.contract.UnpackLog(event, "ChallengeDismissed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockColosseumChallengerTimedOutIterator is returned from FilterChallengerTimedOut and is used to iterate over the raw logs and unpacked data for ChallengerTimedOut events raised by the MockColosseum contract.
type MockColosseumChallengerTimedOutIterator struct {
	Event *MockColosseumChallengerTimedOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockColosseumChallengerTimedOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockColosseumChallengerTimedOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockColosseumChallengerTimedOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockColosseumChallengerTimedOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockColosseumChallengerTimedOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockColosseumChallengerTimedOut represents a ChallengerTimedOut event raised by the MockColosseum contract.
type MockColosseumChallengerTimedOut struct {
	OutputIndex *big.Int
	Challenger  common.Address
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterChallengerTimedOut is a free log retrieval operation binding the contract event 0xbf4506ef5d06ecb6168f37bc9e69dd473089eb9e3f2675322d01b4d466cff051.
//
// Solidity: event ChallengerTimedOut(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_MockColosseum *MockColosseumFilterer) FilterChallengerTimedOut(opts *bind.FilterOpts, outputIndex []*big.Int, challenger []common.Address) (*MockColosseumChallengerTimedOutIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _MockColosseum.contract.FilterLogs(opts, "ChallengerTimedOut", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return &MockColosseumChallengerTimedOutIterator{contract: _MockColosseum.contract, event: "ChallengerTimedOut", logs: logs, sub: sub}, nil
}

// WatchChallengerTimedOut is a free log subscription operation binding the contract event 0xbf4506ef5d06ecb6168f37bc9e69dd473089eb9e3f2675322d01b4d466cff051.
//
// Solidity: event ChallengerTimedOut(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_MockColosseum *MockColosseumFilterer) WatchChallengerTimedOut(opts *bind.WatchOpts, sink chan<- *MockColosseumChallengerTimedOut, outputIndex []*big.Int, challenger []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _MockColosseum.contract.WatchLogs(opts, "ChallengerTimedOut", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockColosseumChallengerTimedOut)
				if err := _MockColosseum.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengerTimedOut is a log parse operation binding the contract event 0xbf4506ef5d06ecb6168f37bc9e69dd473089eb9e3f2675322d01b4d466cff051.
//
// Solidity: event ChallengerTimedOut(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_MockColosseum *MockColosseumFilterer) ParseChallengerTimedOut(log types.Log) (*MockColosseumChallengerTimedOut, error) {
	event := new(MockColosseumChallengerTimedOut)
	if err := _MockColosseum.contract.UnpackLog(event, "ChallengerTimedOut", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockColosseumInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the MockColosseum contract.
type MockColosseumInitializedIterator struct {
	Event *MockColosseumInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockColosseumInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockColosseumInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockColosseumInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockColosseumInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockColosseumInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockColosseumInitialized represents a Initialized event raised by the MockColosseum contract.
type MockColosseumInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_MockColosseum *MockColosseumFilterer) FilterInitialized(opts *bind.FilterOpts) (*MockColosseumInitializedIterator, error) {

	logs, sub, err := _MockColosseum.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &MockColosseumInitializedIterator{contract: _MockColosseum.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_MockColosseum *MockColosseumFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *MockColosseumInitialized) (event.Subscription, error) {

	logs, sub, err := _MockColosseum.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockColosseumInitialized)
				if err := _MockColosseum.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_MockColosseum *MockColosseumFilterer) ParseInitialized(log types.Log) (*MockColosseumInitialized, error) {
	event := new(MockColosseumInitialized)
	if err := _MockColosseum.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockColosseumOutputForceDeletedIterator is returned from FilterOutputForceDeleted and is used to iterate over the raw logs and unpacked data for OutputForceDeleted events raised by the MockColosseum contract.
type MockColosseumOutputForceDeletedIterator struct {
	Event *MockColosseumOutputForceDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockColosseumOutputForceDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockColosseumOutputForceDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockColosseumOutputForceDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockColosseumOutputForceDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockColosseumOutputForceDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockColosseumOutputForceDeleted represents a OutputForceDeleted event raised by the MockColosseum contract.
type MockColosseumOutputForceDeleted struct {
	OutputIndex *big.Int
	Asseter     common.Address
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterOutputForceDeleted is a free log retrieval operation binding the contract event 0xa620f04b65b1d538481626bf41dc5ee321b5c48e0cc1a7daae213cf7c254b54e.
//
// Solidity: event OutputForceDeleted(uint256 indexed outputIndex, address indexed asseter, uint256 timestamp)
func (_MockColosseum *MockColosseumFilterer) FilterOutputForceDeleted(opts *bind.FilterOpts, outputIndex []*big.Int, asseter []common.Address) (*MockColosseumOutputForceDeletedIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var asseterRule []interface{}
	for _, asseterItem := range asseter {
		asseterRule = append(asseterRule, asseterItem)
	}

	logs, sub, err := _MockColosseum.contract.FilterLogs(opts, "OutputForceDeleted", outputIndexRule, asseterRule)
	if err != nil {
		return nil, err
	}
	return &MockColosseumOutputForceDeletedIterator{contract: _MockColosseum.contract, event: "OutputForceDeleted", logs: logs, sub: sub}, nil
}

// WatchOutputForceDeleted is a free log subscription operation binding the contract event 0xa620f04b65b1d538481626bf41dc5ee321b5c48e0cc1a7daae213cf7c254b54e.
//
// Solidity: event OutputForceDeleted(uint256 indexed outputIndex, address indexed asseter, uint256 timestamp)
func (_MockColosseum *MockColosseumFilterer) WatchOutputForceDeleted(opts *bind.WatchOpts, sink chan<- *MockColosseumOutputForceDeleted, outputIndex []*big.Int, asseter []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var asseterRule []interface{}
	for _, asseterItem := range asseter {
		asseterRule = append(asseterRule, asseterItem)
	}

	logs, sub, err := _MockColosseum.contract.WatchLogs(opts, "OutputForceDeleted", outputIndexRule, asseterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockColosseumOutputForceDeleted)
				if err := _MockColosseum.contract.UnpackLog(event, "OutputForceDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOutputForceDeleted is a log parse operation binding the contract event 0xa620f04b65b1d538481626bf41dc5ee321b5c48e0cc1a7daae213cf7c254b54e.
//
// Solidity: event OutputForceDeleted(uint256 indexed outputIndex, address indexed asseter, uint256 timestamp)
func (_MockColosseum *MockColosseumFilterer) ParseOutputForceDeleted(log types.Log) (*MockColosseumOutputForceDeleted, error) {
	event := new(MockColosseumOutputForceDeleted)
	if err := _MockColosseum.contract.UnpackLog(event, "OutputForceDeleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockColosseumProvenIterator is returned from FilterProven and is used to iterate over the raw logs and unpacked data for Proven events raised by the MockColosseum contract.
type MockColosseumProvenIterator struct {
	Event *MockColosseumProven // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockColosseumProvenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockColosseumProven)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockColosseumProven)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockColosseumProvenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockColosseumProvenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockColosseumProven represents a Proven event raised by the MockColosseum contract.
type MockColosseumProven struct {
	OutputIndex *big.Int
	Challenger  common.Address
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterProven is a free log retrieval operation binding the contract event 0x0431864ed2609170587bbc7c198abd8caee4c55943dfb16fd42ec6f59c91c5f7.
//
// Solidity: event Proven(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_MockColosseum *MockColosseumFilterer) FilterProven(opts *bind.FilterOpts, outputIndex []*big.Int, challenger []common.Address) (*MockColosseumProvenIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _MockColosseum.contract.FilterLogs(opts, "Proven", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return &MockColosseumProvenIterator{contract: _MockColosseum.contract, event: "Proven", logs: logs, sub: sub}, nil
}

// WatchProven is a free log subscription operation binding the contract event 0x0431864ed2609170587bbc7c198abd8caee4c55943dfb16fd42ec6f59c91c5f7.
//
// Solidity: event Proven(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_MockColosseum *MockColosseumFilterer) WatchProven(opts *bind.WatchOpts, sink chan<- *MockColosseumProven, outputIndex []*big.Int, challenger []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _MockColosseum.contract.WatchLogs(opts, "Proven", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockColosseumProven)
				if err := _MockColosseum.contract.UnpackLog(event, "Proven", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProven is a log parse operation binding the contract event 0x0431864ed2609170587bbc7c198abd8caee4c55943dfb16fd42ec6f59c91c5f7.
//
// Solidity: event Proven(uint256 indexed outputIndex, address indexed challenger, uint256 timestamp)
func (_MockColosseum *MockColosseumFilterer) ParseProven(log types.Log) (*MockColosseumProven, error) {
	event := new(MockColosseumProven)
	if err := _MockColosseum.contract.UnpackLog(event, "Proven", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockColosseumReadyToProveIterator is returned from FilterReadyToProve and is used to iterate over the raw logs and unpacked data for ReadyToProve events raised by the MockColosseum contract.
type MockColosseumReadyToProveIterator struct {
	Event *MockColosseumReadyToProve // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockColosseumReadyToProveIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockColosseumReadyToProve)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockColosseumReadyToProve)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockColosseumReadyToProveIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockColosseumReadyToProveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockColosseumReadyToProve represents a ReadyToProve event raised by the MockColosseum contract.
type MockColosseumReadyToProve struct {
	OutputIndex *big.Int
	Challenger  common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterReadyToProve is a free log retrieval operation binding the contract event 0x5c4528cbb38a169d24837617d3fd3d5c70a47769a4e9af6f384720b359b716c8.
//
// Solidity: event ReadyToProve(uint256 indexed outputIndex, address indexed challenger)
func (_MockColosseum *MockColosseumFilterer) FilterReadyToProve(opts *bind.FilterOpts, outputIndex []*big.Int, challenger []common.Address) (*MockColosseumReadyToProveIterator, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _MockColosseum.contract.FilterLogs(opts, "ReadyToProve", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return &MockColosseumReadyToProveIterator{contract: _MockColosseum.contract, event: "ReadyToProve", logs: logs, sub: sub}, nil
}

// WatchReadyToProve is a free log subscription operation binding the contract event 0x5c4528cbb38a169d24837617d3fd3d5c70a47769a4e9af6f384720b359b716c8.
//
// Solidity: event ReadyToProve(uint256 indexed outputIndex, address indexed challenger)
func (_MockColosseum *MockColosseumFilterer) WatchReadyToProve(opts *bind.WatchOpts, sink chan<- *MockColosseumReadyToProve, outputIndex []*big.Int, challenger []common.Address) (event.Subscription, error) {

	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}

	logs, sub, err := _MockColosseum.contract.WatchLogs(opts, "ReadyToProve", outputIndexRule, challengerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockColosseumReadyToProve)
				if err := _MockColosseum.contract.UnpackLog(event, "ReadyToProve", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReadyToProve is a log parse operation binding the contract event 0x5c4528cbb38a169d24837617d3fd3d5c70a47769a4e9af6f384720b359b716c8.
//
// Solidity: event ReadyToProve(uint256 indexed outputIndex, address indexed challenger)
func (_MockColosseum *MockColosseumFilterer) ParseReadyToProve(log types.Log) (*MockColosseumReadyToProve, error) {
	event := new(MockColosseumReadyToProve)
	if err := _MockColosseum.contract.UnpackLog(event, "ReadyToProve", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
