// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// KromaMintableERC721MetaData contains all meta data concerning the KromaMintableERC721 contract.
var KromaMintableERC721MetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_bridge\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_remoteChainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_remoteToken\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_name\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"BRIDGE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"REMOTE_CHAIN_ID\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"REMOTE_TOKEN\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"baseTokenURI\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"bridge\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"burn\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getApproved\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isApprovedForAll\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ownerOf\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"remoteChainId\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"remoteToken\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"safeMint\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"safeTransferFrom\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"safeTransferFrom\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setApprovalForAll\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"supportsInterface\",\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"tokenByIndex\",\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"tokenOfOwnerByIndex\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"tokenURI\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"version\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"approved\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ApprovalForAll\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Burn\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Mint\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Transfer\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"}],\"anonymous\":false}]",
	Bin: "0x60e06040523480156200001157600080fd5b5060405162002e9f38038062002e9f83398101604081905262000034916200068e565b81816000620000448382620007b7565b506001620000538282620007b7565b5050506001600160a01b038516620000cb5760405162461bcd60e51b815260206004820152603060248201527f4b726f6d614d696e7461626c654552433732313a206272696467652063616e6e60448201526f6f74206265206164647265737328302960801b60648201526084015b60405180910390fd5b83600003620001435760405162461bcd60e51b815260206004820152603360248201527f4b726f6d614d696e7461626c654552433732313a2072656d6f7465206368616960448201527f6e2069642063616e6e6f74206265207a65726f000000000000000000000000006064820152608401620000c2565b6001600160a01b038316620001c15760405162461bcd60e51b815260206004820152603660248201527f4b726f6d614d696e7461626c654552433732313a2072656d6f746520746f6b6560448201527f6e2063616e6e6f742062652061646472657373283029000000000000000000006064820152608401620000c2565b60808490526001600160a01b0383811660a081905290861660c052620001f590601462000249602090811b62000d8517901c565b6200020b856200040960201b62000fae1760201c565b6040516020016200021e92919062000883565b604051602081830303815290604052600a90816200023d9190620007b7565b5050505050506200097a565b606060006200025a8360026200090d565b620002679060026200092f565b6001600160401b03811115620002815762000281620005b4565b6040519080825280601f01601f191660200182016040528015620002ac576020820181803683370190505b509050600360fc1b81600081518110620002ca57620002ca6200094a565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110620002fc57620002fc6200094a565b60200101906001600160f81b031916908160001a9053506000620003228460026200090d565b6200032f9060016200092f565b90505b6001811115620003b1576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106200036757620003676200094a565b1a60f81b8282815181106200038057620003806200094a565b60200101906001600160f81b031916908160001a90535060049490941c93620003a98162000960565b905062000332565b508315620004025760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401620000c2565b9392505050565b606060006200042383620004ad60201b6200106c1760201c565b60010190506000816001600160401b03811115620004455762000445620005b4565b6040519080825280601f01601f19166020018201604052801562000470576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846200047a57509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310620004f7577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831062000524576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106200054357662386f26fc10000830492506010015b6305f5e10083106200055c576305f5e100830492506008015b61271083106200057157612710830492506004015b6064831062000584576064830492506002015b600a831062000591576001015b92915050565b80516001600160a01b0381168114620005af57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620005e7578181015183820152602001620005cd565b83811115620005f7576000848401525b50505050565b600082601f8301126200060f57600080fd5b81516001600160401b03808211156200062c576200062c620005b4565b604051601f8301601f19908116603f01168101908282118183101715620006575762000657620005b4565b816040528381528660208588010111156200067157600080fd5b62000684846020830160208901620005ca565b9695505050505050565b600080600080600060a08688031215620006a757600080fd5b620006b28662000597565b945060208601519350620006c96040870162000597565b60608701519093506001600160401b0380821115620006e757600080fd5b620006f589838a01620005fd565b935060808801519150808211156200070c57600080fd5b506200071b88828901620005fd565b9150509295509295909350565b600181811c908216806200073d57607f821691505b6020821081036200075e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620007b257600081815260208120601f850160051c810160208610156200078d5750805b601f850160051c820191505b81811015620007ae5782815560010162000799565b5050505b505050565b81516001600160401b03811115620007d357620007d3620005b4565b620007eb81620007e4845462000728565b8462000764565b602080601f8311600181146200082357600084156200080a5750858301515b600019600386901b1c1916600185901b178555620007ae565b600085815260208120601f198616915b82811015620008545788860151825594840194600190910190840162000833565b5085821015620008735787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6832ba3432b932bab69d60b91b815260008351620008a9816009850160208801620005ca565b600160fe1b6009918401918201528351620008cc81600a840160208801620005ca565b712f746f6b656e5552493f75696e743235363d60701b600a9290910191820152601c01949350505050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156200092a576200092a620008f7565b500290565b60008219821115620009455762000945620008f7565b500190565b634e487b7160e01b600052603260045260246000fd5b600081620009725762000972620008f7565b506000190190565b60805160a05160c0516124d2620009cd600039600081816103d50152818161046001528181610a2d0152610b1b0152600081816101e001526103af01526000818161031c01526103fb01526124d26000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c80637d1d0c5b116100ee578063c87b56dd11610097578063e78cea9211610071578063e78cea92146103d3578063e9518196146103f9578063e985e9c51461041f578063ee9a31a21461045b57600080fd5b8063c87b56dd14610392578063d547cfb7146103a5578063d6c0b2c4146103ad57600080fd5b8063a1448194116100c8578063a144819414610359578063a22cb4651461036c578063b88d4fde1461037f57600080fd5b80637d1d0c5b1461031757806395d89b411461033e5780639dc29fac1461034657600080fd5b806323b872dd1161015b5780634f6ccce7116101355780634f6ccce7146102a257806354fd4d50146102b55780636352211e146102f157806370a082311461030457600080fd5b806323b872dd146102695780632f745c591461027c57806342842e0e1461028f57600080fd5b8063081812fc1161018c578063081812fc1461022f578063095ea7b31461024257806318160ddd1461025757600080fd5b806301ffc9a7146101b3578063033964be146101db57806306fdde031461021a575b600080fd5b6101c66101c1366004611fc8565b610482565b60405190151581526020015b60405180910390f35b6102027f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101d2565b610222610531565b6040516101d2919061205b565b61020261023d36600461206e565b6105c3565b6102556102503660046120a3565b6105ea565b005b6008545b6040519081526020016101d2565b6102556102773660046120cd565b610720565b61025b61028a3660046120a3565b6107a7565b61025561029d3660046120cd565b61084f565b61025b6102b036600461206e565b61086a565b6102226040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b6102026102ff36600461206e565b61090e565b61025b610312366004612109565b610979565b61025b7f000000000000000000000000000000000000000000000000000000000000000081565b610222610a13565b6102556103543660046120a3565b610a22565b6102556103673660046120a3565b610b10565b61025561037a366004612124565b610bf3565b61025561038d36600461218f565b610c02565b6102226103a036600461206e565b610c90565b610222610cf7565b7f0000000000000000000000000000000000000000000000000000000000000000610202565b7f0000000000000000000000000000000000000000000000000000000000000000610202565b7f000000000000000000000000000000000000000000000000000000000000000061025b565b6101c661042d366004612289565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6102027f000000000000000000000000000000000000000000000000000000000000000081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007f74259ebf000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000841682148061051a57507fffffffff00000000000000000000000000000000000000000000000000000000848116908216145b8061052957506105298461114e565b949350505050565b606060008054610540906122bc565b80601f016020809104026020016040519081016040528092919081815260200182805461056c906122bc565b80156105b95780601f1061058e576101008083540402835291602001916105b9565b820191906000526020600020905b81548152906001019060200180831161059c57829003601f168201915b5050505050905090565b60006105ce826111a4565b506000908152600460205260409020546001600160a01b031690565b60006105f58261090e565b9050806001600160a01b0316836001600160a01b0316036106835760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b038216148061069f575061069f813361042d565b6107115760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260840161067a565b61071b838361120b565b505050565b61072a3382611291565b61079c5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f76656400000000000000000000000000000000000000606482015260840161067a565b61071b83838361130f565b60006107b283610979565b82106108265760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e6473000000000000000000000000000000000000000000606482015260840161067a565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61071b83838360405180602001604052806000815250610c02565b600061087560085490565b82106108e95760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e64730000000000000000000000000000000000000000606482015260840161067a565b600882815481106108fc576108fc61230f565b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806109735760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e2049440000000000000000604482015260640161067a565b92915050565b60006001600160a01b0382166109f75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e65720000000000000000000000000000000000000000000000606482015260840161067a565b506001600160a01b031660009081526003602052604090205490565b606060018054610540906122bc565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ac05760405162461bcd60e51b815260206004820152603760248201527f4b726f6d614d696e7461626c654552433732313a206f6e6c792062726964676560448201527f2063616e2063616c6c20746869732066756e6374696f6e000000000000000000606482015260840161067a565b610ac98161157b565b816001600160a01b03167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca582604051610b0491815260200190565b60405180910390a25050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bae5760405162461bcd60e51b815260206004820152603760248201527f4b726f6d614d696e7461626c654552433732313a206f6e6c792062726964676560448201527f2063616e2063616c6c20746869732066756e6374696f6e000000000000000000606482015260840161067a565b610bb88282611654565b816001600160a01b03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688582604051610b0491815260200190565b610bfe33838361166e565b5050565b610c0c3383611291565b610c7e5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f76656400000000000000000000000000000000000000606482015260840161067a565b610c8a8484848461175a565b50505050565b6060610c9b826111a4565b6000610ca56117e3565b90506000815111610cc55760405180602001604052806000815250610cf0565b80610ccf84610fae565b604051602001610ce092919061233e565b6040516020818303038152906040525b9392505050565b600a8054610d04906122bc565b80601f0160208091040260200160405190810160405280929190818152602001828054610d30906122bc565b8015610d7d5780601f10610d5257610100808354040283529160200191610d7d565b820191906000526020600020905b815481529060010190602001808311610d6057829003601f168201915b505050505081565b60606000610d9483600261239c565b610d9f9060026123d9565b67ffffffffffffffff811115610db757610db7612160565b6040519080825280601f01601f191660200182016040528015610de1576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610e1857610e1861230f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610e7b57610e7b61230f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000610eb784600261239c565b610ec29060016123d9565b90505b6001811115610f5f577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110610f0357610f0361230f565b1a60f81b828281518110610f1957610f1961230f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93610f58816123f1565b9050610ec5565b508315610cf05760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161067a565b60606000610fbb8361106c565b600101905060008167ffffffffffffffff811115610fdb57610fdb612160565b6040519080825280601f01601f191660200182016040528015611005576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461100f57509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106110b5577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106110e1576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106110ff57662386f26fc10000830492506010015b6305f5e1008310611117576305f5e100830492506008015b612710831061112b57612710830492506004015b6064831061113d576064830492506002015b600a83106109735760010192915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d630000000000000000000000000000000000000000000000000000000014806109735750610973826117f2565b6000818152600260205260409020546001600160a01b03166112085760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e2049440000000000000000604482015260640161067a565b50565b600081815260046020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03841690811790915581906112588261090e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061129d8361090e565b9050806001600160a01b0316846001600160a01b031614806112e457506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806105295750836001600160a01b03166112fd846105c3565b6001600160a01b031614949350505050565b826001600160a01b03166113228261090e565b6001600160a01b03161461139e5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e6572000000000000000000000000000000000000000000000000000000606482015260840161067a565b6001600160a01b0382166114195760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161067a565b61142683838360016118d5565b826001600160a01b03166114398261090e565b6001600160a01b0316146114b55760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e6572000000000000000000000000000000000000000000000000000000606482015260840161067a565b600081815260046020908152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001600160a01b038781168086526003855283862080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006115868261090e565b90506115968160008460016118d5565b61159f8261090e565b600083815260046020908152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001600160a01b0385168085526003845282852080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b610bfe828260405180602001604052806000815250611a11565b816001600160a01b0316836001600160a01b0316036116cf5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161067a565b6001600160a01b0383811660008181526005602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61176584848461130f565b61177184848484611a9a565b610c8a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161067a565b6060600a8054610540906122bc565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061188557507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061097357507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610973565b600181111561194c5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e736563757469766520747260448201527f616e7366657273206e6f7420737570706f727465640000000000000000000000606482015260840161067a565b816001600160a01b0385166119a8576119a381600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6119cb565b836001600160a01b0316856001600160a01b0316146119cb576119cb8582611c59565b6001600160a01b0384166119e7576119e281611cf6565b611a0a565b846001600160a01b0316846001600160a01b031614611a0a57611a0a8482611da5565b5050505050565b611a1b8383611de9565b611a286000848484611a9a565b61071b5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161067a565b60006001600160a01b0384163b15611c4e576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290611af7903390899088908890600401612426565b6020604051808303816000875af1925050508015611b50575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252611b4d91810190612462565b60015b611c03573d808015611b7e576040519150601f19603f3d011682016040523d82523d6000602084013e611b83565b606091505b508051600003611bfb5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161067a565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050610529565b506001949350505050565b60006001611c6684610979565b611c70919061247f565b600083815260076020526040902054909150808214611cc3576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090611d089060019061247f565b60008381526009602052604081205460088054939450909284908110611d3057611d3061230f565b906000526020600020015490508060088381548110611d5157611d5161230f565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611d8957611d89612496565b6001900381819060005260206000200160009055905550505050565b6000611db083610979565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b038216611e3f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161067a565b6000818152600260205260409020546001600160a01b031615611ea45760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161067a565b611eb26000838360016118d5565b6000818152600260205260409020546001600160a01b031615611f175760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161067a565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461120857600080fd5b600060208284031215611fda57600080fd5b8135610cf081611f9a565b60005b83811015612000578181015183820152602001611fe8565b83811115610c8a5750506000910152565b60008151808452612029816020860160208601611fe5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610cf06020830184612011565b60006020828403121561208057600080fd5b5035919050565b80356001600160a01b038116811461209e57600080fd5b919050565b600080604083850312156120b657600080fd5b6120bf83612087565b946020939093013593505050565b6000806000606084860312156120e257600080fd5b6120eb84612087565b92506120f960208501612087565b9150604084013590509250925092565b60006020828403121561211b57600080fd5b610cf082612087565b6000806040838503121561213757600080fd5b61214083612087565b91506020830135801515811461215557600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080600080608085870312156121a557600080fd5b6121ae85612087565b93506121bc60208601612087565b925060408501359150606085013567ffffffffffffffff808211156121e057600080fd5b818701915087601f8301126121f457600080fd5b81358181111561220657612206612160565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561224c5761224c612160565b816040528281528a602084870101111561226557600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561229c57600080fd5b6122a583612087565b91506122b360208401612087565b90509250929050565b600181811c908216806122d057607f821691505b602082108103612309577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008351612350818460208801611fe5565b835190830190612364818360208801611fe5565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156123d4576123d461236d565b500290565b600082198211156123ec576123ec61236d565b500190565b6000816124005761240061236d565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60006001600160a01b038087168352808616602084015250836040830152608060608301526124586080830184612011565b9695505050505050565b60006020828403121561247457600080fd5b8151610cf081611f9a565b6000828210156124915761249161236d565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea164736f6c634300080f000a",
}

// KromaMintableERC721ABI is the input ABI used to generate the binding from.
// Deprecated: Use KromaMintableERC721MetaData.ABI instead.
var KromaMintableERC721ABI = KromaMintableERC721MetaData.ABI

// KromaMintableERC721Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use KromaMintableERC721MetaData.Bin instead.
var KromaMintableERC721Bin = KromaMintableERC721MetaData.Bin

// DeployKromaMintableERC721 deploys a new Ethereum contract, binding an instance of KromaMintableERC721 to it.
func DeployKromaMintableERC721(auth *bind.TransactOpts, backend bind.ContractBackend, _bridge common.Address, _remoteChainId *big.Int, _remoteToken common.Address, _name string, _symbol string) (common.Address, *types.Transaction, *KromaMintableERC721, error) {
	parsed, err := KromaMintableERC721MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(KromaMintableERC721Bin), backend, _bridge, _remoteChainId, _remoteToken, _name, _symbol)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &KromaMintableERC721{KromaMintableERC721Caller: KromaMintableERC721Caller{contract: contract}, KromaMintableERC721Transactor: KromaMintableERC721Transactor{contract: contract}, KromaMintableERC721Filterer: KromaMintableERC721Filterer{contract: contract}}, nil
}

// KromaMintableERC721 is an auto generated Go binding around an Ethereum contract.
type KromaMintableERC721 struct {
	KromaMintableERC721Caller     // Read-only binding to the contract
	KromaMintableERC721Transactor // Write-only binding to the contract
	KromaMintableERC721Filterer   // Log filterer for contract events
}

// KromaMintableERC721Caller is an auto generated read-only Go binding around an Ethereum contract.
type KromaMintableERC721Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KromaMintableERC721Transactor is an auto generated write-only Go binding around an Ethereum contract.
type KromaMintableERC721Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KromaMintableERC721Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type KromaMintableERC721Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KromaMintableERC721Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type KromaMintableERC721Session struct {
	Contract     *KromaMintableERC721 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// KromaMintableERC721CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type KromaMintableERC721CallerSession struct {
	Contract *KromaMintableERC721Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// KromaMintableERC721TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type KromaMintableERC721TransactorSession struct {
	Contract     *KromaMintableERC721Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// KromaMintableERC721Raw is an auto generated low-level Go binding around an Ethereum contract.
type KromaMintableERC721Raw struct {
	Contract *KromaMintableERC721 // Generic contract binding to access the raw methods on
}

// KromaMintableERC721CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type KromaMintableERC721CallerRaw struct {
	Contract *KromaMintableERC721Caller // Generic read-only contract binding to access the raw methods on
}

// KromaMintableERC721TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type KromaMintableERC721TransactorRaw struct {
	Contract *KromaMintableERC721Transactor // Generic write-only contract binding to access the raw methods on
}

// NewKromaMintableERC721 creates a new instance of KromaMintableERC721, bound to a specific deployed contract.
func NewKromaMintableERC721(address common.Address, backend bind.ContractBackend) (*KromaMintableERC721, error) {
	contract, err := bindKromaMintableERC721(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &KromaMintableERC721{KromaMintableERC721Caller: KromaMintableERC721Caller{contract: contract}, KromaMintableERC721Transactor: KromaMintableERC721Transactor{contract: contract}, KromaMintableERC721Filterer: KromaMintableERC721Filterer{contract: contract}}, nil
}

// NewKromaMintableERC721Caller creates a new read-only instance of KromaMintableERC721, bound to a specific deployed contract.
func NewKromaMintableERC721Caller(address common.Address, caller bind.ContractCaller) (*KromaMintableERC721Caller, error) {
	contract, err := bindKromaMintableERC721(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &KromaMintableERC721Caller{contract: contract}, nil
}

// NewKromaMintableERC721Transactor creates a new write-only instance of KromaMintableERC721, bound to a specific deployed contract.
func NewKromaMintableERC721Transactor(address common.Address, transactor bind.ContractTransactor) (*KromaMintableERC721Transactor, error) {
	contract, err := bindKromaMintableERC721(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &KromaMintableERC721Transactor{contract: contract}, nil
}

// NewKromaMintableERC721Filterer creates a new log filterer instance of KromaMintableERC721, bound to a specific deployed contract.
func NewKromaMintableERC721Filterer(address common.Address, filterer bind.ContractFilterer) (*KromaMintableERC721Filterer, error) {
	contract, err := bindKromaMintableERC721(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &KromaMintableERC721Filterer{contract: contract}, nil
}

// bindKromaMintableERC721 binds a generic wrapper to an already deployed contract.
func bindKromaMintableERC721(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := KromaMintableERC721MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KromaMintableERC721 *KromaMintableERC721Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _KromaMintableERC721.Contract.KromaMintableERC721Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KromaMintableERC721 *KromaMintableERC721Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KromaMintableERC721.Contract.KromaMintableERC721Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KromaMintableERC721 *KromaMintableERC721Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KromaMintableERC721.Contract.KromaMintableERC721Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KromaMintableERC721 *KromaMintableERC721CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _KromaMintableERC721.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KromaMintableERC721 *KromaMintableERC721TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KromaMintableERC721.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KromaMintableERC721 *KromaMintableERC721TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KromaMintableERC721.Contract.contract.Transact(opts, method, params...)
}

// BRIDGE is a free data retrieval call binding the contract method 0xee9a31a2.
//
// Solidity: function BRIDGE() view returns(address)
func (_KromaMintableERC721 *KromaMintableERC721Caller) BRIDGE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _KromaMintableERC721.contract.Call(opts, &out, "BRIDGE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BRIDGE is a free data retrieval call binding the contract method 0xee9a31a2.
//
// Solidity: function BRIDGE() view returns(address)
func (_KromaMintableERC721 *KromaMintableERC721Session) BRIDGE() (common.Address, error) {
	return _KromaMintableERC721.Contract.BRIDGE(&_KromaMintableERC721.CallOpts)
}

// BRIDGE is a free data retrieval call binding the contract method 0xee9a31a2.
//
// Solidity: function BRIDGE() view returns(address)
func (_KromaMintableERC721 *KromaMintableERC721CallerSession) BRIDGE() (common.Address, error) {
	return _KromaMintableERC721.Contract.BRIDGE(&_KromaMintableERC721.CallOpts)
}

// REMOTECHAINID is a free data retrieval call binding the contract method 0x7d1d0c5b.
//
// Solidity: function REMOTE_CHAIN_ID() view returns(uint256)
func (_KromaMintableERC721 *KromaMintableERC721Caller) REMOTECHAINID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _KromaMintableERC721.contract.Call(opts, &out, "REMOTE_CHAIN_ID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// REMOTECHAINID is a free data retrieval call binding the contract method 0x7d1d0c5b.
//
// Solidity: function REMOTE_CHAIN_ID() view returns(uint256)
func (_KromaMintableERC721 *KromaMintableERC721Session) REMOTECHAINID() (*big.Int, error) {
	return _KromaMintableERC721.Contract.REMOTECHAINID(&_KromaMintableERC721.CallOpts)
}

// REMOTECHAINID is a free data retrieval call binding the contract method 0x7d1d0c5b.
//
// Solidity: function REMOTE_CHAIN_ID() view returns(uint256)
func (_KromaMintableERC721 *KromaMintableERC721CallerSession) REMOTECHAINID() (*big.Int, error) {
	return _KromaMintableERC721.Contract.REMOTECHAINID(&_KromaMintableERC721.CallOpts)
}

// REMOTETOKEN is a free data retrieval call binding the contract method 0x033964be.
//
// Solidity: function REMOTE_TOKEN() view returns(address)
func (_KromaMintableERC721 *KromaMintableERC721Caller) REMOTETOKEN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _KromaMintableERC721.contract.Call(opts, &out, "REMOTE_TOKEN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// REMOTETOKEN is a free data retrieval call binding the contract method 0x033964be.
//
// Solidity: function REMOTE_TOKEN() view returns(address)
func (_KromaMintableERC721 *KromaMintableERC721Session) REMOTETOKEN() (common.Address, error) {
	return _KromaMintableERC721.Contract.REMOTETOKEN(&_KromaMintableERC721.CallOpts)
}

// REMOTETOKEN is a free data retrieval call binding the contract method 0x033964be.
//
// Solidity: function REMOTE_TOKEN() view returns(address)
func (_KromaMintableERC721 *KromaMintableERC721CallerSession) REMOTETOKEN() (common.Address, error) {
	return _KromaMintableERC721.Contract.REMOTETOKEN(&_KromaMintableERC721.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_KromaMintableERC721 *KromaMintableERC721Caller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _KromaMintableERC721.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_KromaMintableERC721 *KromaMintableERC721Session) BalanceOf(owner common.Address) (*big.Int, error) {
	return _KromaMintableERC721.Contract.BalanceOf(&_KromaMintableERC721.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_KromaMintableERC721 *KromaMintableERC721CallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _KromaMintableERC721.Contract.BalanceOf(&_KromaMintableERC721.CallOpts, owner)
}

// BaseTokenURI is a free data retrieval call binding the contract method 0xd547cfb7.
//
// Solidity: function baseTokenURI() view returns(string)
func (_KromaMintableERC721 *KromaMintableERC721Caller) BaseTokenURI(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _KromaMintableERC721.contract.Call(opts, &out, "baseTokenURI")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// BaseTokenURI is a free data retrieval call binding the contract method 0xd547cfb7.
//
// Solidity: function baseTokenURI() view returns(string)
func (_KromaMintableERC721 *KromaMintableERC721Session) BaseTokenURI() (string, error) {
	return _KromaMintableERC721.Contract.BaseTokenURI(&_KromaMintableERC721.CallOpts)
}

// BaseTokenURI is a free data retrieval call binding the contract method 0xd547cfb7.
//
// Solidity: function baseTokenURI() view returns(string)
func (_KromaMintableERC721 *KromaMintableERC721CallerSession) BaseTokenURI() (string, error) {
	return _KromaMintableERC721.Contract.BaseTokenURI(&_KromaMintableERC721.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_KromaMintableERC721 *KromaMintableERC721Caller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _KromaMintableERC721.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_KromaMintableERC721 *KromaMintableERC721Session) Bridge() (common.Address, error) {
	return _KromaMintableERC721.Contract.Bridge(&_KromaMintableERC721.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_KromaMintableERC721 *KromaMintableERC721CallerSession) Bridge() (common.Address, error) {
	return _KromaMintableERC721.Contract.Bridge(&_KromaMintableERC721.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_KromaMintableERC721 *KromaMintableERC721Caller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _KromaMintableERC721.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_KromaMintableERC721 *KromaMintableERC721Session) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _KromaMintableERC721.Contract.GetApproved(&_KromaMintableERC721.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_KromaMintableERC721 *KromaMintableERC721CallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _KromaMintableERC721.Contract.GetApproved(&_KromaMintableERC721.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_KromaMintableERC721 *KromaMintableERC721Caller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _KromaMintableERC721.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_KromaMintableERC721 *KromaMintableERC721Session) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _KromaMintableERC721.Contract.IsApprovedForAll(&_KromaMintableERC721.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_KromaMintableERC721 *KromaMintableERC721CallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _KromaMintableERC721.Contract.IsApprovedForAll(&_KromaMintableERC721.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_KromaMintableERC721 *KromaMintableERC721Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _KromaMintableERC721.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_KromaMintableERC721 *KromaMintableERC721Session) Name() (string, error) {
	return _KromaMintableERC721.Contract.Name(&_KromaMintableERC721.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_KromaMintableERC721 *KromaMintableERC721CallerSession) Name() (string, error) {
	return _KromaMintableERC721.Contract.Name(&_KromaMintableERC721.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_KromaMintableERC721 *KromaMintableERC721Caller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _KromaMintableERC721.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_KromaMintableERC721 *KromaMintableERC721Session) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _KromaMintableERC721.Contract.OwnerOf(&_KromaMintableERC721.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_KromaMintableERC721 *KromaMintableERC721CallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _KromaMintableERC721.Contract.OwnerOf(&_KromaMintableERC721.CallOpts, tokenId)
}

// RemoteChainId is a free data retrieval call binding the contract method 0xe9518196.
//
// Solidity: function remoteChainId() view returns(uint256)
func (_KromaMintableERC721 *KromaMintableERC721Caller) RemoteChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _KromaMintableERC721.contract.Call(opts, &out, "remoteChainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RemoteChainId is a free data retrieval call binding the contract method 0xe9518196.
//
// Solidity: function remoteChainId() view returns(uint256)
func (_KromaMintableERC721 *KromaMintableERC721Session) RemoteChainId() (*big.Int, error) {
	return _KromaMintableERC721.Contract.RemoteChainId(&_KromaMintableERC721.CallOpts)
}

// RemoteChainId is a free data retrieval call binding the contract method 0xe9518196.
//
// Solidity: function remoteChainId() view returns(uint256)
func (_KromaMintableERC721 *KromaMintableERC721CallerSession) RemoteChainId() (*big.Int, error) {
	return _KromaMintableERC721.Contract.RemoteChainId(&_KromaMintableERC721.CallOpts)
}

// RemoteToken is a free data retrieval call binding the contract method 0xd6c0b2c4.
//
// Solidity: function remoteToken() view returns(address)
func (_KromaMintableERC721 *KromaMintableERC721Caller) RemoteToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _KromaMintableERC721.contract.Call(opts, &out, "remoteToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RemoteToken is a free data retrieval call binding the contract method 0xd6c0b2c4.
//
// Solidity: function remoteToken() view returns(address)
func (_KromaMintableERC721 *KromaMintableERC721Session) RemoteToken() (common.Address, error) {
	return _KromaMintableERC721.Contract.RemoteToken(&_KromaMintableERC721.CallOpts)
}

// RemoteToken is a free data retrieval call binding the contract method 0xd6c0b2c4.
//
// Solidity: function remoteToken() view returns(address)
func (_KromaMintableERC721 *KromaMintableERC721CallerSession) RemoteToken() (common.Address, error) {
	return _KromaMintableERC721.Contract.RemoteToken(&_KromaMintableERC721.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 _interfaceId) view returns(bool)
func (_KromaMintableERC721 *KromaMintableERC721Caller) SupportsInterface(opts *bind.CallOpts, _interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _KromaMintableERC721.contract.Call(opts, &out, "supportsInterface", _interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 _interfaceId) view returns(bool)
func (_KromaMintableERC721 *KromaMintableERC721Session) SupportsInterface(_interfaceId [4]byte) (bool, error) {
	return _KromaMintableERC721.Contract.SupportsInterface(&_KromaMintableERC721.CallOpts, _interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 _interfaceId) view returns(bool)
func (_KromaMintableERC721 *KromaMintableERC721CallerSession) SupportsInterface(_interfaceId [4]byte) (bool, error) {
	return _KromaMintableERC721.Contract.SupportsInterface(&_KromaMintableERC721.CallOpts, _interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_KromaMintableERC721 *KromaMintableERC721Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _KromaMintableERC721.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_KromaMintableERC721 *KromaMintableERC721Session) Symbol() (string, error) {
	return _KromaMintableERC721.Contract.Symbol(&_KromaMintableERC721.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_KromaMintableERC721 *KromaMintableERC721CallerSession) Symbol() (string, error) {
	return _KromaMintableERC721.Contract.Symbol(&_KromaMintableERC721.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_KromaMintableERC721 *KromaMintableERC721Caller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _KromaMintableERC721.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_KromaMintableERC721 *KromaMintableERC721Session) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _KromaMintableERC721.Contract.TokenByIndex(&_KromaMintableERC721.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_KromaMintableERC721 *KromaMintableERC721CallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _KromaMintableERC721.Contract.TokenByIndex(&_KromaMintableERC721.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_KromaMintableERC721 *KromaMintableERC721Caller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _KromaMintableERC721.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_KromaMintableERC721 *KromaMintableERC721Session) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _KromaMintableERC721.Contract.TokenOfOwnerByIndex(&_KromaMintableERC721.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_KromaMintableERC721 *KromaMintableERC721CallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _KromaMintableERC721.Contract.TokenOfOwnerByIndex(&_KromaMintableERC721.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_KromaMintableERC721 *KromaMintableERC721Caller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _KromaMintableERC721.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_KromaMintableERC721 *KromaMintableERC721Session) TokenURI(tokenId *big.Int) (string, error) {
	return _KromaMintableERC721.Contract.TokenURI(&_KromaMintableERC721.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_KromaMintableERC721 *KromaMintableERC721CallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _KromaMintableERC721.Contract.TokenURI(&_KromaMintableERC721.CallOpts, tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_KromaMintableERC721 *KromaMintableERC721Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _KromaMintableERC721.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_KromaMintableERC721 *KromaMintableERC721Session) TotalSupply() (*big.Int, error) {
	return _KromaMintableERC721.Contract.TotalSupply(&_KromaMintableERC721.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_KromaMintableERC721 *KromaMintableERC721CallerSession) TotalSupply() (*big.Int, error) {
	return _KromaMintableERC721.Contract.TotalSupply(&_KromaMintableERC721.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_KromaMintableERC721 *KromaMintableERC721Caller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _KromaMintableERC721.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_KromaMintableERC721 *KromaMintableERC721Session) Version() (string, error) {
	return _KromaMintableERC721.Contract.Version(&_KromaMintableERC721.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_KromaMintableERC721 *KromaMintableERC721CallerSession) Version() (string, error) {
	return _KromaMintableERC721.Contract.Version(&_KromaMintableERC721.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_KromaMintableERC721 *KromaMintableERC721Transactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _KromaMintableERC721.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_KromaMintableERC721 *KromaMintableERC721Session) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _KromaMintableERC721.Contract.Approve(&_KromaMintableERC721.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_KromaMintableERC721 *KromaMintableERC721TransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _KromaMintableERC721.Contract.Approve(&_KromaMintableERC721.TransactOpts, to, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _from, uint256 _tokenId) returns()
func (_KromaMintableERC721 *KromaMintableERC721Transactor) Burn(opts *bind.TransactOpts, _from common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _KromaMintableERC721.contract.Transact(opts, "burn", _from, _tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _from, uint256 _tokenId) returns()
func (_KromaMintableERC721 *KromaMintableERC721Session) Burn(_from common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _KromaMintableERC721.Contract.Burn(&_KromaMintableERC721.TransactOpts, _from, _tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _from, uint256 _tokenId) returns()
func (_KromaMintableERC721 *KromaMintableERC721TransactorSession) Burn(_from common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _KromaMintableERC721.Contract.Burn(&_KromaMintableERC721.TransactOpts, _from, _tokenId)
}

// SafeMint is a paid mutator transaction binding the contract method 0xa1448194.
//
// Solidity: function safeMint(address _to, uint256 _tokenId) returns()
func (_KromaMintableERC721 *KromaMintableERC721Transactor) SafeMint(opts *bind.TransactOpts, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _KromaMintableERC721.contract.Transact(opts, "safeMint", _to, _tokenId)
}

// SafeMint is a paid mutator transaction binding the contract method 0xa1448194.
//
// Solidity: function safeMint(address _to, uint256 _tokenId) returns()
func (_KromaMintableERC721 *KromaMintableERC721Session) SafeMint(_to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _KromaMintableERC721.Contract.SafeMint(&_KromaMintableERC721.TransactOpts, _to, _tokenId)
}

// SafeMint is a paid mutator transaction binding the contract method 0xa1448194.
//
// Solidity: function safeMint(address _to, uint256 _tokenId) returns()
func (_KromaMintableERC721 *KromaMintableERC721TransactorSession) SafeMint(_to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _KromaMintableERC721.Contract.SafeMint(&_KromaMintableERC721.TransactOpts, _to, _tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_KromaMintableERC721 *KromaMintableERC721Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _KromaMintableERC721.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_KromaMintableERC721 *KromaMintableERC721Session) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _KromaMintableERC721.Contract.SafeTransferFrom(&_KromaMintableERC721.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_KromaMintableERC721 *KromaMintableERC721TransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _KromaMintableERC721.Contract.SafeTransferFrom(&_KromaMintableERC721.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_KromaMintableERC721 *KromaMintableERC721Transactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _KromaMintableERC721.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_KromaMintableERC721 *KromaMintableERC721Session) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _KromaMintableERC721.Contract.SafeTransferFrom0(&_KromaMintableERC721.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_KromaMintableERC721 *KromaMintableERC721TransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _KromaMintableERC721.Contract.SafeTransferFrom0(&_KromaMintableERC721.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_KromaMintableERC721 *KromaMintableERC721Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _KromaMintableERC721.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_KromaMintableERC721 *KromaMintableERC721Session) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _KromaMintableERC721.Contract.SetApprovalForAll(&_KromaMintableERC721.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_KromaMintableERC721 *KromaMintableERC721TransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _KromaMintableERC721.Contract.SetApprovalForAll(&_KromaMintableERC721.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_KromaMintableERC721 *KromaMintableERC721Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _KromaMintableERC721.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_KromaMintableERC721 *KromaMintableERC721Session) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _KromaMintableERC721.Contract.TransferFrom(&_KromaMintableERC721.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_KromaMintableERC721 *KromaMintableERC721TransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _KromaMintableERC721.Contract.TransferFrom(&_KromaMintableERC721.TransactOpts, from, to, tokenId)
}

// KromaMintableERC721ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the KromaMintableERC721 contract.
type KromaMintableERC721ApprovalIterator struct {
	Event *KromaMintableERC721Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KromaMintableERC721ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KromaMintableERC721Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KromaMintableERC721Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KromaMintableERC721ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KromaMintableERC721ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KromaMintableERC721Approval represents a Approval event raised by the KromaMintableERC721 contract.
type KromaMintableERC721Approval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_KromaMintableERC721 *KromaMintableERC721Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*KromaMintableERC721ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _KromaMintableERC721.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &KromaMintableERC721ApprovalIterator{contract: _KromaMintableERC721.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_KromaMintableERC721 *KromaMintableERC721Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *KromaMintableERC721Approval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _KromaMintableERC721.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KromaMintableERC721Approval)
				if err := _KromaMintableERC721.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_KromaMintableERC721 *KromaMintableERC721Filterer) ParseApproval(log types.Log) (*KromaMintableERC721Approval, error) {
	event := new(KromaMintableERC721Approval)
	if err := _KromaMintableERC721.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KromaMintableERC721ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the KromaMintableERC721 contract.
type KromaMintableERC721ApprovalForAllIterator struct {
	Event *KromaMintableERC721ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KromaMintableERC721ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KromaMintableERC721ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KromaMintableERC721ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KromaMintableERC721ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KromaMintableERC721ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KromaMintableERC721ApprovalForAll represents a ApprovalForAll event raised by the KromaMintableERC721 contract.
type KromaMintableERC721ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_KromaMintableERC721 *KromaMintableERC721Filterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*KromaMintableERC721ApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _KromaMintableERC721.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &KromaMintableERC721ApprovalForAllIterator{contract: _KromaMintableERC721.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_KromaMintableERC721 *KromaMintableERC721Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *KromaMintableERC721ApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _KromaMintableERC721.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KromaMintableERC721ApprovalForAll)
				if err := _KromaMintableERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_KromaMintableERC721 *KromaMintableERC721Filterer) ParseApprovalForAll(log types.Log) (*KromaMintableERC721ApprovalForAll, error) {
	event := new(KromaMintableERC721ApprovalForAll)
	if err := _KromaMintableERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KromaMintableERC721BurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the KromaMintableERC721 contract.
type KromaMintableERC721BurnIterator struct {
	Event *KromaMintableERC721Burn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KromaMintableERC721BurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KromaMintableERC721Burn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KromaMintableERC721Burn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KromaMintableERC721BurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KromaMintableERC721BurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KromaMintableERC721Burn represents a Burn event raised by the KromaMintableERC721 contract.
type KromaMintableERC721Burn struct {
	Account common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed account, uint256 tokenId)
func (_KromaMintableERC721 *KromaMintableERC721Filterer) FilterBurn(opts *bind.FilterOpts, account []common.Address) (*KromaMintableERC721BurnIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _KromaMintableERC721.contract.FilterLogs(opts, "Burn", accountRule)
	if err != nil {
		return nil, err
	}
	return &KromaMintableERC721BurnIterator{contract: _KromaMintableERC721.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed account, uint256 tokenId)
func (_KromaMintableERC721 *KromaMintableERC721Filterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *KromaMintableERC721Burn, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _KromaMintableERC721.contract.WatchLogs(opts, "Burn", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KromaMintableERC721Burn)
				if err := _KromaMintableERC721.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurn is a log parse operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed account, uint256 tokenId)
func (_KromaMintableERC721 *KromaMintableERC721Filterer) ParseBurn(log types.Log) (*KromaMintableERC721Burn, error) {
	event := new(KromaMintableERC721Burn)
	if err := _KromaMintableERC721.contract.UnpackLog(event, "Burn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KromaMintableERC721MintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the KromaMintableERC721 contract.
type KromaMintableERC721MintIterator struct {
	Event *KromaMintableERC721Mint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KromaMintableERC721MintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KromaMintableERC721Mint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KromaMintableERC721Mint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KromaMintableERC721MintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KromaMintableERC721MintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KromaMintableERC721Mint represents a Mint event raised by the KromaMintableERC721 contract.
type KromaMintableERC721Mint struct {
	Account common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed account, uint256 tokenId)
func (_KromaMintableERC721 *KromaMintableERC721Filterer) FilterMint(opts *bind.FilterOpts, account []common.Address) (*KromaMintableERC721MintIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _KromaMintableERC721.contract.FilterLogs(opts, "Mint", accountRule)
	if err != nil {
		return nil, err
	}
	return &KromaMintableERC721MintIterator{contract: _KromaMintableERC721.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed account, uint256 tokenId)
func (_KromaMintableERC721 *KromaMintableERC721Filterer) WatchMint(opts *bind.WatchOpts, sink chan<- *KromaMintableERC721Mint, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _KromaMintableERC721.contract.WatchLogs(opts, "Mint", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KromaMintableERC721Mint)
				if err := _KromaMintableERC721.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed account, uint256 tokenId)
func (_KromaMintableERC721 *KromaMintableERC721Filterer) ParseMint(log types.Log) (*KromaMintableERC721Mint, error) {
	event := new(KromaMintableERC721Mint)
	if err := _KromaMintableERC721.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KromaMintableERC721TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the KromaMintableERC721 contract.
type KromaMintableERC721TransferIterator struct {
	Event *KromaMintableERC721Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KromaMintableERC721TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KromaMintableERC721Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KromaMintableERC721Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KromaMintableERC721TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KromaMintableERC721TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KromaMintableERC721Transfer represents a Transfer event raised by the KromaMintableERC721 contract.
type KromaMintableERC721Transfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_KromaMintableERC721 *KromaMintableERC721Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*KromaMintableERC721TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _KromaMintableERC721.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &KromaMintableERC721TransferIterator{contract: _KromaMintableERC721.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_KromaMintableERC721 *KromaMintableERC721Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *KromaMintableERC721Transfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _KromaMintableERC721.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KromaMintableERC721Transfer)
				if err := _KromaMintableERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_KromaMintableERC721 *KromaMintableERC721Filterer) ParseTransfer(log types.Log) (*KromaMintableERC721Transfer, error) {
	event := new(KromaMintableERC721Transfer)
	if err := _KromaMintableERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
